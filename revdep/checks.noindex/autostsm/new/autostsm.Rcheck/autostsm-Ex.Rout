
R version 4.0.1 (2020-06-06) -- "See Things Now"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "autostsm"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('autostsm')
Loading required package: data.table
Warning: package ‘data.table’ was built under R version 4.0.2
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("stsm_detect_anomalies")
> ### * stsm_detect_anomalies
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stsm_detect_anomalies
> ### Title: Detect Anomalies
> ### Aliases: stsm_detect_anomalies
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #GDP Not seasonally adjusted
> ##D library(autostsm)
> ##D data("NA000334Q", package = "autostsm") #From FRED
> ##D NA000334Q = data.table(NA000334Q, keep.rownames = TRUE)
> ##D colnames(NA000334Q) = c("date", "y")
> ##D NA000334Q[, "date" := as.Date(date)]
> ##D NA000334Q[, "y" := as.numeric(y)]
> ##D NA000334Q = NA000334Q[date >= "1990-01-01", ]
> ##D stsm = stsm_estimate(NA000334Q)
> ##D anomalies = stsm_detect_anomalies(model = stsm, y = NA000334Q, plot = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("stsm_detect_breaks")
> ### * stsm_detect_breaks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stsm_detect_breaks
> ### Title: Detect Structural Breaks
> ### Aliases: stsm_detect_breaks
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #GDP Not seasonally adjusted
> ##D library(autostsm)
> ##D data("NA000334Q", package = "autostsm") #From FRED
> ##D NA000334Q = data.table(NA000334Q, keep.rownames = TRUE)
> ##D colnames(NA000334Q) = c("date", "y")
> ##D NA000334Q[, "date" := as.Date(date)]
> ##D NA000334Q[, "y" := as.numeric(y)]
> ##D NA000334Q = NA000334Q[date >= "1990-01-01", ]
> ##D stsm = stsm_estimate(NA000334Q)
> ##D breaks = stsm_detect_breaks(model = stsm, y = NA000334Q, plot = TRUE, cores = 2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("stsm_detect_cycle")
> ### * stsm_detect_cycle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stsm_detect_cycle
> ### Title: Detect cycle from the data
> ### Aliases: stsm_detect_cycle
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #GDP Not seasonally adjusted
> ##D library(autostsm)
> ##D data("NA000334Q", package = "autostsm") #From FRED
> ##D NA000334Q = data.table(NA000334Q, keep.rownames = TRUE)
> ##D colnames(NA000334Q) = c("date", "y")
> ##D NA000334Q[, "date" := as.Date(date)]
> ##D NA000334Q[, "y" := as.numeric(y)]
> ##D NA000334Q = NA000334Q[date >= "1990-01-01", ]
> ##D cycle = stsm_detect_cycle(y = NA000334Q$y, freq = 4)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("stsm_detect_frequency")
> ### * stsm_detect_frequency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stsm_detect_frequency
> ### Title: Detect frequency and dates from the data
> ### Aliases: stsm_detect_frequency
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #GDP Not seasonally adjusted
> ##D library(autostsm)
> ##D data("NA000334Q", package = "autostsm") #From FRED
> ##D NA000334Q = data.table(NA000334Q, keep.rownames = TRUE)
> ##D colnames(NA000334Q) = c("date", "y")
> ##D NA000334Q[, "date" := as.Date(date)]
> ##D NA000334Q[, "y" := as.numeric(y)]
> ##D NA000334Q = NA000334Q[date >= "1990-01-01", ]
> ##D freq = stsm_detect_frequency(y = NA000334Q)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("stsm_detect_multiplicative")
> ### * stsm_detect_multiplicative
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stsm_detect_multiplicative
> ### Title: Detect if log transformation is best
> ### Aliases: stsm_detect_multiplicative
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #GDP Not seasonally adjusted
> ##D library(autostsm)
> ##D data("NA000334Q", package = "autostsm") #From FRED
> ##D NA000334Q = data.table(NA000334Q, keep.rownames = TRUE)
> ##D colnames(NA000334Q) = c("date", "y")
> ##D NA000334Q[, "date" := as.Date(date)]
> ##D NA000334Q[, "y" := as.numeric(y)]
> ##D NA000334Q = NA000334Q[date >= "1990-01-01", ]
> ##D multiplicative = stsm_detect_multiplicative(y = NA000334Q$y, freq = 4)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("stsm_detect_seasonality")
> ### * stsm_detect_seasonality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stsm_detect_seasonality
> ### Title: Detect seasonality from the data
> ### Aliases: stsm_detect_seasonality
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #GDP Not seasonally adjusted
> ##D library(autostsm)
> ##D data("NA000334Q", package = "autostsm") #From FRED
> ##D NA000334Q = data.table(NA000334Q, keep.rownames = TRUE)
> ##D colnames(NA000334Q) = c("date", "y")
> ##D NA000334Q[, "date" := as.Date(date)]
> ##D NA000334Q[, "y" := as.numeric(y)]
> ##D NA000334Q = NA000334Q[date >= "1990-01-01", ]
> ##D seasonality = stsm_detect_seasonality(y = NA000334Q$y, freq = 4)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("stsm_detect_trend")
> ### * stsm_detect_trend
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stsm_detect_trend
> ### Title: Detect trend type
> ### Aliases: stsm_detect_trend
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #GDP Not seasonally adjusted
> ##D library(autostsm)
> ##D data("NA000334Q", package = "autostsm") #From FRED
> ##D NA000334Q = data.table(NA000334Q, keep.rownames = TRUE)
> ##D colnames(NA000334Q) = c("date", "y")
> ##D NA000334Q[, "date" := as.Date(date)]
> ##D NA000334Q[, "y" := as.numeric(y)]
> ##D NA000334Q = NA000334Q[date >= "1990-01-01", ]
> ##D trend = stsm_detect_trend(y = NA000334Q$y, freq = 4)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("stsm_estimate")
> ### * stsm_estimate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stsm_estimate
> ### Title: Trend cycle seasonal decomposition using the Kalman filter.
> ### Aliases: stsm_estimate
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #GDP Not seasonally adjusted
> ##D library(autostsm)
> ##D data("NA000334Q", package = "autostsm") #From FRED
> ##D NA000334Q = data.table(NA000334Q, keep.rownames = TRUE)
> ##D colnames(NA000334Q) = c("date", "y")
> ##D NA000334Q[, "date" := as.Date(date)]
> ##D NA000334Q[, "y" := as.numeric(y)]
> ##D NA000334Q = NA000334Q[date >= "1990-01-01", ]
> ##D stsm = stsm_estimate(NA000334Q)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("stsm_forecast")
> ### * stsm_forecast
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stsm_forecast
> ### Title: Kalman Filter and Forecast
> ### Aliases: stsm_forecast
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #GDP Not seasonally adjusted
> ##D library(autostsm)
> ##D data("NA000334Q", package = "autostsm") #From FRED
> ##D NA000334Q = data.table(NA000334Q, keep.rownames = TRUE)
> ##D colnames(NA000334Q) = c("date", "y")
> ##D NA000334Q[, "date" := as.Date(date)]
> ##D NA000334Q[, "y" := as.numeric(y)]
> ##D NA000334Q = NA000334Q[date >= "1990-01-01", ]
> ##D stsm = stsm_estimate(NA000334Q)
> ##D fc = stsm_forecast(stsm, y = NA000334Q, n.ahead = floor(stsm$freq)*3, plot = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("stsm_prior")
> ### * stsm_prior
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stsm_prior
> ### Title: Return a naive model prior decomposition
> ### Aliases: stsm_prior
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #GDP Not seasonally adjusted
> ##D library(autostsm)
> ##D data("NA000334Q", package = "autostsm") #From FRED
> ##D NA000334Q = data.table(NA000334Q, keep.rownames = TRUE)
> ##D colnames(NA000334Q) = c("date", "y")
> ##D NA000334Q[, "date" := as.Date(date)]
> ##D NA000334Q[, "y" := as.numeric(y)]
> ##D NA000334Q = NA000334Q[date >= "1990-01-01", ]
> ##D prior = stsm_prior(y = NA000334Q$y, freq = 4)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("stsm_ssm")
> ### * stsm_ssm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stsm_ssm
> ### Title: State space model
> ### Aliases: stsm_ssm
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #GDP Not seasonally adjusted
> ##D library(autostsm)
> ##D data("NA000334Q", package = "autostsm") #From FRED
> ##D NA000334Q = data.table(NA000334Q, keep.rownames = TRUE)
> ##D colnames(NA000334Q) = c("date", "y")
> ##D NA000334Q[, "date" := as.Date(date)]
> ##D NA000334Q[, "y" := as.numeric(y)]
> ##D NA000334Q = NA000334Q[date >= "1990-01-01", ]
> ##D stsm = stsm_estimate(NA000334Q)
> ##D ssm = stsm_ssm(model = stsm)
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.742 0.054 0.826 0.002 0.004 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
