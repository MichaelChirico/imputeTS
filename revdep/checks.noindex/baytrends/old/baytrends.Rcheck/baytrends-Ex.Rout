
R version 4.0.1 (2020-06-06) -- "See Things Now"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "baytrends"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('baytrends')
Loading required package: lubridate

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

Loading required package: mgcv
Loading required package: nlme
This is mgcv 1.8-31. For overview type 'help("mgcv-package")'.
**baytrends v1.2.1 Notice.** This software program is preliminary or provisional and is subject to revision. This software program is for testing only, no warranty, expressed or implied, is made as to the accuracy and functioning of the program and related program material nor shall the fact of distribution constitute any such warranty, and no responsibility is assumed in connection therewith. This software is provided 'AS IS.' 

Attaching package: ‘baytrends’

The following object is masked from ‘package:utils’:

    View

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Arith-censored")
> ### * Arith-censored
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Arith-censored
> ### Title: Arithmetic Methods for 'lcens', 'mcens', and 'qw' objects
> ### Aliases: Arith-censored Arith,lcens,numeric-method
> ###   Arith,numeric,lcens-method Arith,lcens,lcens-method
> ###   Arith,mcens,numeric-method Arith,numeric,mcens-method
> ###   Arith,mcens,mcens-method Arith,qw,numeric-method
> ###   Arith,numeric,qw-method Arith,qw,qw-method
> ### Keywords: internal manip methods
> 
> ### ** Examples
> 
> as.lcens(c(1, 3), 2) + 1
    Values Limits
[1] <3     3     
[2]  4     3     
> as.lcens(c(1, 3), 2) * 2
    Values Limits
[1] <4     4     
[2]  6     4     
> 
> 
> 
> 
> cleanEx()
> nameEx("Math-censored")
> ### * Math-censored
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Math-censored
> ### Title: Mathematical Transform Methods for 'lcens' objects
> ### Aliases: Math-censored Math,lcens-method Math,mcens-method
> ###   Math,qw-method
> ### Keywords: internal manip methods
> 
> ### ** Examples
> 
> log(as.lcens(c(1, 3), 2))
    Values  Limits
[1] <0.6931 0.6931
[2]  1.099  0.6931
> 
> 
> 
> 
> cleanEx()
> nameEx("Q05078470")
> ### * Q05078470
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Q05078470
> ### Title: Daily Streamflow
> ### Aliases: Q05078470
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Q05078470)
> # Plot the data for station 05078470
> with(Q05078470, plot(DATES, FLOW, type='l'))
> 
> 
> 
> cleanEx()
> nameEx("QW05078470")
> ### * QW05078470
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: QW05078470
> ### Title: Stream Water Quality
> ### Aliases: QW05078470
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> data(QW05078470)
> # Plot the data
> with(QW05078470, plot(DATES, P00665, log='y'))
> 
> 
> 
> 
> cleanEx()
> nameEx("QWstacked")
> ### * QWstacked
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: QWstacked
> ### Title: Stream Water Quality
> ### Aliases: QWstacked
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> data(QWstacked)
> # Plot the data for whole-water phosphorus
> with(subset(QWstacked, parm_cd == "00665"), plot(sample_dt, result_va))
> # Overlay the data for dissolved phosphorus (should be smaller values)
> with(subset(QWstacked, parm_cd == "00666"), points(sample_dt, result_va, col='red'))
> 
> 
> 
> cleanEx()
> nameEx("addCaption")
> ### * addCaption
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addCaption
> ### Title: Add Caption
> ### Aliases: addCaption
> ### Keywords: aplot internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D set.seed(1)
> ##D X <- runif(25)
> ##D Y <- runif(25)
> ##D setGD()
> ##D AA.pl <- xyPlot(X, Y)
> ##D addCaption("Twenty five random points")
> ##D # See for examples of addCaption:
> ##D # vignette(topic="GraphSetup", package="smwrGraphs")
> ##D # demo(topic="AnnualFlowBarChart", package="smwrGraphs")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("analysisOrganizeData")
> ### * analysisOrganizeData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: analysisOrganizeData
> ### Title: Analysis Organization & Data Preparation
> ### Aliases: analysisOrganizeData
> 
> ### ** Examples
> 
> # run analysis relying on default specifications, examine analySpec for
> # default options
> dfr <- analysisOrganizeData(dataCensored)


 


### Record Count


 

`Beginning Number of Records:  13062`

 

`Number of Records After Processing:  13062`

 


### Parameters


 

*Table: List of Parameters.*

 



Dep. Var.  Parameter Name                Units  Log Tran.  GAM Dep. Var.
---------  ----------------------------  -----  ---------  -------------
secchi     Secchi Depth                  m      FALSE      secchi       
chla       Chlorophyll a (Corrected)     ug/L   TRUE       lnchla       
do         Dissolved Oxygen              mg/L   FALSE      do           
tn         Total Nitrogen                mg/L   TRUE       lntn         
tp         Total Phosphorus              mg/L   TRUE       lntp         
po4        Orthophosphorus               mg/L   TRUE       lnpo4        
tdp        Total Dissolved Phosphorus    mg/L   TRUE       lntdp        
no23       Nitrite + Nitrate             mg/L   TRUE       lnno23       
nh4        Ammonium                      mg/L   TRUE       lnnh4        
tdn        Total Dissolved Nitrogen      mg/L   TRUE       lntdn        
din        Dissolved Inorganic Nitrogen  mg/L   TRUE       lndin        
salinity   Salinity                      ppt    FALSE      salinity     
tss        Total Suspended Solids        mg/L   TRUE       lntss        
wtemp      Water Temperature             deg C  FALSE      wtemp        

### Layers


 

*Table: List of Layers.*

 



Layer ID  Layer Name      
--------  ----------------
S         Surface         
AP        Above Pycnocline
BP        Below Pycnocline
B         Bottom          

### Models


 

*Table: List of Models.*

 



Option  Model                                         
------  ----------------------------------------------
     0  Linear Trend with Seasonality                 
     1  Non-linear Trend with Seasonality             
     2  Non-linear trend with Seas+Int                
     3  Non-linear trend with Seas+Int. & Intervention
     4  Non-linear trend with Seas+Int. & Hydro Adj   

## 

### Stations


 

*Table: List of Stations.*

 



Station ID  Latitude  Longitude  CB 92 Seg.  Flow Adj. Gage  Mth. Group
----------  --------  ---------  ----------  --------------  ----------
CB3.3C       38.9960   -76.3597  CB3MH       01578310        MD-Main   
CB4.1C       38.8259   -76.3994  CB4MH       01578310        MD-Main   
CB5.4        37.8001   -76.1747  CB5MH_VA    01578310        VA-All    
TF5.5        37.3126   -77.2328  JMSTF1      02035000        VA-All    
EE2.1        38.6549   -76.2643  CHOMH1      01491000        MD-Trib   
EE3.0        38.2809   -76.0103  FSBMH       01578310        MD-Trib   
TF2.2        38.6907   -77.1111  POTTF_MD    01646500        MD-Potomac
LE2.2        38.1576   -76.5980  POTMH_MD    01646500        MD-Potomac
> df        <- dfr[["df"]]
> analySpec <- dfr[["analySpec"]]
> 
> # analyze bottom dissolved oxygen at 2 stations
> analySpec <-list()
> analySpec$parameterFilt <- c('do')
> analySpec$layerFilt     <- c('B')
> analySpec$stationFilt   <- c('CB3.3C', 'CB5.4')
> dfr <- analysisOrganizeData(dataCensored, analySpec)


 


### Record Count


 

`Beginning Number of Records:  13062`

 

`Number of Records After Processing:  1015`

 


### Parameters


 

*Table: List of Parameters.*

 



Dep. Var.  Parameter Name    Units  Log Tran.  GAM Dep. Var.
---------  ----------------  -----  ---------  -------------
do         Dissolved Oxygen  mg/L   FALSE      do           

### Layers


 

*Table: List of Layers.*

 



Layer ID  Layer Name
--------  ----------
B         Bottom    

### Models


 

*Table: List of Models.*

 



Option  Model                                         
------  ----------------------------------------------
     0  Linear Trend with Seasonality                 
     1  Non-linear Trend with Seasonality             
     2  Non-linear trend with Seas+Int                
     3  Non-linear trend with Seas+Int. & Intervention
     4  Non-linear trend with Seas+Int. & Hydro Adj   

## 

### Stations


 

*Table: List of Stations.*

 



Station ID  Latitude  Longitude  CB 92 Seg.  Flow Adj. Gage  Mth. Group
----------  --------  ---------  ----------  --------------  ----------
CB3.3C       38.9960   -76.3597  CB3MH       01578310        MD-Main   
CB5.4        37.8001   -76.1747  CB5MH_VA    01578310        VA-All    
> df        <- dfr[["df"]]
> analySpec <- dfr[["analySpec"]]
> 
> 
> 
> 
> cleanEx()
> nameEx("as.double")
> ### * as.double
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.double.qw
> ### Title: Numeric Representations
> ### Aliases: as.double.qw
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> 
> ## Create a simple qw object 
> Test.qw <- as.qw(c(1,2,3,2,4,4), c("<", "<", "<", " ", " ", " "), "", NA_real_,
+ "Miss", "None", "Mine", "TEST", "")
> as.double(Test.qw)
[1] 0.5 0.5 1.0 2.0 4.0 4.0
> as.numeric(Test.qw)
[1] 0.5 0.5 1.0 2.0 4.0 4.0
> 
> 
> 
> 
> cleanEx()
> nameEx("as.lcens")
> ### * as.lcens
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.lcens
> ### Title: Left-censored Data Conversion
> ### Aliases: as.lcens as.lcens,lcens,missing,missing-method
> ###   as.lcens,numeric,missing,missing-method
> ###   as.lcens,numeric,numeric,missing-method
> ###   as.lcens,numeric,numeric,logical-method
> ###   as.lcens,numeric,numeric,character-method
> ###   as.lcens,numeric,missing,logical-method
> ###   as.lcens,numeric,missing,character-method
> ###   as.lcens,qw,missing,missing-method as.lcens,qw,numeric,missing-method
> ###   as.lcens,character,missing,missing-method
> ### Keywords: internal manip methods
> 
> ### ** Examples
> 
> 
> ## The first value is censored at 2
> as.lcens(c(1,3), 2)
    Values Limits
[1] <2     2     
[2]  3     2     
> ## Set the first value to censored at that level and the detection limit is
> # carried forward
> as.lcens(c(1,3), censor.codes=c("<", ""))
    Values Limits
[1] <1     1     
[2]  3     1     
> # For combined remark and values:
> as.lcens(c("<1", "1", "<1", "1", "2"))
    Values Limits
[1] <1     1     
[2]  1     1     
[3] <1     1     
[4]  1     1     
[5]  2     1     
> 
> 
> 
> 
> cleanEx()
> nameEx("as.mcens")
> ### * as.mcens
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.mcens
> ### Title: Multiply-censored Data Conversion
> ### Aliases: as.mcens as.mcens,mcens,missing,missing-method
> ###   as.mcens,lcens,missing,missing-method
> ###   as.mcens,numeric,missing,missing-method
> ###   as.mcens,numeric,numeric,missing-method
> ###   as.mcens,numeric,missing,numeric-method
> ###   as.mcens,numeric,missing,integer-method
> ###   as.mcens,numeric,missing,character-method
> ###   as.mcens,qw,missing,missing-method
> ###   as.mcens,character,missing,missing-method
> ### Keywords: internal manip methods
> 
> ### ** Examples
> 
> ## Create one of each type of censoring, including uncensored
> # the last value is missing
> as.mcens(c(-Inf, 2, 2, 5, NA), c(1, 2, 3, Inf, NA))
    Lower Upper
[1] -Inf  1    
[2] 2     2    
[3] 2     3    
[4] 5     Inf  
[5] <NA>  <NA> 
> # For combined remark and values:
> as.mcens(c("<1", "1", ">3", "1", "2"))
    Lower Upper
[1] -Inf  1    
[2] 1     1    
[3] 3     Inf  
[4] 1     1    
[5] 2     2    
> 
> 
> 
> cleanEx()
> nameEx("baseDay")
> ### * baseDay
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: baseDay
> ### Title: Base Day
> ### Aliases: baseDay
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> 
> # The default numeric result
> baseDay(c("2000-02-29", "2000-03-01", "2001-03-01"))
[1] 60 61 61
> # The result as a factor
> baseDay(c("2000-02-29", "2000-03-01", "2001-03-01"), numeric=FALSE)
[1] Feb 29 Mär 01 Mär 01
366 Levels: Jan 01 Jan 02 Jan 03 Jan 04 Jan 05 Jan 06 Jan 07 Jan 08 ... Dez 31
> 
> 
> 
> cleanEx()
> nameEx("baseDay2decimal")
> ### * baseDay2decimal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: baseDay2decimal
> ### Title: Base Day
> ### Aliases: baseDay2decimal
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> # The baseDay ordered by calendar year
> bd.tmp <- baseDay(c("2000-02-29", "2000-03-01", "2001-03-01"), 
+   numeric=FALSE)
> baseDay2decimal(bd.tmp)
[1] 0.1612022 0.1639344 0.1639344
> # ordered by water year, result should agree
> bd.tmp <- baseDay(c("2000-02-29", "2000-03-01", "2001-03-01"), 
+   numeric=FALSE, year="water")
> baseDay2decimal(bd.tmp)
[1] 0.1612022 0.1639344 0.1639344
> 
> 
> 
> cleanEx()
> nameEx("c")
> ### * c
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: c.lcens
> ### Title: Combine Values into a Vector
> ### Aliases: c.lcens c.mcens c.qw
> ### Keywords: internal
> 
> ### ** Examples
> 
> 
> c(as.lcens(c(1,3), 2), 2)
    Values Limits
[1] <2     2     
[2]  3     2     
[3]  2     -98   
> 
> 
> 
> 
> cleanEx()
> nameEx("censorLevels")
> ### * censorLevels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: censorLevels
> ### Title: Describe Censoring
> ### Aliases: censorLevels censorLevels.default censorLevels.lcens
> ###   censorLevels.mcens censorLevels.qw
> ### Keywords: attribute censored internal
> 
> ### ** Examples
> 
> 
> censorLevels(2.3) # a simple number
[1] -Inf
> censorLevels(as.lcens(1, 2)) # left-censored 
[1] 2
> 
> 
> 
> 
> cleanEx()
> nameEx("censoring")
> ### * censoring
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: censoring
> ### Title: Describe Censoring
> ### Aliases: censoring censoring.default censoring.lcens censoring.mcens
> ###   censoring.qw
> ### Keywords: attribute censored internal
> 
> ### ** Examples
> 
> 
> censoring(2.3) # a simple number
[1] "none"
> censoring(as.lcens(1, 2)) # left-censored 
[1] "left"
> 
> 
> 
> 
> cleanEx()
> nameEx("censpp")
> ### * censpp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: censpp
> ### Title: Probability Plotting Positions
> ### Aliases: censpp censpp.default censpp.lcens censpp.mcens
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> # This example demonstrates the probability adjustments made for censoring
> # The raw, uncensored data:
> ppoints(7, .44)
[1] 0.07865169 0.21910112 0.35955056 0.50000000 0.64044944 0.78089888 0.92134831
> # censor ar 0.5 (the lowest 3 values)
> censpp(as.lcens(ppoints(7, .44), 0.5))
$x
[1] 0.5000000 0.6404494 0.7808989 0.9213483

$pp
[1] 0.5062413 0.6449376 0.7836338 0.9223301

$xcen
[1] 0.5 0.5 0.5

$ppcen
[1] 0.07692308 0.21428571 0.35164835

> 
> 
> 
> 
> cleanEx()
> nameEx("closeOut")
> ### * closeOut
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: closeOut
> ### Title: Document Processing Time and Other Session Time
> ### Aliases: closeOut
> 
> ### ** Examples
> 
> closeOut()

##  

# Close Out

### Total Processing Time
`End processing time 2020-07-15 09:35:45.`

 



 


### Distribution and Contact Information


|Category     |Description                                     |
|:------------|:-----------------------------------------------|
|Name         |Rebecca Murphy, Ph.D.                           |
|Organization |Chesapeake Bay Program Office                   |
|Address      |410 Severn Ave., Suite 112, Annapolis, MD 21403 |
|Voice phone  |(410)267-9837                                   |
|email        |rmurphy@chesapeakebay.net                       |


 



|Category    |Description                                   |
|:-----------|:---------------------------------------------|
|Name        |Elgin S. Perry, Ph.D.                         |
|Address     |377 Resolutions Rd., Colonial Beach, VA 22443 |
|Voice phone |(410)610-1473                                 |
|email       |eperry@chesapeake.net                         |


 



|Category     |Description              |
|:------------|:------------------------|
|Name         |Jon B. Harcum, Ph.D.     |
|Organization |Tetra Tech, Inc.         |
|Address      |                         |
|Voice phone  |(864)650-5815            |
|email        |jon.harcum@tetratech.com |


 



|Category     |Description                                            |
|:------------|:------------------------------------------------------|
|Name         |Erik Leppo                                             |
|Organization |Tetra Tech, Inc.                                       |
|Address      |10711 Red Run Blvd., Suite 105, Owings Mills, MD 21117 |
|Voice phone  |(410)902-3150                                          |
|email        |erik.leppo@tetratech.com                               |


 


##  

### Session Information

#### Platform
 setting  value                       
 version  R version 4.0.1 (2020-06-06)
 os       macOS Catalina 10.15.3      
 system   x86_64, darwin17.0          
 ui       X11                         
 language en                          
 collate  C                           
 ctype    de_DE.UTF-8                 
 tz       Europe/Berlin               
 date     2020-07-15                  

#### Packages


|              |package       |loadedversion |path                                                                                         |
|:-------------|:-------------|:-------------|:--------------------------------------------------------------------------------------------|
|assertthat    |assertthat    |0.2.1         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/assertthat                    |
|baytrends     |baytrends     |1.2.1         |/Users/Steve/Dropbox/imputeTS/revdep/checks.noindex/baytrends/old/baytrends.Rcheck/baytrends |
|cli           |cli           |2.0.2         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/cli                           |
|crayon        |crayon        |1.3.4         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/crayon                        |
|dataRetrieval |dataRetrieval |2.7.6         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/dataRetrieval                 |
|digest        |digest        |0.6.25        |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/digest                        |
|fansi         |fansi         |0.4.1         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/fansi                         |
|generics      |generics      |0.0.2         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/generics                      |
|glue          |glue          |1.4.1         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/glue                          |
|highr         |highr         |0.8           |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/highr                         |
|knitr         |knitr         |1.29          |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/knitr                         |
|lattice       |lattice       |0.20-41       |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/lattice                       |
|lubridate     |lubridate     |1.7.9         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/lubridate                     |
|MASS          |MASS          |7.3-51.6      |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/MASS                          |
|Matrix        |Matrix        |1.2-18        |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/Matrix                        |
|memoise       |memoise       |1.1.0         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/memoise                       |
|mgcv          |mgcv          |1.8-31        |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/mgcv                          |
|NADA          |NADA          |1.6-1.1       |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/NADA                          |
|nlme          |nlme          |3.1-148       |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/nlme                          |
|pander        |pander        |0.6.3         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/pander                        |
|plyr          |plyr          |1.8.6         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/plyr                          |
|Rcpp          |Rcpp          |1.0.5         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/Rcpp                          |
|rstudioapi    |rstudioapi    |0.11          |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/rstudioapi                    |
|sessioninfo   |sessioninfo   |1.1.1         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/sessioninfo                   |
|survival      |survival      |3.2-3         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/survival                      |
|truncnorm     |truncnorm     |1.0-8         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/truncnorm                     |
|withr         |withr         |2.2.0         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/withr                         |
|xfun          |xfun          |0.15          |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/xfun                          |
|XML           |XML           |3.99-0.4      |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/XML                           |
|xml2          |xml2          |1.3.2         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/xml2                          |
|zCompositions |zCompositions |1.3.4         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/zCompositions                 |
> 
> 
> 
> cleanEx()
> nameEx("colorPlot")
> ### * colorPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: colorPlot
> ### Title: Plot Data
> ### Aliases: colorPlot colorPlot,numeric,numeric-method
> ###   colorPlot,Date,numeric-method colorPlot,POSIXt,numeric-method
> ### Keywords: hplot internal methods
> 
> ### ** Examples
> 
> ## Not run: 
> ##D set.seed(1)
> ##D X <- rnorm(32)
> ##D Y <- X + rnorm(32)
> ##D Z <- sqrt(X^2 + Y^2) # distance from origin
> ##D setGD()
> ##D # All defaults: color ramp from Z
> ##D colorPlot(X, Y, Z)
> ##D # See for examples of colorPlot:
> ##D #vignette(topic="LineScatter", package="smwrGraphs")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("convert2qw")
> ### * convert2qw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: convert2qw
> ### Title: Water-Quality Data
> ### Aliases: convert2qw
> ### Keywords: IO datasets internal
> 
> ### ** Examples
> 
> # Make a dummy partial dataset
> tmp.dum <- data.frame(sta=c("A", "B"),
+  Val=c(1, 1.2),
+  Val.rmk=c("<", ""),
+  Val.dl=c(1, 1), stringsAsFactors=FALSE)
> convert2qw(tmp.dum, scheme="partial")
  sta  Val
1   A <1.0
2   B  1.2
> 
> 
> 
> 
> cleanEx()
> nameEx("convertFqw")
> ### * convertFqw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: convertFqw
> ### Title: Water-Quality Data
> ### Aliases: convertFqw
> ### Keywords: IO datasets internal
> 
> ### ** Examples
> 
> # Make a dummy partial dataset
> tmp.dum <- data.frame(sta=c("A", "B"),
+  Val=c(1, 1.2),
+  Val.rmk=c("<", ""),
+  Val.dl=c(1, 1), stringsAsFactors=FALSE)
> tmp.qw <- convert2qw(tmp.dum, scheme="partial")
> # Expand the result
> convertFqw(tmp.qw)
  sta Val.va1 Val.va2 Val.rmk Val.vqc Val.rlv Val.rmt Val.unt Val.mth Val.nam
1   A     0.0     1.0       <               1     MDL                        
2   B     1.2     1.2                       1     MDL                        
  Val.pcd
1        
2        
> 
> 
> 
> cleanEx()
> nameEx("dectime")
> ### * dectime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dectime
> ### Title: Decimal Time
> ### Aliases: dectime
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> 
> dectime("11/11/1918", date.format="%m/%d/%Y")
[1] 1918.862
> dectime(1988:1990)
[1] 1988 1989 1990
> 
> 
> 
> cleanEx()
> nameEx("dectime2Date")
> ### * dectime2Date
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dectime2Date
> ### Title: Date Conversion
> ### Aliases: dectime2Date
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> 
> dectime("02/07/2013", date.format="%m/%d/%Y")
[1] 2013.103
> # Convert back the printed result:
> dectime2Date(2013.103)
[1] "2013-02-07"
> 
> 
> 
> cleanEx()
> nameEx("detrended.flow")
> ### * detrended.flow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: detrended.flow
> ### Title: Create Seasonally Detrended Flow Data Set
> ### Aliases: detrended.flow
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Define Function Inputs
> ##D usgsGageID    <- c("01491000", "01578310")
> ##D siteName      <- c("Choptank River near Greensboro, MD",
> ##D                    "Susquehanna River at Conowingo, MD")
> ##D yearStart     <- 1983
> ##D yearEnd       <- 2016
> ##D dvAvgWinSel   <- c(1, 5, 10, 15, 20, 30, 40, 50, 60, 90, 120, 150, 180, 210)
> ##D dvAvgWgtSel   <- "uniform"
> ##D dvAvgSidesSel <- 1
> ##D lowess.f      <- 0.2
> ##D                  
> ##D # Run Function
> ##D flow.detrended <- detrended.flow(usgsGageID, siteName, yearStart, yearEnd
> ##D                                 , dvAvgWinSel, dvAvgWgtSel, dvAvgSidesSel
> ##D                                , lowess.f)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("detrended.salinity")
> ### * detrended.salinity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: detrended.salinity
> ### Title: Create Seasonally Detrended Salinty Data Set
> ### Aliases: detrended.salinity
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Show Example Dataset (sal)
> ##D str(sal)
> ##D 
> ##D # Define Function Inputs
> ##D df.sal        <- sal
> ##D dvAvgWinSel   <- 30
> ##D lowess.f      <- 0.2
> ##D minObs        <- 40
> ##D minObs.sd    <- 10
> ##D                  
> ##D # Run Function
> ##D salinity.detrended <- detrended.salinity(df.sal, dvAvgWinSel, 
> ##D                                  lowess.f, minObs, minObs.sd) 
> ## End(Not run)              
> 
> 
> 
> cleanEx()
> nameEx("dlimit")
> ### * dlimit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dlimit
> ### Title: Impute Detection Limits
> ### Aliases: dlimit
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> 
> ## The actual detection limits are 2,2,2,1,1,1.
> dlimit(c(2,2,3,1,1,2), c(" ", "<", " ", " ", "<", " "))
[1] 2e+00 2e+00 2e+00 1e-25 1e+00 1e+00
> 
> 
> 
> 
> cleanEx()
> nameEx("dot-F")
> ### * dot-F
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .F
> ### Title: Print out figure title (customization of pandoc.emphasis and
> ###   pandoc.strong )
> ### Aliases: .F
> ### Keywords: internal
> 
> ### ** Examples
> 
> text<-"Hello World!"
> .F(text)


 

*Figure: Hello World!*

 

> .F(text, 4)


 

*Figure 4. Hello World!*

 

> .F(text, 4,'e')


 

*Figure 4. Hello World!*

 

> .F(text, 4,'s')


 

**Figure 4. Hello World!**

 

> 
> 
> 
> cleanEx()
> nameEx("dot-H")
> ### * dot-H
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .H
> ### Title: Print out header (shortened pandoc.header)
> ### Aliases: .H
> ### Keywords: internal
> 
> ### ** Examples
> 
> .H("1st level header",1)

# 1st level header
> 
> 
> 
> cleanEx()
> nameEx("dot-H1")
> ### * dot-H1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .H1
> ### Title: Print out 1st level header (shortened pandoc.header)
> ### Aliases: .H1
> ### Keywords: internal
> 
> ### ** Examples
> 
> .H1("1st level header")

# 1st level header
> .H3("3rd level header")

### 3rd level header
> 
> 
> 
> cleanEx()
> nameEx("dot-H2")
> ### * dot-H2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .H2
> ### Title: Print out 2nd level header (shortened pandoc.header)
> ### Aliases: .H2
> ### Keywords: internal
> 
> ### ** Examples
> 
> .H2("2nd level header")

## 2nd level header
> .H3("3rd level header")

### 3rd level header
> 
> 
> 
> cleanEx()
> nameEx("dot-H3")
> ### * dot-H3
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .H3
> ### Title: Print out 3rd level header (shortened pandoc.header)
> ### Aliases: .H3
> ### Keywords: internal
> 
> ### ** Examples
> 
> .H2("2nd level header")

## 2nd level header
> .H3("3rd level header")

### 3rd level header
> 
> 
> 
> cleanEx()
> nameEx("dot-H4")
> ### * dot-H4
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .H4
> ### Title: Print out 4th level header (shortened pandoc.header)
> ### Aliases: .H4
> ### Keywords: internal
> 
> ### ** Examples
> 
> .H2("2nd level header")

## 2nd level header
> .H4("4th level header")

#### 4th level header
> 
> 
> 
> cleanEx()
> nameEx("dot-H5")
> ### * dot-H5
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .H5
> ### Title: Print out 5th level header (shortened pandoc.header)
> ### Aliases: .H5
> ### Keywords: internal
> 
> ### ** Examples
> 
> .H2("2nd level header")

## 2nd level header
> .H5("5th level header")

##### 5th level header
> 
> 
> 
> cleanEx()
> nameEx("dot-P")
> ### * dot-P
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .P
> ### Title: Paragraph (customization of pandoc.p)
> ### Aliases: .P
> ### Keywords: internal
> 
> ### ** Examples
> 
> .P()


 

> 
> 
> 
> cleanEx()
> nameEx("dot-T")
> ### * dot-T
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .T
> ### Title: Print out table title (customization of pandoc.emphasis and
> ###   pandoc.strong )
> ### Aliases: .T
> ### Keywords: internal
> 
> ### ** Examples
> 
> text<-"Hello World!"
> .T(text)


 

*Table: Hello World!*

 

> .T(text, 4)


 

*Table 4. Hello World!*

 

> .T(text, 4,'e')


 

*Table 4. Hello World!*

 

> .T(text, 4,'s')


 

**Table 4. Hello World!**

 

> 
> 
> 
> cleanEx()
> nameEx("dot-V")
> ### * dot-V
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .V
> ### Title: Print out text (blended pandoc.emphasis, .verbatim, and .strong)
> ### Aliases: .V
> ### Keywords: internal
> 
> ### ** Examples
> 
> .V("Hello World!",'v')
`Hello World!`> .V("Hello World!",'e')
*Hello World!*> .V("Hello World!",'s')
**Hello World!**> .V("Hello World!")
`Hello World!`> 
> 
> 
> cleanEx()
> nameEx("dot-checkRange")
> ### * dot-checkRange
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .checkRange
> ### Title: Check Data Range - function that checks for allowable values
> ### Aliases: .checkRange
> ### Keywords: internal
> 
> ### ** Examples
> 
> # create an example data frame
> df <- data.frame(
+        x1 = c("X1","Y2","A1","B2","C1", "X1","","A1","","C1"),
+        x2 = seq(5, 14 ) + runif(10) ,
+        x3 = as.POSIXct(c("1/10/2008", "1/21/2008", "3/1/2008", "3/26/1993",
+                          "11/1/2012", "6/10/2000", "8/2/1990", "7/8/2005",
+                          "1/6/2008", "9/11/2008"),
+                          format="%m/%d/%Y"), stringsAsFactors =FALSE)
> # add a few missing values
> df[1,1]=NA
> df[3,2]=NA
> df[5,3]=NA
> df
     x1        x2         x3
1  <NA>  5.265509 2008-01-10
2    Y2  6.372124 2008-01-21
3    A1        NA 2008-03-01
4    B2  8.908208 1993-03-26
5    C1  9.201682       <NA>
6    X1 10.898390 2000-06-10
7       11.944675 1990-08-02
8    A1 12.660798 2005-07-08
9       13.629114 2008-01-06
10   C1 14.061786 2008-09-11
> 
> # establish allowable values for screening
> x1Scrn <- as.character(c("A1", "B2", "C1", "Y2"))   # character
> x2Scrn <- c(7,13)                                   # min/max value
> x3Scrn <- as.POSIXct(c("1999-01-01", "2008-09-10")) # min/max date (POSIXct format)
> 
> # return df with new column indicating pass [TRUE] / fail [FALSE]
> .checkRange(df, var="x1", varScrn=x1Scrn, numNA=FALSE, deleteOption='mark')
     x1        x2         x3 dfScrn
1  <NA>  5.265509 2008-01-10  FALSE
2    Y2  6.372124 2008-01-21   TRUE
3    A1        NA 2008-03-01   TRUE
4    B2  8.908208 1993-03-26   TRUE
5    C1  9.201682       <NA>   TRUE
6    X1 10.898390 2000-06-10  FALSE
7       11.944675 1990-08-02  FALSE
8    A1 12.660798 2005-07-08   TRUE
9       13.629114 2008-01-06  FALSE
10   C1 14.061786 2008-09-11   TRUE
> .checkRange(df, var="x2", varScrn=x2Scrn, numNA=FALSE, deleteOption='mark')
     x1        x2         x3 dfScrn
1  <NA>  5.265509 2008-01-10  FALSE
2    Y2  6.372124 2008-01-21  FALSE
3    A1        NA 2008-03-01  FALSE
4    B2  8.908208 1993-03-26   TRUE
5    C1  9.201682       <NA>   TRUE
6    X1 10.898390 2000-06-10   TRUE
7       11.944675 1990-08-02   TRUE
8    A1 12.660798 2005-07-08   TRUE
9       13.629114 2008-01-06  FALSE
10   C1 14.061786 2008-09-11  FALSE
> .checkRange(df, var="x3", varScrn=x3Scrn, numNA=FALSE, deleteOption='mark')
     x1        x2         x3 dfScrn
1  <NA>  5.265509 2008-01-10   TRUE
2    Y2  6.372124 2008-01-21   TRUE
3    A1        NA 2008-03-01   TRUE
4    B2  8.908208 1993-03-26  FALSE
5    C1  9.201682       <NA>  FALSE
6    X1 10.898390 2000-06-10   TRUE
7       11.944675 1990-08-02  FALSE
8    A1 12.660798 2005-07-08   TRUE
9       13.629114 2008-01-06   TRUE
10   C1 14.061786 2008-09-11  FALSE
> 
> # return df with only rows that pass check
> .checkRange(df, var="x1", varScrn=x1Scrn, numNA=FALSE, deleteOption='pass')
   x1        x2         x3
2  Y2  6.372124 2008-01-21
3  A1        NA 2008-03-01
4  B2  8.908208 1993-03-26
5  C1  9.201682       <NA>
8  A1 12.660798 2005-07-08
10 C1 14.061786 2008-09-11
> .checkRange(df, var="x2", varScrn=x2Scrn, numNA=FALSE, deleteOption='pass')
  x1        x2         x3
4 B2  8.908208 1993-03-26
5 C1  9.201682       <NA>
6 X1 10.898390 2000-06-10
7    11.944675 1990-08-02
8 A1 12.660798 2005-07-08
> .checkRange(df, var="x3", varScrn=x3Scrn, numNA=FALSE, deleteOption='pass')
    x1        x2         x3
1 <NA>  5.265509 2008-01-10
2   Y2  6.372124 2008-01-21
3   A1        NA 2008-03-01
6   X1 10.898390 2000-06-10
8   A1 12.660798 2005-07-08
9      13.629114 2008-01-06
> 
> 
> 
> cleanEx()
> nameEx("dot-chkParameter")
> ### * dot-chkParameter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .chkParameter
> ### Title: Reduce dataframe and parameter list based on user selected
> ###   parameterFilt
> ### Aliases: .chkParameter
> ### Keywords: internal
> 
> ### ** Examples
> 
> #df <- chkParameter(df,parameterFilt=c("tn", "tp"))
> 
> 
> 
> cleanEx()
> nameEx("dot-findFile")
> ### * dot-findFile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .findFile
> ### Title: Find Recent File Information
> ### Aliases: .findFile
> ### Keywords: internal
> 
> ### ** Examples
> 
> # name of most recently modified file
> ## Not run: 
> ##D .findFile()         # current directory
> ##D .findFile("..")     # one directory up
> ##D #
> ##D # list of files and common attributes one directory up
> ##D .findFile(folder="..", file="*.*", n=2, fileNameOnly=FALSE)      #two most recent files
> ##D .findFile(folder="..", file="*.*", n="all", fileNameOnly=FALSE)  #all files
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("dot-layerAggregation")
> ### * dot-layerAggregation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .layerAggregation
> ### Title: Aggregate data layers
> ### Aliases: .layerAggregation
> ### Keywords: internal
> 
> ### ** Examples
> 
> # retrieve all corrected chlorophyll-a concentrations for Station CB2.2.
> # A warning is displayed indicating that data set has layers but user did
> # not specify layer in retrieval. layerAggregation then aggregates across
> # all layers.
> #df  <- dataMB
> #df1 <- selectData(df, "chla", "CB2.2")
> #df2 <- layerAggregation(df1[[1]], avgTechnique="median", layerAggOption=4)
> #str(df2)
> 
> 
> 
> cleanEx()
> nameEx("dot-reAttDF")
> ### * dot-reAttDF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .reAttDF
> ### Title: Re-attribute df based on previous df
> ### Aliases: .reAttDF
> ### Keywords: internal
> 
> ### ** Examples
> 
> # create data frame
> df0 <- data.frame (sta=c("A","A"), lay=c("B","C"), x1 =c(NA,2), x2 =c( 4,14))
> 
> #add simple attribute
> attr(df0, "Attribute1") <- "Test attribute1"
> 
> #run aggregate -- loose attributes
> df1 <- aggregate(x2 ~ sta, data=df0, mean, na.action=na.pass, na.rm=TRUE)
> df2 <- .reAttDF(df1, df0)
> 
> 
> 
> cleanEx()
> nameEx("eventProcessing")
> ### * eventProcessing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: eventNum
> ### Title: Event Processing
> ### Aliases: eventNum eventLen eventSeq
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> 
> ## Notice the difference caused by setting reset to TRUE
> eventNum(c(TRUE,TRUE,FALSE,FALSE,TRUE,FALSE))
[1] 1 1 1 1 2 2
> eventNum(c(TRUE,TRUE,FALSE,FALSE,TRUE,FALSE), reset=TRUE)
[1] 1 1 0 0 2 0
> 
> ## Notice the difference caused by setting reset to TRUE
> eventSeq(eventNum(c(TRUE,TRUE,FALSE,FALSE,TRUE,FALSE)))
[1] 1 2 3 4 1 2
> eventSeq(eventNum(c(TRUE,TRUE,FALSE,FALSE,TRUE,FALSE), reset=TRUE))
[1] 1 2 0 0 1 0
> 
> ## Notice the difference caused by setting reset to TRUE
> eventLen(eventNum(c(TRUE,TRUE,FALSE,FALSE,TRUE,FALSE), reset=TRUE))
[1] 2 2 0 0 1 0
> ## This is an example of the summary option
> eventLen(eventNum(c(TRUE,TRUE,FALSE,FALSE,TRUE,FALSE), reset=TRUE), summary=TRUE)
1 2 
2 1 
> 
> 
> 
> cleanEx()
> nameEx("fillMissing")
> ### * fillMissing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fillMissing
> ### Title: Fill Missing Values
> ### Aliases: fillMissing
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #library(smwrData)
> ##D data(Q05078470)
> ##D # Create missing values in flow, the first sequence is a peak and the second is a recession
> ##D Q05078470$FlowMiss <- Q05078470$FLOW
> ##D Q05078470$FlowMiss[c(109:111, 198:201)] <- NA
> ##D # Interpolate the missing values
> ##D Q05078470$FlowFill <- fillMissing(Q05078470$FlowMiss)
> ##D # How did we do (line is actual, points are filled values)?
> ##D par(mfrow=c(2,1), mar=c(5.1, 4.1, 1.1, 1.1))
> ##D with(Q05078470[100:120, ], plot(DATES, FLOW, type="l"))
> ##D with(Q05078470[109:111, ], points(DATES, FlowFill))
> ##D with(Q05078470[190:210, ], plot(DATES, FLOW, type="l"))
> ##D with(Q05078470[198:201, ], points(DATES, FlowFill))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("filterWgts")
> ### * filterWgts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filterWgts
> ### Title: Create filter weights
> ### Aliases: filterWgts
> ### Keywords: internal
> 
> ### ** Examples
> 
> wgts<- filterWgts(0,"uniform")
> wgts<- filterWgts(7,"uniform")
> wgts<- filterWgts(7,"centered")
> wgts<- filterWgts(7,"weighted")
> x <- 1:100
> filter(x, filterWgts(7,"weighted"), sides=1)
Time Series:
Start = 1 
End = 100 
Frequency = 1 
  [1] NA NA NA NA NA NA  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 [26] 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48
 [51] 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73
 [76] 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98
> 
> 
> 
> cleanEx()
> nameEx("format")
> ### * format
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: format.lcens
> ### Title: Encode in a Common Format
> ### Aliases: format.lcens format.mcens format.qw
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> 
> format(as.lcens(1:3, 1))
[1] " 1" " 2" " 3"
> format(as.mcens(1:3, 1:3))
[1] "1" "2" "3"
> 
> 
> 
> 
> cleanEx()
> nameEx("gamDiff")
> ### * gamDiff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gamDiff
> ### Title: Compute an estimate of difference based on GAM results
> ### Aliases: gamDiff
> 
> ### ** Examples
> 
> # run analysisOrganizeData function to create the list analySpec
> dfr <- analysisOrganizeData (dataCensored, report=NA)
> df        <- dfr[["df"]]
> analySpec <- dfr[["analySpec"]]
> 
> # set GAM models to just one model
> analySpec$gamModels <- list(
+   list(option=2, name= "Non-linear trend with Seasonality (plus Interactions)",
+        model= "~ cyear + s(cyear) + s(doy,bs='cc')+ ti(cyear,doy,bs=c('tp','cc'))", deriv=FALSE))
> 
> # run GAM for a single water quality variable, station and layer
> gamResult <- gamTest(df, 'tn', 'CB5.4', 'S', analySpec=analySpec)

#### Total Nitrogen - Non-linear trend with Seasonality (plus Interactions)


 

*Table: GAM Analysis of Variance.*

 



|Type             |        Source|  edf|  F-stat| p-value|
|:----------------|-------------:|----:|-------:|-------:|
|parametric terms |         cyear| 1.00|  0.4344|  0.5102|
|smoothed terms   |      s(cyear)| 7.13|  3.9607|  0.0001|
|"      "         |        s(doy)| 6.41| 19.9524| <0.0001|
|"      "         | ti(cyear,doy)| 5.49|  1.3710|  0.0021|


 

*Table: GAM Parameter Coefficients.*

 



|Parameter   |  Estimate| Std. Err.|  t value| p-value|
|:-----------|---------:|---------:|--------:|-------:|
|(Intercept) | -0.648238|  0.019521| -33.2073| <0.0001|
|cyear       | -0.013368|  0.020281|  -0.6591|  0.5102|


 

*Table: GAM Diagnostics.*

 



|     AIC|   RMSE| Adj. R-squared|
|-------:|------:|--------------:|
| -135.64| 0.2021|         0.4364|


 

*Table: Estimates of Change from 1985-2016.*

 



|Calculation                                  |      Estimate      |
|:--------------------------------------------|:------------------:|
|Baseline log mean (geometric mean)           |  -0.5592 (0.5717)  |
|Current log mean (geometric mean)            |  -0.9008 (0.4062)  |
|Estimated log difference                     |      -0.3416       |
|Std. Err. log difference                     |       0.058        |
|95% Confidence interval for log difference   | (-0.4552 , -0.228) |
|Difference p-value                           |      <0.0001       |
|Period of Record Percent Change Estimate (%) |      -28.94%       |
> 
> # use gamDiff to replicate estimates of change calculated in the above
> gamDiff(gamRslt=gamResult[["gamOutput2"]]$gamRslt,
+         iSpec=gamResult$iSpec, analySpec=analySpec,
+         base.yr.set = NA, test.yr.set = NA,
+         doy.set = NA, alpha = 0.05)
$gamDiff.regular
$gamDiff.regular$base.yr
[1] 1985 1986

$gamDiff.regular$test.yr
[1] 2015 2016

$gamDiff.regular$doys
 [1]  15  46  75 106 136 167 197 228 259 289 320 350

$gamDiff.regular$per.mn
[1] -0.5592253 -0.9008470

$gamDiff.regular$per.mn.obs
[1] 0.5716518 0.4062254

$gamDiff.regular$pct.chg
[1] -28.93831

$gamDiff.regular$diff.est
           [,1]
[1,] -0.3416218

$gamDiff.regular$diff.est.obs
[1] -0.1654263

$gamDiff.regular$diff.se
           [,1]
[1,] 0.05797399

$gamDiff.regular$diff.ci
[1] -0.4552487 -0.2279948

$gamDiff.regular$diff.t
          [,1]
[1,] -5.892673

$gamDiff.regular$diff.pval
                  [,1]
[1,] 0.000000007587802

$gamDiff.regular$alpha
[1] 0.05


$gamDiff.adjusted
$gamDiff.adjusted$base.yr
[1] 1985 1986

$gamDiff.adjusted$test.yr
[1] 2015 2016

$gamDiff.adjusted$doys
 [1]  15  46  75 106 136 167 197 228 259 289 320 350

$gamDiff.adjusted$per.mn
[1] -0.5592253 -0.9008470

$gamDiff.adjusted$per.mn.obs
[1] 0.5716518 0.4062254

$gamDiff.adjusted$pct.chg
[1] -28.93831

$gamDiff.adjusted$diff.est
           [,1]
[1,] -0.3416218

$gamDiff.adjusted$diff.est.obs
[1] -0.1654263

$gamDiff.adjusted$diff.se
           [,1]
[1,] 0.05797399

$gamDiff.adjusted$diff.ci
[1] -0.4552487 -0.2279948

$gamDiff.adjusted$diff.t
          [,1]
[1,] -5.892673

$gamDiff.adjusted$diff.pval
                  [,1]
[1,] 0.000000007587802

$gamDiff.adjusted$alpha
[1] 0.05


> 
> # use gamDiff to calculate changes from 2005/06 to 2013/14
> gamDiff(gamRslt=gamResult[["gamOutput2"]]$gamRslt,
+         iSpec=gamResult$iSpec, analySpec=analySpec,
+         base.yr.set = c(2004:2005), test.yr.set = c(2013:2014),
+         doy.set = NA, alpha = 0.05)
$gamDiff.regular
$gamDiff.regular$base.yr
[1] 2004 2005

$gamDiff.regular$test.yr
[1] 2013 2014

$gamDiff.regular$doys
 [1]  15  46  75 106 136 167 197 228 259 289 320 350

$gamDiff.regular$per.mn
[1] -0.6318804 -0.7723996

$gamDiff.regular$per.mn.obs
[1] 0.5315913 0.4619034

$gamDiff.regular$pct.chg
[1] -13.1093

$gamDiff.regular$diff.est
           [,1]
[1,] -0.1405192

$gamDiff.regular$diff.est.obs
[1] -0.06968791

$gamDiff.regular$diff.se
          [,1]
[1,] 0.0380542

$gamDiff.regular$diff.ci
[1] -0.21510407 -0.06593436

$gamDiff.regular$diff.t
          [,1]
[1,] -3.692607

$gamDiff.regular$diff.pval
             [,1]
[1,] 0.0002500019

$gamDiff.regular$alpha
[1] 0.05


$gamDiff.adjusted
$gamDiff.adjusted$base.yr
[1] 2004 2005

$gamDiff.adjusted$test.yr
[1] 2013 2014

$gamDiff.adjusted$doys
 [1]  15  46  75 106 136 167 197 228 259 289 320 350

$gamDiff.adjusted$per.mn
[1] -0.6318804 -0.7723996

$gamDiff.adjusted$per.mn.obs
[1] 0.5315913 0.4619034

$gamDiff.adjusted$pct.chg
[1] -13.1093

$gamDiff.adjusted$diff.est
           [,1]
[1,] -0.1405192

$gamDiff.adjusted$diff.est.obs
[1] -0.06968791

$gamDiff.adjusted$diff.se
          [,1]
[1,] 0.0380542

$gamDiff.adjusted$diff.ci
[1] -0.21510407 -0.06593436

$gamDiff.adjusted$diff.t
          [,1]
[1,] -3.692607

$gamDiff.adjusted$diff.pval
             [,1]
[1,] 0.0002500019

$gamDiff.adjusted$alpha
[1] 0.05


> 
> 
> 
> 
> cleanEx()
> nameEx("gamPlotDispSeason")
> ### * gamPlotDispSeason
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gamPlotDispSeason
> ### Title: Plot censored gam fits vs. time
> ### Aliases: gamPlotDispSeason
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify parameter and station to analyze
> ##D dep        <- 'do'
> ##D stat       <- 'CB5.4'
> ##D layer      <- 'B'
> ##D 
> ##D # Prepare data and set up specifications for analysis
> ##D dfr <- analysisOrganizeData (dataCensored)
> ##D df        <- dfr[[1]]
> ##D analySpec <- dfr[[2]]
> ##D 
> ##D # Apply gamTest 
> ##D gamResult <- gamTest(df, dep, stat, layer, analySpec=analySpec)
> ##D gamPlotDisp(gamResult = gamResult, analySpec = analySpec,
> ##D             fullModel = 2, seasAvgModel = 2, seasonalModel = 2,
> ##D             diffType = "regular", obserPlot = TRUE, interventionPlot = TRUE,
> ##D             seasAvgPlot = TRUE, seasAvgConfIntPlot = FALSE,
> ##D             seasAvgSigPlot = FALSE, fullModelPlot = TRUE, seasModelPlot = TRUE,
> ##D             BaseCurrentMeanPlot = FALSE, adjustedPlot = FALSE)
> ##D 
> ##D # Apply gamTestSeason
> ##D gamResult2 <- gamTestSeason(df, dep, stat, layer, analySpec=analySpec,
> ##D                             gamSeasonPlot = c("7/15-8/15", "purple", "range"))
> ##D gamPlotDispSeason(gamResult = gamResult2, analySpec = analySpec,
> ##D                   fullModel = 2, seasAvgModel = 2, seasonalModel = 2,
> ##D                   diffType = "regular", obserPlot = TRUE, interventionPlot = TRUE,
> ##D                   seasAvgPlot = TRUE, seasAvgConfIntPlot = FALSE,
> ##D                   seasAvgSigPlot = FALSE, fullModelPlot = FALSE, seasModelPlot = FALSE,
> ##D                   BaseCurrentMeanPlot = TRUE, adjustedPlot = FALSE, gamSeasonFocus = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("gamTest")
> ### * gamTest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gamTest
> ### Title: Perform GAM analysis
> ### Aliases: gamTest
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify parameter and station to analyze
> ##D dep        <- 'do'
> ##D stat       <- 'CB5.4'
> ##D layer      <- 'B'
> ##D 
> ##D # Prepare data and set up specifications for analysis
> ##D dfr <- analysisOrganizeData (dataCensored)
> ##D df        <- dfr[[1]]
> ##D analySpec <- dfr[[2]]
> ##D 
> ##D # Apply gamTest 
> ##D gamResult <- gamTest(df, dep, stat, layer, analySpec=analySpec)
> ##D gamPlotDisp(gamResult = gamResult, analySpec = analySpec,
> ##D             fullModel = 2, seasAvgModel = 2, seasonalModel = 2,
> ##D             diffType = "regular", obserPlot = TRUE, interventionPlot = TRUE,
> ##D             seasAvgPlot = TRUE, seasAvgConfIntPlot = FALSE,
> ##D             seasAvgSigPlot = FALSE, fullModelPlot = TRUE, seasModelPlot = TRUE,
> ##D             BaseCurrentMeanPlot = FALSE, adjustedPlot = FALSE)
> ##D 
> ##D # Apply gamTestSeason
> ##D gamResult2 <- gamTestSeason(df, dep, stat, layer, analySpec=analySpec,
> ##D                             gamSeasonPlot = c("7/15-8/15", "purple", "range"))
> ##D gamPlotDispSeason(gamResult = gamResult2, analySpec = analySpec,
> ##D                   fullModel = 2, seasAvgModel = 2, seasonalModel = 2,
> ##D                   diffType = "regular", obserPlot = TRUE, interventionPlot = TRUE,
> ##D                   seasAvgPlot = TRUE, seasAvgConfIntPlot = FALSE,
> ##D                   seasAvgSigPlot = FALSE, fullModelPlot = FALSE, seasModelPlot = FALSE,
> ##D                   BaseCurrentMeanPlot = TRUE, adjustedPlot = FALSE, gamSeasonFocus = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("gamTestSeason")
> ### * gamTestSeason
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gamTestSeason
> ### Title: Perform GAM analysis for Specified Season
> ### Aliases: gamTestSeason
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify parameter and station to analyze
> ##D dep        <- 'do'
> ##D stat       <- 'CB5.4'
> ##D layer      <- 'B'
> ##D 
> ##D # Prepare data and set up specifications for analysis
> ##D dfr <- analysisOrganizeData (dataCensored)
> ##D df        <- dfr[[1]]
> ##D analySpec <- dfr[[2]]
> ##D 
> ##D # Apply gamTest 
> ##D gamResult <- gamTest(df, dep, stat, layer, analySpec=analySpec)
> ##D gamPlotDisp(gamResult = gamResult, analySpec = analySpec,
> ##D             fullModel = 2, seasAvgModel = 2, seasonalModel = 2,
> ##D             diffType = "regular", obserPlot = TRUE, interventionPlot = TRUE,
> ##D             seasAvgPlot = TRUE, seasAvgConfIntPlot = FALSE,
> ##D             seasAvgSigPlot = FALSE, fullModelPlot = TRUE, seasModelPlot = TRUE,
> ##D             BaseCurrentMeanPlot = FALSE, adjustedPlot = FALSE)
> ##D 
> ##D # Apply gamTestSeason
> ##D gamResult2 <- gamTestSeason(df, dep, stat, layer, analySpec=analySpec,
> ##D                             gamSeasonPlot = c("7/15-8/15", "purple", "range"))
> ##D gamPlotDispSeason(gamResult = gamResult2, analySpec = analySpec,
> ##D                   fullModel = 2, seasAvgModel = 2, seasonalModel = 2,
> ##D                   diffType = "regular", obserPlot = TRUE, interventionPlot = TRUE,
> ##D                   seasAvgPlot = TRUE, seasAvgConfIntPlot = FALSE,
> ##D                   seasAvgSigPlot = FALSE, fullModelPlot = FALSE, seasModelPlot = FALSE,
> ##D                   BaseCurrentMeanPlot = TRUE, adjustedPlot = FALSE, gamSeasonFocus = TRUE)
> ## End(Not run)     
> 
> 
> 
> cleanEx()
> nameEx("getUSGSflow")
> ### * getUSGSflow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getUSGSflow
> ### Title: Retrieve USGS daily flow data in a wide format
> ### Aliases: getUSGSflow
> ### Keywords: internal
> 
> ### ** Examples
> 
> # set retrieval parameters
> yearStart   <- 2014
> yearEnd     <- 2014
> siteNumber <- c('01578310')
> 
> # regular retrieval (default usage)
> df <- getUSGSflow(siteNumber, yearStart, yearEnd)
> 
> 
> 
> 
> cleanEx()
> nameEx("group2row")
> ### * group2row
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: group2row
> ### Title: Restructure Data
> ### Aliases: group2row
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #library(smwrData)
> ##D data(QWstacked)
> ##D group2row(QWstacked, c("site_no", "sample_dt", "sample_tm"), "parm_cd", 
> ##D  c("result_va", "remark_cd"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("importNWISqw")
> ### * importNWISqw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: importNWISqw
> ### Title: Water-Quality Data
> ### Aliases: importNWISqw
> ### Keywords: IO datasets internal
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D importNWISqw("05330000", "00608") # Ammonia samples from the Minnesota River at Jordan.
> ##D Empty <- importNWISqw('05330000',c('00400','00403'),begin.date='2008-01-01')
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("importQW")
> ### * importQW
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: importQW
> ### Title: Water-Quality Data
> ### Aliases: importQW
> ### Keywords: IO datasets internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Convert the stacked qw data supplied in smwrData
> ##D #library(smwrData)
> ##D data(QWstacked)
> ##D QWstacked$result_va <- as.numeric(QWstacked$result_va) # raw data are character
> ##D # The units are both mg/l, no analyte name, generate column names from parameter codes
> ##D head(importQW(QWstacked, c("site_no", "sample_dt", "sample_tm", "medium_cd"),
> ##D  "result_va", "remark_cd", "val_qual_tx", "rpt_lev_va", "rpt_lev_cd", 
> ##D  "mg/l", "meth_cd", "", "parm_cd", "parm_cd"))
> ##D # A simple example having the minimum information
> ##D data(QW05078470)
> ##D importQW(QW05078470, c("DATES", "TIMES"), "P00665", "R00665", "", 0.005, "User", 
> ##D "mg/l", "Unk", "Dissolved Phosporus", "00665", "DissP")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("importRDB")
> ### * importRDB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: importRDB
> ### Title: Import Files
> ### Aliases: importRDB
> ### Keywords: IO internal manip
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## This dataset is available in smwrData as a text file
> ##D #TestDir <- system.file("misc", package="smwrData")
> ##D #TestFull <- importRDB(file.path(TestDir, "TestFull.rdb"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("impute")
> ### * impute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: impute
> ### Title: Impute Censored Values
> ### Aliases: impute
> 
> ### ** Examples
> 
> x  <- dataCensored[1:20,"tdp"]
> x.lower <- impute(x,'lower')
> x.mid   <- impute(x,'mid')
> x.upper <- impute(x,'upper')
> x.norm  <- impute(x,'norm')
> x.lnorm <- impute(x,'lnorm')
> 
> 
> 
> cleanEx()
> nameEx("is.na")
> ### * is.na
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.na.lcens
> ### Title: Missing Values
> ### Aliases: is.na.lcens is.na.mcens is.na.qw
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> 
> is.na(as.lcens(c(1,3, NA), 2))
[1] FALSE FALSE  TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("isLike")
> ### * isLike
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isLike
> ### Title: Test whether an object can be treated in a particular way
> ### Aliases: isLike isCharLike isDateLike isGroupLike isNumberLike
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> # The first should be FALSE and the second TRUE
> isCharLike(as.Date("2004-12-31"))
[1] FALSE
> isCharLike("32")
[1] TRUE
> # The first should be FALSE and the second TRUE
> isDateLike(32)
[1] FALSE
> isDateLike(as.Date("2004-12-31"))
[1] TRUE
> # The first should be FALSE and the second TRUE
> isGroupLike(as.Date("2004-12-31"))
[1] FALSE
> isGroupLike(32)
[1] FALSE
> # The first should be FALSE and the second TRUE
> isNumberLike(as.Date("2004-12-31"))
[1] FALSE
> isNumberLike(32)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("lcens-class")
> ### * lcens-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcens-class
> ### Title: Left-censored Data
> ### Aliases: lcens-class
> ### Keywords: classes internal
> 
> ### ** Examples
> 
> 
> showClass("lcens")
Class "lcens" [package "baytrends"]

Slots:
                                             
Name:         .Data censor.codes        names
Class:       matrix      logical    character

Extends: 
Class "matrix", from data part
Class "array", by class "matrix", distance 2
Class "mMatrix", by class "matrix", distance 2
Class "structure", by class "matrix", distance 3
Class "vector", by class "matrix", distance 4, with explicit coerce
> 
> 
> 
> 
> cleanEx()
> nameEx("length")
> ### * length
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: length.lcens
> ### Title: Length of an Object
> ### Aliases: length.lcens length.mcens length.qw
> ### Keywords: attribute internal
> 
> ### ** Examples
> 
> 
> length(as.lcens(c(1,3, NA), 2))
[1] 3
> 
> 
> 
> 
> cleanEx()
> nameEx("loadModels")
> ### * loadModels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loadModels
> ### Title: Load Built-in GAM formulas
> ### Aliases: loadModels
> 
> ### ** Examples
> 
> # run analysisOrganizeData function to create the list analySpec
> dfr <- analysisOrganizeData (dataCensored, report=NA)
> df        <- dfr[["df"]]
> analySpec <- dfr[["analySpec"]]
> 
> # current models in analySpec
> analySpec$gamModels
[[1]]
[[1]]$option
[1] 0

[[1]]$name
[1] "Linear Trend with Seasonality"

[[1]]$model
[1] "~ cyear+ s(doy,bs='cc')"

[[1]]$deriv
[1] TRUE

[[1]]$gamK1
[1] NA NA

[[1]]$gamK2
[1] NA NA


[[2]]
[[2]]$option
[1] 1

[[2]]$name
[1] "Non-linear Trend with Seasonality"

[[2]]$model
[1] "~ cyear + s(cyear, k=gamK1) + s(doy,bs='cc')"

[[2]]$deriv
[1] TRUE

[[2]]$gamK1
[1] 10.0000000  0.6666667

[[2]]$gamK2
[1] NA NA


[[3]]
[[3]]$option
[1] 2

[[3]]$name
[1] "Non-linear trend with Seas+Int"

[[3]]$model
[1] "~ cyear + s(cyear, k=gamK1) + s(doy,bs='cc') + ti(cyear,doy,bs=c('tp','cc'))"

[[3]]$deriv
[1] TRUE

[[3]]$gamK1
[1] 10.0000000  0.6666667

[[3]]$gamK2
[1] NA NA


[[4]]
[[4]]$option
[1] 3

[[4]]$name
[1] "Non-linear trend with Seas+Int. & Intervention"

[[4]]$model
[1] "~ intervention + cyear + s(cyear, k=gamK1) + s(doy,bs='cc') + ti(cyear,doy,bs=c('tp','cc'))"

[[4]]$deriv
[1] TRUE

[[4]]$gamK1
[1] 10.0000000  0.6666667

[[4]]$gamK2
[1] NA NA


[[5]]
[[5]]$option
[1] 4

[[5]]$name
[1] "Non-linear trend with Seas+Int. & Hydro Adj"

[[5]]$model
[1] "~ cyear + s(cyear, k=gamK1) + s(doy,bs='cc') + ti(cyear,doy,bs=c('tp','cc')) + s(flw_sal,k=gamK2) + ti(flw_sal,doy,bs=c('tp','cc')) + ti(flw_sal, cyear,bs=c('tp' ,'tp')) + ti(flw_sal,doy,cyear, bs=c('tp','cc','tp'))"

[[5]]$deriv
[1] TRUE

[[5]]$gamK1
[1] 10.0000000  0.3333333

[[5]]$gamK2
[1] 10.0000000  0.6666667


> 
> # set models in analySpec to gam0, gam1, and gam2 only
> analySpec$gamModels <- loadModels(c('gam0','gam1','gam2'))
> 
> 
> 
> 
> cleanEx()
> nameEx("mcens-class")
> ### * mcens-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcens-class
> ### Title: Mutliply-censored Data
> ### Aliases: mcens-class
> ### Keywords: classes internal
> 
> ### ** Examples
> 
> 
> showClass("mcens")
Class "mcens" [package "baytrends"]

Slots:
                                                          
Name:         .Data censor.codes     interval        names
Class:       matrix      integer      logical    character

Extends: 
Class "matrix", from data part
Class "array", by class "matrix", distance 2
Class "mMatrix", by class "matrix", distance 2
Class "structure", by class "matrix", distance 3
Class "vector", by class "matrix", distance 4, with explicit coerce
> 
> 
> 
> 
> cleanEx()
> nameEx("medianStats")
> ### * medianStats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: median.lcens
> ### Title: Median Value
> ### Aliases: median.lcens median.mcens median.qw
> ### Keywords: censored internal univariate
> 
> ### ** Examples
> 
> median(as.lcens(1:4, 2))
[1] 2.5
> 
> 
> 
> 
> cleanEx()
> nameEx("month.USGS")
> ### * month.USGS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: month.USGS
> ### Title: Month Abbreviations
> ### Aliases: month.USGS
> ### Keywords: internal
> 
> ### ** Examples
> 
> print(month.USGS)
  January  February     March     April       May      June      July    August 
   "Jan."    "Feb."    "Mar."    "Apr."     "May"    "June"    "July"    "Aug." 
September   October  November  December 
  "Sept."    "Oct."    "Nov."    "Dec." 
> ## Not run: 
> ##D # For examples of month.USGS in graphs see
> ##D #vignette(topic="LineScatter", package="smwrGraphs")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("na2miss")
> ### * na2miss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: na2miss
> ### Title: Recode Data
> ### Aliases: na2miss miss2na
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> 
> ## Construct simple substitutions
> na2miss(c(1, 2, 3, NA, 5, 6))
[1]      1      2      3 -99999      5      6
> 
> 
> 
> cleanEx()
> nameEx("pcodeColData")
> ### * pcodeColData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pcodeColData
> ### Title: Selected USGS parameter Codes
> ### Aliases: pcodeColData
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(pcodeColData)
> # just print some rows
> head(pcodeColData)
    parm_cd            col_name data_type
314   00001 LocationXSect_00001   numeric
315   00002 LocationXSect_00002   numeric
621   00003      SampleDepth_ft   numeric
804   00004         StreamWidth   numeric
316   00005 LocationXSect_00005   numeric
503   00008        SampleAcctNo   numeric
> tail(pcodeColData)
    parm_cd              col_name data_type
720   99987   SolarRadiationTotal   numeric
414   99988 Par(fdoahsdmimoppsmps   numeric
416   99989             PAR_99989   numeric
569   99993 SampleVolumeSchedOCSS   numeric
610   99996     SampleWtSchedOCSS   numeric
415   99997             PAR_99997   numeric
> 
> 
> 
> cleanEx()
> nameEx("pcodeNWISqw")
> ### * pcodeNWISqw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pcodeNWISqw
> ### Title: Parameter Code Information
> ### Aliases: pcodeNWISqw
> ### Keywords: IO datasets internal
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D pcodeNWISqw("00925")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("quantile")
> ### * quantile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quantile.lcens
> ### Title: Sample Quantiles
> ### Aliases: quantile.lcens quantile.mcens quantile.qw
> ### Keywords: internal univar
> 
> ### ** Examples
> 
> 
> set.seed(28)
> Xu <- rnorm(23)
> quantile(as.lcens(Xu, 0)) 
      0%*      25%*      50%*       75%      100% 
0.0000000 0.0000000 0.0000000 0.3840304 1.8414814 
> 
> 
> 
> 
> cleanEx()
> nameEx("qw-class")
> ### * qw-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qw-class
> ### Title: Water-quality Data
> ### Aliases: qw-class
> ### Keywords: classes internal
> 
> ### ** Examples
> 
> 
> showClass("qw")
Class "qw" [package "baytrends"]

Slots:
                                                                          
Name:             .Data     remark.codes      value.codes  reporting.level
Class:           matrix        character        character          numeric
                                                                          
Name:  reporting.method  reporting.units   analyte.method     analyte.name
Class:        character        character        character        character
                                                         
Name:          rounding      unique.code            names
Class:          numeric        character        character

Extends: 
Class "matrix", from data part
Class "array", by class "matrix", distance 2
Class "mMatrix", by class "matrix", distance 2
Class "structure", by class "matrix", distance 3
Class "vector", by class "matrix", distance 4, with explicit coerce
> 
> 
> 
> 
> cleanEx()
> nameEx("qw.export")
> ### * qw.export
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qw.export
> ### Title: qw.export
> ### Aliases: qw.export
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # define data frame with qw column classes
> ##D myDF <- dataCensored
> ##D 
> ##D # directory to save output
> ##D dir.save <- getwd()
> ##D 
> ##D # prefix for file names ()
> ##D fn.out <- "data_censored_test.csv" 
> ##D 
> ##D # run function
> ##D qw.export(myDF, dir.save, fn.out)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("qw.import")
> ### * qw.import
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qw.import
> ### Title: qw.import
> ### Aliases: qw.import
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Use internal function to export dataCensored as example for import
> ##D qw.export(dataCensored, getwd(), "data_censored_test.csv")
> ##D 
> ##D 
> ##D # Import Test file as a qw object
> ##D 
> ##D # Define function parameters
> ##D fn.import <- file.path(".", "data_censored_test.csv")
> ##D qw.names <- c("secchi", "chla", "do", "tn", "tp", "po4", "tdp"
> ##D               , "no23", "nh4", "tdn", "tss")
> ##D rounding <- c(3, 4)
> ##D 
> ##D # Import
> ##D dataCensored.test<- qw.import(fn.import, qw.names, rounding)
> ##D 
> ##D # Check for qw class
> ##D str(dataCensored.test)
> ##D 
> ##D # Save
> ##D save(dataCensored.test, file="data_censored_test.rda")
> ##D 
> ##D 
> ##D # Show slot names for a qw object.
> ##D slotNames("qw")
> ##D 
> ##D ####
> ##D # convert date field to POSIXct
> ##D #dataCensored.test[,"date"] <- as.POSIXct(dataCensored.test[,"date"])
> ##D # str(dataCensored.test)
> ##D # as.numeric() and as.integer() can be used to convert columns of those types.
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("readNWQLdl")
> ### * readNWQLdl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readNWQLdl
> ### Title: Historical Reporting Limits
> ### Aliases: readNWQLdl
> ### Keywords: IO internal
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # This function works only within the internal USGS network.
> ##D #readNWQLdl("00608")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("refLine")
> ### * refLine
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: refLine
> ### Title: Reference Line
> ### Aliases: refLine
> ### Keywords: aplot internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D set.seed(1)
> ##D X <- rnorm(32)
> ##D Y <- X + rnorm(32)
> ##D setGD()
> ##D xyPlot(X, Y)
> ##D # Add the 1:1 line
> ##D refLine(coefficient=c(0,1))
> ##D # For more details of refLine see
> ##D #vignette(topic="GraphAdditions", package="smwrGraphs")
> ##D #demo(topic="Coplot-complexScatterPlot", package="smwrGraphs")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rmse")
> ### * rmse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmse
> ### Title: Root-Mean-Squared and Relative Differences
> ### Aliases: rmse rmse.default rmse.lm rpd
> ### Keywords: internal univar
> 
> ### ** Examples
> 
> 
> # Example 15.2 from Harvey.
> dupX1 <- c(160, 196, 207, 185, 172, 133)
> dupX2 <- c(147, 202, 196, 193, 188, 119)
> rmse(dupX1, dupX2)
[1] 8.376555
> rpd(dupX1, dupX2)
[1]  8.469055  3.015075  5.459057  4.232804  8.888889 11.111111
> 
> 
> 
> 
> cleanEx()
> nameEx("saveDF")
> ### * saveDF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: saveDF
> ### Title: Save R object to disk
> ### Aliases: saveDF
> 
> ### ** Examples
> 
> ## Not run: 
> ##D df <- data.frame(x=c(1:100))
> ##D saveDF(df, 'test_note')
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("seasAdjflow")
> ### * seasAdjflow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: seasAdjflow
> ### Title: Create Daily Seasonally-adjusted Log Flow Residuals
> ### Aliases: seasAdjflow
> ### Keywords: internal
> 
> ### ** Examples
> 
> #Set Retrieval Parameters
> yearStart   <- 1983
> yearEnd     <- 2015
> siteNumbers <- c("01578310")
> 
> # Regular Retrieval (default usage)
> df <- getUSGSflow(siteNumbers, yearStart, yearEnd, fill=TRUE)
> # Apply default smoothing
> df <- seasAdjflow(df,"01578310")


 

*Figure 0. Daily Flow [cms] as a Function of Day of Year. (Solid red line is the predicted GAM model using the model: gam(LogQ ~ s(doy,bs='cc')).)*

 

> 
> 
> 
> 
> cleanEx()
> nameEx("setColor")
> ### * setColor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setColor
> ### Title: Colors
> ### Aliases: setColor
> ### Keywords: dplot internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # See for examples of setColor:
> ##D #vignette(topic="PiperPlot", package="smwrGraphs")
> ##D #demo(topic="PiperScript", package="smwrGraphs")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setPage")
> ### * setPage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setGD
> ### Title: Graphics Page
> ### Aliases: setGD setPage setPDF setSweave setKnitr setPNG setRStudio
> ### Keywords: dplot internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # See for examples of setGD:
> ##D #demo(topic="AnnualFlowBarChart", package="smwrGraphs")
> ##D #demo(topic="Coplot-complexScatterPlot", package="smwrGraphs")
> ##D #demo(topic="Coplot-simpleBoxPlot", package="smwrGraphs")
> ##D #demo(topic="DurationHydrograph", package="smwrGraphs")
> ##D #demo(topic="FlowDur-Measurements", package="smwrGraphs")
> ##D #demo(topic="HydroPrecip", package="smwrGraphs")
> ##D # See for examples of setPage:
> ##D #demo(topic="PiperScript", package="smwrGraphs")
> ##D # See for examples of setPDF:
> ##D #demo(topic="MeasurementRating", package="smwrGraphs")
> ##D #demo(topic="PiperScript", package="smwrGraphs")
> ##D #demo(topic="RightAxisExample", package="smwrGraphs")
> ##D #demo(topic="TopAxisExample", package="smwrGraphs")
> ##D # See for examples of setSweave:
> ##D #vignette(topic="BoxPlots", package="smwrGraphs")
> ##D #vignette(topic="DateAxisFormats", package="smwrGraphs")
> ##D #vignette(topic="GraphAdditions", package="smwrGraphs")
> ##D #vignette(topic="GraphGallery", package="smwrGraphs")
> ##D #vignette(topic="GraphSetup", package="smwrGraphs")
> ##D #vignette(topic="LineScatter", package="smwrGraphs")
> ##D #vignette(topic="PiperPlot", package="smwrGraphs")
> ##D #vignette(topic="ProbabilityPlots", package="smwrGraphs")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("smwr.colors")
> ### * smwr.colors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: smwr.colors
> ### Title: Generate a Range of Colors
> ### Aliases: smwr.colors greenRed.colors blueRed.colors redBlue.colors
> ###   coolWarm.colors warmCool.colors redGreen.colors pastel.colors
> ### Keywords: color internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D redGreen.colors(2)
> ##D blueRed.colors(2)
> ##D # For examples of warmCool.colors in graphs see
> ##D #demo(topic="DurationHydrograph", package="smwrGraphs")
> ##D # All have similar usage
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("sort.censored")
> ### * sort.censored
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sort.lcens
> ### Title: Sorting Vectors
> ### Aliases: sort.lcens sort.mcens
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> set.seed(5422)
> XR <- rnorm(10)
> sort(as.lcens(XR, rep(c(0, -1), each=5))) # censors at 0 and -1
     Values   Limits
[1]  <-1      -1    
[2]   -0.6943 -1    
[3]   -0.2537 -1    
[4]  <0       0     
[5]  <0       0     
[6]  <0       0     
[7]  <0       0     
[8]   0.034   -1    
[9]   0.1889  -1    
[10]  1.657   0     
> 
> 
> 
> 
> cleanEx()
> nameEx("splitQual")
> ### * splitQual
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: splitQual
> ### Title: Split Leading Qualifiers
> ### Aliases: splitQual
> ### Keywords: internal
> 
> ### ** Examples
> 
> splitQual(c("<1", "1", "<1", "1", "2"), name="Dummy")
  Dummy Dummy.rmk
1     1         <
2     1          
3     1         <
4     1          
5     2          
> 
> 
> 
> 
> cleanEx()
> nameEx("str")
> ### * str
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: str.lcens
> ### Title: Display Structure
> ### Aliases: str.lcens str.mcens str.qw
> ### Keywords: internal
> 
> ### ** Examples
> 
> 
> str(as.lcens(c(1,3), 2))
 lcens[1:2], left censoring: "<2" " 3"
> 
> 
> 
> 
> cleanEx()
> nameEx("strip.blanks")
> ### * strip.blanks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: strip.blanks
> ### Title: Remove Spaces
> ### Aliases: strip.blanks
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> 
> strip.blanks("   keep me   ")
[1] "keep me"
> 
> 
> 
> 
> cleanEx()
> nameEx("subset")
> ### * subset
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: [.lcens
> ### Title: Subset an Object
> ### Aliases: [.lcens [.mcens [.qw subset.qw
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> Xcens <- as.lcens(c(1, 2, 3, 4), 2)
> # Extract the 3rd value
> Xcens[3]
    Values Limits
[1]  3     2     
> # Change the 3rd value to NA and print the data
> Xcens[3,] <- NA
> Xcens
    Values Limits
[1] <2     2     
[2]  2     2     
[3]  NA    <NA>  
[4]  4     2     
> 
> 
> 
> cleanEx()
> nameEx("summary")
> ### * summary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.lcens
> ### Title: Summarize Data
> ### Aliases: summary.lcens summary.mcens summary.qw
> ### Keywords: internal misc
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # Summrize these data
> ##D summary(importNWISqw("05330000", "00608"))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("timePlot")
> ### * timePlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: timePlot
> ### Title: Time-series Plots
> ### Aliases: timePlot timePlot,Date,numeric-method
> ###   timePlot,POSIXt,numeric-method timePlot,numeric,numeric-method
> ###   timePlot,integer,numeric-method timePlot,difftime,numeric-method
> ### Keywords: hplot internal methods
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # the months function is in lubridate
> ##D X <- as.Date("2001-01-15") + months(0:11)
> ##D set.seed(1)
> ##D Y <- runif(12)
> ##D setGD()
> ##D timePlot(X, Y)
> ##D # For more details of timePlot see
> ##D #vignette(topic="DateAxisFormats", package="smwrGraphs")
> ##D #vignette(topic="LineScatter", package="smwrGraphs")
> ##D #demo(topic="AnnualFlowBarChart", package="smwrGraphs")
> ##D #demo(topic="DurationHydrograph", package="smwrGraphs")
> ##D #demo(topic="HydroPrecip", package="smwrGraphs")
> ##D #demo(topic="RightAxisExample", package="smwrGraphs")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("xyPlot")
> ### * xyPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: xyPlot
> ### Title: Plot Data
> ### Aliases: xyPlot xyPlot,numeric,numeric-method
> ###   xyPlot,factor,numeric-method xyPlot,character,numeric-method
> ### Keywords: hplot internal methods
> 
> ### ** Examples
> 
> ## Not run: 
> ##D set.seed(1)
> ##D X <- rnorm(32)
> ##D Y <- X + rnorm(32)
> ##D setGD()
> ##D AA.pl <- xyPlot(X, Y, Plot=list(color="cyan4"))
> ##D # For more details of xyPlot see
> ##D #vignette(topic="GraphAdditions", package="smwrGraphs")
> ##D #vignette(topic="GraphGallery", package="smwrGraphs")
> ##D #vignette(topic="GraphSetup", package="smwrGraphs")
> ##D #vignette(topic="LineScatter", package="smwrGraphs")
> ##D #demo(topic="Coplot-complexScatterPlot", package="smwrGraphs")
> ##D #demo(topic="TopAxisExample", package="smwrGraphs")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("zcn")
> ### * zcn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: %cn%
> ### Title: Partial Value Matching
> ### Aliases: %cn%
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> 
> ## A simple example
> c("abc", "def") %cn% "c"
  abc   def 
 TRUE FALSE 
> 
> 
> 
> cleanEx()
> nameEx("zeq")
> ### * zeq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: %~=%
> ### Title: Possible Equality
> ### Aliases: %~=%
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> as.mcens(1, 2) %~=% 0.5
[1] FALSE
> as.mcens(1, 2) %~=% 1.5
[1] TRUE
> as.mcens(1, 2) %~=% 2.5
[1] FALSE
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  9.552 0.696 13.741 0.005 0.007 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
