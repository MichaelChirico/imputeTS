
R version 4.0.1 (2020-06-06) -- "See Things Now"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "baytrends"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('baytrends')
Loading required package: lubridate
Warning: package ‘lubridate’ was built under R version 4.0.2

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

Loading:baytrends v2.0.2

Attaching package: ‘baytrends’

The following object is masked from ‘package:stats’:

    nobs

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("analysisOrganizeData")
> ### * analysisOrganizeData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: analysisOrganizeData
> ### Title: Analysis Organization & Data Preparation
> ### Aliases: analysisOrganizeData
> 
> ### ** Examples
> 
> # run analysis relying on default specifications, examine analySpec for
> # default options
> dfr <- analysisOrganizeData(dataCensored)


 


### Record Count


 

`Beginning Number of Records:  13062`

 

`Number of Records After Processing:  13062`

 


### Parameters


 

*Table: List of Parameters.*

 



Dep. Var.  Parameter Name                Units  Log Tran.  GAM Dep. Var.
---------  ----------------------------  -----  ---------  -------------
secchi     Secchi Depth                  m      FALSE      secchi       
chla       Chlorophyll a (Corrected)     ug/L   TRUE       lnchla       
do         Dissolved Oxygen              mg/L   FALSE      do           
tn         Total Nitrogen                mg/L   TRUE       lntn         
tp         Total Phosphorus              mg/L   TRUE       lntp         
po4        Orthophosphorus               mg/L   TRUE       lnpo4        
tdp        Total Dissolved Phosphorus    mg/L   TRUE       lntdp        
no23       Nitrite + Nitrate             mg/L   TRUE       lnno23       
nh4        Ammonium                      mg/L   TRUE       lnnh4        
tdn        Total Dissolved Nitrogen      mg/L   TRUE       lntdn        
din        Dissolved Inorganic Nitrogen  mg/L   TRUE       lndin        
salinity   Salinity                      ppt    FALSE      salinity     
tss        Total Suspended Solids        mg/L   TRUE       lntss        
wtemp      Water Temperature             deg C  FALSE      wtemp        

### Layers


 

*Table: List of Layers.*

 



Layer ID  Layer Name      
--------  ----------------
S         Surface         
AP        Above Pycnocline
BP        Below Pycnocline
B         Bottom          

### Models


 

*Table: List of Models.*

 



Option  Model                                         
------  ----------------------------------------------
     0  Linear Trend with Seasonality                 
     1  Non-linear Trend with Seasonality             
     2  Non-linear trend with Seas+Int                
     3  Non-linear trend with Seas+Int. & Intervention
     4  Non-linear trend with Seas+Int. & Hydro Adj   

## 

### Stations


 

*Table: List of Stations.*

 



Station ID  Latitude  Longitude  CB 92 Seg.  Flow Adj. Gage  Mth. Group
----------  --------  ---------  ----------  --------------  ----------
CB3.3C       38.9960   -76.3597  CB3MH       01578310        MD-Main   
CB4.1C       38.8259   -76.3994  CB4MH       01578310        MD-Main   
CB5.4        37.8001   -76.1747  CB5MH_VA    01578310        VA-All    
TF5.5        37.3126   -77.2328  JMSTF1      02035000        VA-All    
EE2.1        38.6549   -76.2643  CHOMH1      01491000        MD-Trib   
EE3.0        38.2809   -76.0103  FSBMH       01578310        MD-Trib   
TF2.2        38.6907   -77.1111  POTTF_MD    01646500        MD-Potomac
LE2.2        38.1576   -76.5980  POTMH_MD    01646500        MD-Potomac
> df        <- dfr[["df"]]
> analySpec <- dfr[["analySpec"]]
> 
> # analyze bottom dissolved oxygen at 2 stations using only data from 1/1/1995-12/31/2015
> analySpec <-list()
> analySpec$parameterFilt <- c('do')
> analySpec$layerFilt     <- c('B')
> analySpec$stationFilt   <- c('CB3.3C', 'CB5.4')
> analySpec$dateFilt      <- as.POSIXct(c("1995-01-01", "2015-12-31"))
> dfr <- analysisOrganizeData(dataCensored, analySpec)


 


### Record Count


 

`Beginning Number of Records:  13062`

 

`Number of Records After Processing:  608`

 


### Parameters


 

*Table: List of Parameters.*

 



Dep. Var.  Parameter Name    Units  Log Tran.  GAM Dep. Var.
---------  ----------------  -----  ---------  -------------
do         Dissolved Oxygen  mg/L   FALSE      do           

### Layers


 

*Table: List of Layers.*

 



Layer ID  Layer Name
--------  ----------
B         Bottom    

### Models


 

*Table: List of Models.*

 



Option  Model                                         
------  ----------------------------------------------
     0  Linear Trend with Seasonality                 
     1  Non-linear Trend with Seasonality             
     2  Non-linear trend with Seas+Int                
     3  Non-linear trend with Seas+Int. & Intervention
     4  Non-linear trend with Seas+Int. & Hydro Adj   

## 

### Stations


 

*Table: List of Stations.*

 



Station ID  Latitude  Longitude  CB 92 Seg.  Flow Adj. Gage  Mth. Group
----------  --------  ---------  ----------  --------------  ----------
CB3.3C       38.9960   -76.3597  CB3MH       01578310        MD-Main   
CB5.4        37.8001   -76.1747  CB5MH_VA    01578310        VA-All    
> df        <- dfr[["df"]]
> analySpec <- dfr[["analySpec"]]
> 
> 
> 
> 
> cleanEx()
> nameEx("baseDay")
> ### * baseDay
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: baseDay
> ### Title: Base Day
> ### Aliases: baseDay
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> 
> # The default numeric result
> baseDay(c("2000-02-29", "2000-03-01", "2001-03-01"))
[1] 60 61 61
> # The result as a factor
> baseDay(c("2000-02-29", "2000-03-01", "2001-03-01"), numeric=FALSE)
[1] Feb 29 Mär 01 Mär 01
366 Levels: Jan 01 Jan 02 Jan 03 Jan 04 Jan 05 Jan 06 Jan 07 Jan 08 ... Dez 31
> 
> 
> 
> cleanEx()
> nameEx("baseDay2decimal")
> ### * baseDay2decimal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: baseDay2decimal
> ### Title: Base Day
> ### Aliases: baseDay2decimal
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> # The baseDay ordered by calendar year
> bd.tmp <- baseDay(c("2000-02-29", "2000-03-01", "2001-03-01"), 
+   numeric=FALSE)
> baseDay2decimal(bd.tmp)
[1] 0.1612022 0.1639344 0.1639344
> # ordered by water year, result should agree
> bd.tmp <- baseDay(c("2000-02-29", "2000-03-01", "2001-03-01"), 
+   numeric=FALSE, year="water")
> baseDay2decimal(bd.tmp)
[1] 0.1612022 0.1639344 0.1639344
> 
> 
> 
> cleanEx()
> nameEx("closeOut")
> ### * closeOut
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: closeOut
> ### Title: Document Processing Time and Other Session Time
> ### Aliases: closeOut
> 
> ### ** Examples
> 
> closeOut()

##  

# Close Out

### Total Processing Time
`End processing time 2021-01-16 01:45:39.`

 



 


### Distribution and Contact Information


|Category     |Description                                     |
|:------------|:-----------------------------------------------|
|Name         |Rebecca Murphy, Ph.D.                           |
|Organization |Chesapeake Bay Program Office                   |
|Address      |410 Severn Ave., Suite 112, Annapolis, MD 21403 |
|Voice phone  |(410)267-9837                                   |
|email        |rmurphy@chesapeakebay.net                       |


 



|Category    |Description                                   |
|:-----------|:---------------------------------------------|
|Name        |Elgin S. Perry, Ph.D.                         |
|Address     |377 Resolutions Rd., Colonial Beach, VA 22443 |
|Voice phone |(410)610-1473                                 |
|email       |eperry@chesapeake.net                         |


 



|Category     |Description              |
|:------------|:------------------------|
|Name         |Jon B. Harcum, Ph.D.     |
|Organization |Tetra Tech, Inc.         |
|Address      |                         |
|Voice phone  |(864)650-5815            |
|email        |jon.harcum@tetratech.com |


 



|Category     |Description                                            |
|:------------|:------------------------------------------------------|
|Name         |Erik Leppo                                             |
|Organization |Tetra Tech, Inc.                                       |
|Address      |10711 Red Run Blvd., Suite 105, Owings Mills, MD 21117 |
|Voice phone  |(410)902-3150                                          |
|email        |erik.leppo@tetratech.com                               |


 


##  

### Session Information

#### Platform
 setting  value                       
 version  R version 4.0.1 (2020-06-06)
 os       macOS Catalina 10.15.3      
 system   x86_64, darwin17.0          
 ui       X11                         
 language en                          
 collate  C                           
 ctype    de_DE.UTF-8                 
 tz       Europe/Berlin               
 date     2021-01-16                  

#### Packages


|            |package     |loadedversion |path                                                                                         |
|:-----------|:-----------|:-------------|:--------------------------------------------------------------------------------------------|
|assertthat  |assertthat  |0.2.1         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/assertthat                    |
|baytrends   |baytrends   |2.0.2         |/Users/Steve/Dropbox/imputeTS/revdep/checks.noindex/baytrends/old/baytrends.Rcheck/baytrends |
|cli         |cli         |2.2.0         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/cli                           |
|crayon      |crayon      |1.3.4         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/crayon                        |
|digest      |digest      |0.6.27        |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/digest                        |
|fansi       |fansi       |0.4.2         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/fansi                         |
|generics    |generics    |0.1.0         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/generics                      |
|glue        |glue        |1.4.2         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/glue                          |
|highr       |highr       |0.8           |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/highr                         |
|knitr       |knitr       |1.30          |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/knitr                         |
|lattice     |lattice     |0.20-41       |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/lattice                       |
|lubridate   |lubridate   |1.7.9.2       |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/lubridate                     |
|Matrix      |Matrix      |1.3-2         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/Matrix                        |
|memoise     |memoise     |1.1.0         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/memoise                       |
|mgcv        |mgcv        |1.8-33        |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/mgcv                          |
|nlme        |nlme        |3.1-151       |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/nlme                          |
|pander      |pander      |0.6.3         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/pander                        |
|plyr        |plyr        |1.8.6         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/plyr                          |
|Rcpp        |Rcpp        |1.0.6         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/Rcpp                          |
|rstudioapi  |rstudioapi  |0.13          |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/rstudioapi                    |
|sessioninfo |sessioninfo |1.1.1         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/sessioninfo                   |
|survival    |survival    |3.2-7         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/survival                      |
|withr       |withr       |2.3.0         |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/withr                         |
|xfun        |xfun        |0.20          |/Users/Steve/Dropbox/imputeTS/revdep/library.noindex/baytrends/xfun                          |
> 
> 
> 
> cleanEx()
> nameEx("dectime")
> ### * dectime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dectime
> ### Title: Decimal Time
> ### Aliases: dectime
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> 
> dectime("11/11/1918", date.format="%m/%d/%Y")
[1] 1918.862
> dectime(1988:1990)
[1] 1988 1989 1990
> 
> 
> 
> cleanEx()
> nameEx("dectime2Date")
> ### * dectime2Date
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dectime2Date
> ### Title: Date Conversion
> ### Aliases: dectime2Date
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> 
> dectime("02/07/2013", date.format="%m/%d/%Y")
[1] 2013.103
> # Convert back the printed result:
> dectime2Date(2013.103)
[1] "2013-02-07"
> 
> 
> 
> cleanEx()
> nameEx("detrended.flow")
> ### * detrended.flow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: detrended.flow
> ### Title: Create Seasonally Detrended Flow Data Set
> ### Aliases: detrended.flow
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Define Function Inputs
> ##D usgsGageID    <- c("01491000", "01578310")
> ##D siteName      <- c("Choptank River near Greensboro, MD",
> ##D                    "Susquehanna River at Conowingo, MD")
> ##D yearStart     <- 1983
> ##D yearEnd       <- 2016
> ##D dvAvgWinSel   <- c(1, 5, 10, 15, 20, 30, 40, 50, 60, 90, 120, 150, 180, 210)
> ##D dvAvgWgtSel   <- "uniform"
> ##D dvAvgSidesSel <- 1
> ##D lowess.f      <- 0.2
> ##D                  
> ##D # Run Function
> ##D flow.detrended <- detrended.flow(usgsGageID, siteName, yearStart, yearEnd
> ##D                                 , dvAvgWinSel, dvAvgWgtSel, dvAvgSidesSel
> ##D                                , lowess.f)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("detrended.salinity")
> ### * detrended.salinity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: detrended.salinity
> ### Title: Create Seasonally Detrended Salinty Data Set
> ### Aliases: detrended.salinity
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Show Example Dataset (sal)
> ##D str(sal)
> ##D 
> ##D # Define Function Inputs
> ##D df.sal        <- sal
> ##D dvAvgWinSel   <- 30
> ##D lowess.f      <- 0.2
> ##D minObs        <- 40
> ##D minObs.sd    <- 10
> ##D                  
> ##D # Run Function
> ##D salinity.detrended <- detrended.salinity(df.sal, dvAvgWinSel, 
> ##D                                  lowess.f, minObs, minObs.sd) 
> ## End(Not run)              
> 
> 
> 
> cleanEx()
> nameEx("dot-F")
> ### * dot-F
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .F
> ### Title: Print out figure title (customization of pandoc.emphasis and
> ###   pandoc.strong )
> ### Aliases: .F
> ### Keywords: internal
> 
> ### ** Examples
> 
> text<-"Hello World!"
> .F(text)


 

*Figure: Hello World!*

 

> .F(text, 4)


 

*Figure 4. Hello World!*

 

> .F(text, 4,'e')


 

*Figure 4. Hello World!*

 

> .F(text, 4,'s')


 

**Figure 4. Hello World!**

 

> 
> 
> 
> cleanEx()
> nameEx("dot-H")
> ### * dot-H
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .H
> ### Title: Print out header (shortened pandoc.header)
> ### Aliases: .H
> ### Keywords: internal
> 
> ### ** Examples
> 
> .H("1st level header",1)

# 1st level header
> 
> 
> 
> cleanEx()
> nameEx("dot-H1")
> ### * dot-H1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .H1
> ### Title: Print out 1st level header (shortened pandoc.header)
> ### Aliases: .H1
> ### Keywords: internal
> 
> ### ** Examples
> 
> .H1("1st level header")

# 1st level header
> .H3("3rd level header")

### 3rd level header
> 
> 
> 
> cleanEx()
> nameEx("dot-H2")
> ### * dot-H2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .H2
> ### Title: Print out 2nd level header (shortened pandoc.header)
> ### Aliases: .H2
> ### Keywords: internal
> 
> ### ** Examples
> 
> .H2("2nd level header")

## 2nd level header
> .H3("3rd level header")

### 3rd level header
> 
> 
> 
> cleanEx()
> nameEx("dot-H3")
> ### * dot-H3
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .H3
> ### Title: Print out 3rd level header (shortened pandoc.header)
> ### Aliases: .H3
> ### Keywords: internal
> 
> ### ** Examples
> 
> .H2("2nd level header")

## 2nd level header
> .H3("3rd level header")

### 3rd level header
> 
> 
> 
> cleanEx()
> nameEx("dot-H4")
> ### * dot-H4
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .H4
> ### Title: Print out 4th level header (shortened pandoc.header)
> ### Aliases: .H4
> ### Keywords: internal
> 
> ### ** Examples
> 
> .H2("2nd level header")

## 2nd level header
> .H4("4th level header")

#### 4th level header
> 
> 
> 
> cleanEx()
> nameEx("dot-H5")
> ### * dot-H5
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .H5
> ### Title: Print out 5th level header (shortened pandoc.header)
> ### Aliases: .H5
> ### Keywords: internal
> 
> ### ** Examples
> 
> .H2("2nd level header")

## 2nd level header
> .H5("5th level header")

##### 5th level header
> 
> 
> 
> cleanEx()
> nameEx("dot-P")
> ### * dot-P
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .P
> ### Title: Paragraph (customization of pandoc.p)
> ### Aliases: .P
> ### Keywords: internal
> 
> ### ** Examples
> 
> .P()


 

> 
> 
> 
> cleanEx()
> nameEx("dot-T")
> ### * dot-T
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .T
> ### Title: Print out table title (customization of pandoc.emphasis and
> ###   pandoc.strong )
> ### Aliases: .T
> ### Keywords: internal
> 
> ### ** Examples
> 
> text<-"Hello World!"
> .T(text)


 

*Table: Hello World!*

 

> .T(text, 4)


 

*Table 4. Hello World!*

 

> .T(text, 4,'e')


 

*Table 4. Hello World!*

 

> .T(text, 4,'s')


 

**Table 4. Hello World!**

 

> 
> 
> 
> cleanEx()
> nameEx("dot-V")
> ### * dot-V
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .V
> ### Title: Print out text (blended pandoc.emphasis, .verbatim, and .strong)
> ### Aliases: .V
> ### Keywords: internal
> 
> ### ** Examples
> 
> .V("Hello World!",'v')
`Hello World!`> .V("Hello World!",'e')
*Hello World!*> .V("Hello World!",'s')
**Hello World!**> .V("Hello World!")
`Hello World!`> 
> 
> 
> cleanEx()
> nameEx("dot-checkRange")
> ### * dot-checkRange
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .checkRange
> ### Title: Check Data Range - function that checks for allowable values
> ### Aliases: .checkRange
> ### Keywords: internal
> 
> ### ** Examples
> 
> # create an example data frame
> df <- data.frame(
+        x1 = c("X1","Y2","A1","B2","C1", "X1","","A1","","C1"),
+        x2 = seq(5, 14 ) + runif(10) ,
+        x3 = as.POSIXct(c("1/10/2008", "1/21/2008", "3/1/2008", "3/26/1993",
+                          "11/1/2012", "6/10/2000", "8/2/1990", "7/8/2005",
+                          "1/6/2008", "9/11/2008"),
+                          format="%m/%d/%Y"), stringsAsFactors =FALSE)
> # add a few missing values
> df[1,1]=NA
> df[3,2]=NA
> df[5,3]=NA
> df
     x1        x2         x3
1  <NA>  5.265509 2008-01-10
2    Y2  6.372124 2008-01-21
3    A1        NA 2008-03-01
4    B2  8.908208 1993-03-26
5    C1  9.201682       <NA>
6    X1 10.898390 2000-06-10
7       11.944675 1990-08-02
8    A1 12.660798 2005-07-08
9       13.629114 2008-01-06
10   C1 14.061786 2008-09-11
> 
> # establish allowable values for screening
> x1Scrn <- as.character(c("A1", "B2", "C1", "Y2"))   # character
> x2Scrn <- c(7,13)                                   # min/max value
> x3Scrn <- as.POSIXct(c("1999-01-01", "2008-09-10")) # min/max date (POSIXct format)
> 
> # return df with new column indicating pass [TRUE] / fail [FALSE]
> .checkRange(df, var="x1", varScrn=x1Scrn, numNA=FALSE, deleteOption='mark')
     x1        x2         x3 dfScrn
1  <NA>  5.265509 2008-01-10  FALSE
2    Y2  6.372124 2008-01-21   TRUE
3    A1        NA 2008-03-01   TRUE
4    B2  8.908208 1993-03-26   TRUE
5    C1  9.201682       <NA>   TRUE
6    X1 10.898390 2000-06-10  FALSE
7       11.944675 1990-08-02  FALSE
8    A1 12.660798 2005-07-08   TRUE
9       13.629114 2008-01-06  FALSE
10   C1 14.061786 2008-09-11   TRUE
> .checkRange(df, var="x2", varScrn=x2Scrn, numNA=FALSE, deleteOption='mark')
     x1        x2         x3 dfScrn
1  <NA>  5.265509 2008-01-10  FALSE
2    Y2  6.372124 2008-01-21  FALSE
3    A1        NA 2008-03-01  FALSE
4    B2  8.908208 1993-03-26   TRUE
5    C1  9.201682       <NA>   TRUE
6    X1 10.898390 2000-06-10   TRUE
7       11.944675 1990-08-02   TRUE
8    A1 12.660798 2005-07-08   TRUE
9       13.629114 2008-01-06  FALSE
10   C1 14.061786 2008-09-11  FALSE
> .checkRange(df, var="x3", varScrn=x3Scrn, numNA=FALSE, deleteOption='mark')
     x1        x2         x3 dfScrn
1  <NA>  5.265509 2008-01-10   TRUE
2    Y2  6.372124 2008-01-21   TRUE
3    A1        NA 2008-03-01   TRUE
4    B2  8.908208 1993-03-26  FALSE
5    C1  9.201682       <NA>  FALSE
6    X1 10.898390 2000-06-10   TRUE
7       11.944675 1990-08-02  FALSE
8    A1 12.660798 2005-07-08   TRUE
9       13.629114 2008-01-06   TRUE
10   C1 14.061786 2008-09-11  FALSE
> 
> # return df with only rows that pass check
> .checkRange(df, var="x1", varScrn=x1Scrn, numNA=FALSE, deleteOption='pass')
   x1        x2         x3
2  Y2  6.372124 2008-01-21
3  A1        NA 2008-03-01
4  B2  8.908208 1993-03-26
5  C1  9.201682       <NA>
8  A1 12.660798 2005-07-08
10 C1 14.061786 2008-09-11
> .checkRange(df, var="x2", varScrn=x2Scrn, numNA=FALSE, deleteOption='pass')
  x1        x2         x3
4 B2  8.908208 1993-03-26
5 C1  9.201682       <NA>
6 X1 10.898390 2000-06-10
7    11.944675 1990-08-02
8 A1 12.660798 2005-07-08
> .checkRange(df, var="x3", varScrn=x3Scrn, numNA=FALSE, deleteOption='pass')
    x1        x2         x3
1 <NA>  5.265509 2008-01-10
2   Y2  6.372124 2008-01-21
3   A1        NA 2008-03-01
6   X1 10.898390 2000-06-10
8   A1 12.660798 2005-07-08
9      13.629114 2008-01-06
> 
> 
> 
> cleanEx()
> nameEx("dot-chkParameter")
> ### * dot-chkParameter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .chkParameter
> ### Title: Reduce dataframe and parameter list based on user selected
> ###   parameterFilt
> ### Aliases: .chkParameter
> ### Keywords: internal
> 
> ### ** Examples
> 
> #df <- chkParameter(df,parameterFilt=c("tn", "tp"))
> 
> 
> 
> cleanEx()
> nameEx("dot-findFile")
> ### * dot-findFile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .findFile
> ### Title: Find Recent File Information
> ### Aliases: .findFile
> ### Keywords: internal
> 
> ### ** Examples
> 
> # name of most recently modified file
> ## Not run: 
> ##D .findFile()         # current directory
> ##D .findFile("..")     # one directory up
> ##D #
> ##D # list of files and common attributes one directory up
> ##D .findFile(folder="..", file="*.*", n=2, fileNameOnly=FALSE)      #two most recent files
> ##D .findFile(folder="..", file="*.*", n="all", fileNameOnly=FALSE)  #all files
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("dot-reAttDF")
> ### * dot-reAttDF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .reAttDF
> ### Title: Re-attribute df based on previous df
> ### Aliases: .reAttDF
> ### Keywords: internal
> 
> ### ** Examples
> 
> # create data frame
> df0 <- data.frame (sta=c("A","A"), lay=c("B","C"), x1 =c(NA,2), x2 =c( 4,14))
> 
> #add simple attribute
> attr(df0, "Attribute1") <- "Test attribute1"
> 
> #run aggregate -- loose attributes
> df1 <- aggregate(x2 ~ sta, data=df0, mean, na.action=na.pass, na.rm=TRUE)
> df2 <- .reAttDF(df1, df0)
> 
> 
> 
> cleanEx()
> nameEx("eventProcessing")
> ### * eventProcessing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: eventNum
> ### Title: Event Processing
> ### Aliases: eventNum eventLen eventSeq
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> 
> ## Notice the difference caused by setting reset to TRUE
> eventNum(c(TRUE,TRUE,FALSE,FALSE,TRUE,FALSE))
[1] 1 1 1 1 2 2
> eventNum(c(TRUE,TRUE,FALSE,FALSE,TRUE,FALSE), reset=TRUE)
[1] 1 1 0 0 2 0
> 
> ## Notice the difference caused by setting reset to TRUE
> eventSeq(eventNum(c(TRUE,TRUE,FALSE,FALSE,TRUE,FALSE)))
[1] 1 2 3 4 1 2
> eventSeq(eventNum(c(TRUE,TRUE,FALSE,FALSE,TRUE,FALSE), reset=TRUE))
[1] 1 2 0 0 1 0
> 
> ## Notice the difference caused by setting reset to TRUE
> eventLen(eventNum(c(TRUE,TRUE,FALSE,FALSE,TRUE,FALSE), reset=TRUE))
[1] 2 2 0 0 1 0
> ## This is an example of the summary option
> eventLen(eventNum(c(TRUE,TRUE,FALSE,FALSE,TRUE,FALSE), reset=TRUE), summary=TRUE)
1 2 
2 1 
> 
> 
> 
> cleanEx()
> nameEx("fillMissing")
> ### * fillMissing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fillMissing
> ### Title: Fill Missing Values
> ### Aliases: fillMissing
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #library(smwrData)
> ##D data(Q05078470)
> ##D # Create missing values in flow, the first sequence is a peak and the second is a recession
> ##D Q05078470$FlowMiss <- Q05078470$FLOW
> ##D Q05078470$FlowMiss[c(109:111, 198:201)] <- NA
> ##D # Interpolate the missing values
> ##D Q05078470$FlowFill <- fillMissing(Q05078470$FlowMiss)
> ##D # How did we do (line is actual, points are filled values)?
> ##D par(mfrow=c(2,1), mar=c(5.1, 4.1, 1.1, 1.1))
> ##D with(Q05078470[100:120, ], plot(DATES, FLOW, type="l"))
> ##D with(Q05078470[109:111, ], points(DATES, FlowFill))
> ##D with(Q05078470[190:210, ], plot(DATES, FLOW, type="l"))
> ##D with(Q05078470[198:201, ], points(DATES, FlowFill))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("filterWgts")
> ### * filterWgts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filterWgts
> ### Title: Create filter weights
> ### Aliases: filterWgts
> ### Keywords: internal
> 
> ### ** Examples
> 
> wgts<- filterWgts(0,"uniform")
> wgts<- filterWgts(7,"uniform")
> wgts<- filterWgts(7,"centered")
> wgts<- filterWgts(7,"weighted")
> x <- 1:100
> filter(x, filterWgts(7,"weighted"), sides=1)
Time Series:
Start = 1 
End = 100 
Frequency = 1 
  [1] NA NA NA NA NA NA  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 [26] 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48
 [51] 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73
 [76] 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98
> 
> 
> 
> cleanEx()
> nameEx("gamDiff")
> ### * gamDiff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gamDiff
> ### Title: Compute an estimate of difference based on GAM results
> ### Aliases: gamDiff
> 
> ### ** Examples
> 
> # run analysisOrganizeData function to create the list analySpec
> dfr <- analysisOrganizeData (dataCensored, report=NA)
> df        <- dfr[["df"]]
> analySpec <- dfr[["analySpec"]]
> 
> # set GAM models to just one model
> analySpec$gamModels <- list(
+   list(option=2, name= "Non-linear trend with Seasonality (plus Interactions)",
+        model= "~ cyear + s(cyear) + s(doy,bs='cc')+ ti(cyear,doy,bs=c('tp','cc'))", deriv=FALSE))
> 
> # run GAM for a single water quality variable, station and layer
> gamResult <- gamTest(df, 'tn', 'CB5.4', 'S', analySpec=analySpec)

#### Total Nitrogen - Non-linear trend with Seasonality (plus Interactions)


 

*Table: GAM Analysis of Variance.*

 



|Type             |        Source|  edf|  F-stat| p-value|
|:----------------|-------------:|----:|-------:|-------:|
|parametric terms |         cyear| 1.00|  0.4344|  0.5102|
|smoothed terms   |      s(cyear)| 7.13|  3.9607|  0.0001|
|"      "         |        s(doy)| 6.41| 19.9524| <0.0001|
|"      "         | ti(cyear,doy)| 5.49|  1.3710|  0.0022|


 

*Table: GAM Parameter Coefficients.*

 



|Parameter   |  Estimate| Std. Err.|  t value| p-value|
|:-----------|---------:|---------:|--------:|-------:|
|(Intercept) | -0.648238|  0.019521| -33.2073| <0.0001|
|cyear       | -0.013368|  0.020281|  -0.6591|  0.5102|


 

*Table: GAM Diagnostics.*

 



|     AIC|   RMSE| Adj. R-squared|
|-------:|------:|--------------:|
| -135.64| 0.2021|         0.4364|


 

*Table: Estimates of Change from 1985-2016.*

 



|Calculation                                  |      Estimate      |
|:--------------------------------------------|:------------------:|
|Baseline log mean (geometric mean)           |  -0.5592 (0.5717)  |
|Current log mean (geometric mean)            |  -0.9008 (0.4062)  |
|Estimated log difference                     |      -0.3416       |
|Std. Err. log difference                     |       0.058        |
|95% Confidence interval for log difference   | (-0.4552 , -0.228) |
|Difference p-value                           |      <0.0001       |
|Period of Record Percent Change Estimate (%) |      -28.94%       |
> 
> # use gamDiff to replicate estimates of change calculated in the above
> gamDiff(gamRslt=gamResult[["gamOutput2"]]$gamRslt,
+         iSpec=gamResult$iSpec, analySpec=analySpec,
+         base.yr.set = NA, test.yr.set = NA,
+         doy.set = NA, alpha = 0.05)
$gamDiff.regular
$gamDiff.regular$base.yr
[1] 1985 1986

$gamDiff.regular$test.yr
[1] 2015 2016

$gamDiff.regular$doys
 [1]  15  46  75 106 136 167 197 228 259 289 320 350

$gamDiff.regular$per.mn
[1] -0.5592253 -0.9008470

$gamDiff.regular$per.mn.obs
[1] 0.5716518 0.4062254

$gamDiff.regular$pct.chg
[1] -28.93831

$gamDiff.regular$diff.est
           [,1]
[1,] -0.3416218

$gamDiff.regular$diff.est.obs
[1] -0.1654263

$gamDiff.regular$diff.se
           [,1]
[1,] 0.05797399

$gamDiff.regular$diff.ci
[1] -0.4552487 -0.2279948

$gamDiff.regular$diff.t
          [,1]
[1,] -5.892673

$gamDiff.regular$diff.pval
                  [,1]
[1,] 0.000000007587802

$gamDiff.regular$alpha
[1] 0.05


$gamDiff.adjusted
$gamDiff.adjusted$base.yr
[1] 1985 1986

$gamDiff.adjusted$test.yr
[1] 2015 2016

$gamDiff.adjusted$doys
 [1]  15  46  75 106 136 167 197 228 259 289 320 350

$gamDiff.adjusted$per.mn
[1] -0.5592253 -0.9008470

$gamDiff.adjusted$per.mn.obs
[1] 0.5716518 0.4062254

$gamDiff.adjusted$pct.chg
[1] -28.93831

$gamDiff.adjusted$diff.est
           [,1]
[1,] -0.3416218

$gamDiff.adjusted$diff.est.obs
[1] -0.1654263

$gamDiff.adjusted$diff.se
           [,1]
[1,] 0.05797399

$gamDiff.adjusted$diff.ci
[1] -0.4552487 -0.2279948

$gamDiff.adjusted$diff.t
          [,1]
[1,] -5.892673

$gamDiff.adjusted$diff.pval
                  [,1]
[1,] 0.000000007587802

$gamDiff.adjusted$alpha
[1] 0.05


> 
> # use gamDiff to calculate changes from 2005/06 to 2013/14
> gamDiff(gamRslt=gamResult[["gamOutput2"]]$gamRslt,
+         iSpec=gamResult$iSpec, analySpec=analySpec,
+         base.yr.set = c(2004:2005), test.yr.set = c(2013:2014),
+         doy.set = NA, alpha = 0.05)
$gamDiff.regular
$gamDiff.regular$base.yr
[1] 2004 2005

$gamDiff.regular$test.yr
[1] 2013 2014

$gamDiff.regular$doys
 [1]  15  46  75 106 136 167 197 228 259 289 320 350

$gamDiff.regular$per.mn
[1] -0.6318804 -0.7723996

$gamDiff.regular$per.mn.obs
[1] 0.5315913 0.4619034

$gamDiff.regular$pct.chg
[1] -13.1093

$gamDiff.regular$diff.est
           [,1]
[1,] -0.1405192

$gamDiff.regular$diff.est.obs
[1] -0.06968791

$gamDiff.regular$diff.se
          [,1]
[1,] 0.0380542

$gamDiff.regular$diff.ci
[1] -0.21510407 -0.06593436

$gamDiff.regular$diff.t
          [,1]
[1,] -3.692607

$gamDiff.regular$diff.pval
             [,1]
[1,] 0.0002500019

$gamDiff.regular$alpha
[1] 0.05


$gamDiff.adjusted
$gamDiff.adjusted$base.yr
[1] 2004 2005

$gamDiff.adjusted$test.yr
[1] 2013 2014

$gamDiff.adjusted$doys
 [1]  15  46  75 106 136 167 197 228 259 289 320 350

$gamDiff.adjusted$per.mn
[1] -0.6318804 -0.7723996

$gamDiff.adjusted$per.mn.obs
[1] 0.5315913 0.4619034

$gamDiff.adjusted$pct.chg
[1] -13.1093

$gamDiff.adjusted$diff.est
           [,1]
[1,] -0.1405192

$gamDiff.adjusted$diff.est.obs
[1] -0.06968791

$gamDiff.adjusted$diff.se
          [,1]
[1,] 0.0380542

$gamDiff.adjusted$diff.ci
[1] -0.21510407 -0.06593436

$gamDiff.adjusted$diff.t
          [,1]
[1,] -3.692607

$gamDiff.adjusted$diff.pval
             [,1]
[1,] 0.0002500019

$gamDiff.adjusted$alpha
[1] 0.05


> 
> 
> 
> 
> cleanEx()
> nameEx("gamPlotDispSeason")
> ### * gamPlotDispSeason
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gamPlotDispSeason
> ### Title: Plot censored gam fits vs. time
> ### Aliases: gamPlotDispSeason
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify parameter and station to analyze
> ##D dep        <- 'do'
> ##D stat       <- 'CB5.4'
> ##D layer      <- 'B'
> ##D 
> ##D # Prepare data and set up specifications for analysis
> ##D dfr <- analysisOrganizeData (dataCensored)
> ##D df        <- dfr[[1]]
> ##D analySpec <- dfr[[2]]
> ##D 
> ##D # Apply gamTest 
> ##D gamResult <- gamTest(df, dep, stat, layer, analySpec=analySpec)
> ##D gamPlotDisp(gamResult = gamResult, analySpec = analySpec,
> ##D             fullModel = 2, seasAvgModel = 2, seasonalModel = 2,
> ##D             diffType = "regular", obserPlot = TRUE, interventionPlot = TRUE,
> ##D             seasAvgPlot = TRUE, seasAvgConfIntPlot = FALSE,
> ##D             seasAvgSigPlot = FALSE, fullModelPlot = TRUE, seasModelPlot = TRUE,
> ##D             BaseCurrentMeanPlot = FALSE, adjustedPlot = FALSE)
> ##D 
> ##D # Apply gamTestSeason
> ##D gamResult2 <- gamTestSeason(df, dep, stat, layer, analySpec=analySpec,
> ##D                             gamSeasonPlot = c("7/15-8/15", "purple", "range"))
> ##D gamPlotDispSeason(gamResult = gamResult2, analySpec = analySpec,
> ##D                   fullModel = 2, seasAvgModel = 2, seasonalModel = 2,
> ##D                   diffType = "regular", obserPlot = TRUE, interventionPlot = TRUE,
> ##D                   seasAvgPlot = TRUE, seasAvgConfIntPlot = FALSE,
> ##D                   seasAvgSigPlot = FALSE, fullModelPlot = FALSE, seasModelPlot = FALSE,
> ##D                   BaseCurrentMeanPlot = TRUE, adjustedPlot = FALSE, gamSeasonFocus = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("gamTest")
> ### * gamTest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gamTest
> ### Title: Perform GAM analysis
> ### Aliases: gamTest
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify parameter and station to analyze
> ##D dep        <- 'do'
> ##D stat       <- 'CB5.4'
> ##D layer      <- 'B'
> ##D 
> ##D # Prepare data and set up specifications for analysis
> ##D dfr <- analysisOrganizeData (dataCensored)
> ##D df        <- dfr[[1]]
> ##D analySpec <- dfr[[2]]
> ##D 
> ##D # Apply gamTest 
> ##D gamResult <- gamTest(df, dep, stat, layer, analySpec=analySpec)
> ##D gamPlotDisp(gamResult = gamResult, analySpec = analySpec,
> ##D             fullModel = 2, seasAvgModel = 2, seasonalModel = 2,
> ##D             diffType = "regular", obserPlot = TRUE, interventionPlot = TRUE,
> ##D             seasAvgPlot = TRUE, seasAvgConfIntPlot = FALSE,
> ##D             seasAvgSigPlot = FALSE, fullModelPlot = TRUE, seasModelPlot = TRUE,
> ##D             BaseCurrentMeanPlot = FALSE, adjustedPlot = FALSE)
> ##D 
> ##D # Apply gamTestSeason
> ##D gamResult2 <- gamTestSeason(df, dep, stat, layer, analySpec=analySpec,
> ##D                             gamSeasonPlot = c("7/15-8/15", "purple", "range"))
> ##D gamPlotDispSeason(gamResult = gamResult2, analySpec = analySpec,
> ##D                   fullModel = 2, seasAvgModel = 2, seasonalModel = 2,
> ##D                   diffType = "regular", obserPlot = TRUE, interventionPlot = TRUE,
> ##D                   seasAvgPlot = TRUE, seasAvgConfIntPlot = FALSE,
> ##D                   seasAvgSigPlot = FALSE, fullModelPlot = FALSE, seasModelPlot = FALSE,
> ##D                   BaseCurrentMeanPlot = TRUE, adjustedPlot = FALSE, gamSeasonFocus = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("gamTestSeason")
> ### * gamTestSeason
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gamTestSeason
> ### Title: Perform GAM analysis for Specified Season
> ### Aliases: gamTestSeason
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify parameter and station to analyze
> ##D dep        <- 'do'
> ##D stat       <- 'CB5.4'
> ##D layer      <- 'B'
> ##D 
> ##D # Prepare data and set up specifications for analysis
> ##D dfr <- analysisOrganizeData (dataCensored)
> ##D df        <- dfr[[1]]
> ##D analySpec <- dfr[[2]]
> ##D 
> ##D # Apply gamTest 
> ##D gamResult <- gamTest(df, dep, stat, layer, analySpec=analySpec)
> ##D gamPlotDisp(gamResult = gamResult, analySpec = analySpec,
> ##D             fullModel = 2, seasAvgModel = 2, seasonalModel = 2,
> ##D             diffType = "regular", obserPlot = TRUE, interventionPlot = TRUE,
> ##D             seasAvgPlot = TRUE, seasAvgConfIntPlot = FALSE,
> ##D             seasAvgSigPlot = FALSE, fullModelPlot = TRUE, seasModelPlot = TRUE,
> ##D             BaseCurrentMeanPlot = FALSE, adjustedPlot = FALSE)
> ##D 
> ##D # Apply gamTestSeason
> ##D gamResult2 <- gamTestSeason(df, dep, stat, layer, analySpec=analySpec,
> ##D                             gamSeasonPlot = c("7/15-8/15", "purple", "range"))
> ##D gamPlotDispSeason(gamResult = gamResult2, analySpec = analySpec,
> ##D                   fullModel = 2, seasAvgModel = 2, seasonalModel = 2,
> ##D                   diffType = "regular", obserPlot = TRUE, interventionPlot = TRUE,
> ##D                   seasAvgPlot = TRUE, seasAvgConfIntPlot = FALSE,
> ##D                   seasAvgSigPlot = FALSE, fullModelPlot = FALSE, seasModelPlot = FALSE,
> ##D                   BaseCurrentMeanPlot = TRUE, adjustedPlot = FALSE, gamSeasonFocus = TRUE)
> ## End(Not run)     
> 
> 
> 
> cleanEx()
> nameEx("getUSGSflow")
> ### * getUSGSflow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getUSGSflow
> ### Title: Retrieve USGS daily flow data in a wide format
> ### Aliases: getUSGSflow
> ### Keywords: internal
> 
> ### ** Examples
> 
> # set retrieval parameters
> yearStart   <- 2014
> yearEnd     <- 2014
> siteNumber <- c('01578310')
> 
> # regular retrieval (default usage)
> df <- getUSGSflow(siteNumber, yearStart, yearEnd)
> 
> 
> 
> 
> cleanEx()
> nameEx("impute")
> ### * impute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: impute
> ### Title: Impute Censored Values
> ### Aliases: impute
> 
> ### ** Examples
> 
> ## Not run: 
> ##D x  <- dataCensored[1:20,"tdp"]
> ##D x.lower <- impute(x,'lower')
> ##D x.mid   <- impute(x,'mid')
> ##D x.upper <- impute(x,'upper')
> ##D x.norm  <- impute(x,'norm')
> ##D x.lnorm <- impute(x,'lnorm')
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("imputeDF")
> ### * imputeDF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: imputeDF
> ### Title: Impute Censored Values in dataframes
> ### Aliases: imputeDF
> 
> ### ** Examples
> 
> ## Not run: 
> ##D df  <- dataCensored[1:20, ]
> ##D df.lower <- imputeDF(df,'lower')
> ##D df.mid   <- imputeDF(df,'mid')
> ##D df.upper <- imputeDF(df,'upper')
> ##D df.norm  <- imputeDF(df,'norm')
> ##D df.lnorm <- imputeDF(df,'lnorm')
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("layerAggregation")
> ### * layerAggregation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: layerAggregation
> ### Title: Aggregate data layers
> ### Aliases: layerAggregation
> 
> ### ** Examples
> 
> ## Not run: 
> ##D dfr    <- analysisOrganizeData(dataCensored)
> ##D 
> ##D # retrieve all corrected chlorophyll-a concentrations for Station CB5.4,
> ##D # missing values are removed and transformation applied. Note, a 
> ##D # warning is displayed indicating that data set has layers but user did
> ##D # not specify layer in retrieval. layerAggregation then aggregates per 
> ##D # specifications
> ##D dfr2   <- selectData(dfr[["df"]], 'chla', 'CB5.4', analySpec=dfr[["analySpec"]])
> ##D df2    <- dfr2[[1]]   # data frame of selected data
> ##D iSpec2 <- dfr2[[2]]   # meta data about selected data
> ##D df2a   <- layerAggregation(df2, avgTechnique="mean", layerAggOption=4)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("loadModels")
> ### * loadModels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loadModels
> ### Title: Load Built-in GAM formulas
> ### Aliases: loadModels
> 
> ### ** Examples
> 
> # run analysisOrganizeData function to create the list analySpec
> dfr <- analysisOrganizeData (dataCensored, report=NA)
> df        <- dfr[["df"]]
> analySpec <- dfr[["analySpec"]]
> 
> # current models in analySpec
> analySpec$gamModels
[[1]]
[[1]]$option
[1] 0

[[1]]$name
[1] "Linear Trend with Seasonality"

[[1]]$model
[1] "~ cyear+ s(doy,bs='cc')"

[[1]]$deriv
[1] TRUE

[[1]]$gamK1
[1] NA NA

[[1]]$gamK2
[1] NA NA


[[2]]
[[2]]$option
[1] 1

[[2]]$name
[1] "Non-linear Trend with Seasonality"

[[2]]$model
[1] "~ cyear + s(cyear, k=gamK1) + s(doy,bs='cc')"

[[2]]$deriv
[1] TRUE

[[2]]$gamK1
[1] 10.0000000  0.6666667

[[2]]$gamK2
[1] NA NA


[[3]]
[[3]]$option
[1] 2

[[3]]$name
[1] "Non-linear trend with Seas+Int"

[[3]]$model
[1] "~ cyear + s(cyear, k=gamK1) + s(doy,bs='cc') + ti(cyear,doy,bs=c('tp','cc'))"

[[3]]$deriv
[1] TRUE

[[3]]$gamK1
[1] 10.0000000  0.6666667

[[3]]$gamK2
[1] NA NA


[[4]]
[[4]]$option
[1] 3

[[4]]$name
[1] "Non-linear trend with Seas+Int. & Intervention"

[[4]]$model
[1] "~ intervention + cyear + s(cyear, k=gamK1) + s(doy,bs='cc') + ti(cyear,doy,bs=c('tp','cc'))"

[[4]]$deriv
[1] TRUE

[[4]]$gamK1
[1] 10.0000000  0.6666667

[[4]]$gamK2
[1] NA NA


[[5]]
[[5]]$option
[1] 4

[[5]]$name
[1] "Non-linear trend with Seas+Int. & Hydro Adj"

[[5]]$model
[1] "~ cyear + s(cyear, k=gamK1) + s(doy,bs='cc') + ti(cyear,doy,bs=c('tp','cc')) + s(flw_sal,k=gamK2) + ti(flw_sal,doy,bs=c('tp','cc')) + ti(flw_sal, cyear,bs=c('tp' ,'tp')) + ti(flw_sal,doy,cyear, bs=c('tp','cc','tp'))"

[[5]]$deriv
[1] TRUE

[[5]]$gamK1
[1] 10.0000000  0.3333333

[[5]]$gamK2
[1] 10.0000000  0.6666667


> 
> # set models in analySpec to gam0, gam1, and gam2 only
> analySpec$gamModels <- loadModels(c('gam0','gam1','gam2'))
> 
> 
> 
> 
> cleanEx()
> nameEx("makeSurvDF")
> ### * makeSurvDF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: makeSurvDF
> ### Title: Convert dataframe to include survival (Surv) objects
> ### Aliases: makeSurvDF
> 
> ### ** Examples
> 
> df <- dataCensored[1:20,]
> colnames(df)
 [1] "station"  "date"     "layer"    "secchi"   "salinity" "do"      
 [7] "wtemp"    "tss"      "chla"     "din"      "nh4"      "no23"    
[13] "po4"      "tdn"      "tdp"      "tn"       "tp"      
> df1 <- unSurvDF(df)
> colnames(df1)
 [1] "station"  "date"     "layer"    "secchi"   "salinity" "do"      
 [7] "wtemp"    "tss"      "chla_lo"  "chla_hi"  "din_lo"   "din_hi"  
[13] "nh4_lo"   "nh4_hi"   "no23_lo"  "no23_hi"  "po4_lo"   "po4_hi"  
[19] "tdn_lo"   "tdn_hi"   "tdp_lo"   "tdp_hi"   "tn_lo"    "tn_hi"   
[25] "tp_lo"    "tp_hi"   
> # Default values
> df2 <- makeSurvDF(df1)
> colnames(df2)
 [1] "station"  "date"     "layer"    "secchi"   "salinity" "do"      
 [7] "wtemp"    "tss"      "chla"     "din"      "nh4"      "no23"    
[13] "po4"      "tdn"      "tdp"      "tn"       "tp"      
> # User values
> df3 <- unSurvDF(df, "_LOW", "_HIGH")
> colnames(df3)
 [1] "station"   "date"      "layer"     "secchi"    "salinity"  "do"       
 [7] "wtemp"     "tss"       "chla_LOW"  "chla_HIGH" "din_LOW"   "din_HIGH" 
[13] "nh4_LOW"   "nh4_HIGH"  "no23_LOW"  "no23_HIGH" "po4_LOW"   "po4_HIGH" 
[19] "tdn_LOW"   "tdn_HIGH"  "tdp_LOW"   "tdp_HIGH"  "tn_LOW"    "tn_HIGH"  
[25] "tp_LOW"    "tp_HIGH"  
> df4 <- makeSurvDF(df3, "_LOW", "_HIGH")
> colnames(df4)
 [1] "station"  "date"     "layer"    "secchi"   "salinity" "do"      
 [7] "wtemp"    "tss"      "chla"     "din"      "nh4"      "no23"    
[13] "po4"      "tdn"      "tdp"      "tn"       "tp"      
> 
> 
> 
> 
> cleanEx()
> nameEx("na2miss")
> ### * na2miss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: na2miss
> ### Title: Recode Data
> ### Aliases: na2miss miss2na
> ### Keywords: internal manip
> 
> ### ** Examples
> 
> 
> ## Construct simple substitutions
> na2miss(c(1, 2, 3, NA, 5, 6))
[1]      1      2      3 -99999      5      6
> 
> 
> 
> cleanEx()
> nameEx("nobs")
> ### * nobs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nobs
> ### Title: Compute the Number of Non-Missing Observations
> ### Aliases: nobs
> 
> ### ** Examples
> 
> x <- c(1,2,3,5,NA,6,7,1,NA )
> length(x)
[1] 9
> nobs(x)
[1] 7
> 
> df <- data.frame(x=rnorm(100), y=rnorm(100))
> df[1,1] <- NA
> df[1,2] <- NA
> df[2,1] <- NA
> 
> nobs(df)
 x  y 
98 99 
> 
> fit <- lm(y ~ x, data=df)
> nobs(fit)
[1] 98
> 
> 
> 
> 
> cleanEx()
> nameEx("saveDF")
> ### * saveDF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: saveDF
> ### Title: Save R object to disk
> ### Aliases: saveDF
> 
> ### ** Examples
> 
> ## Not run: 
> ##D df <- data.frame(x=c(1:100))
> ##D saveDF(df, 'test_note')
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("seasAdjflow")
> ### * seasAdjflow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: seasAdjflow
> ### Title: Create Daily Seasonally-adjusted Log Flow Residuals
> ### Aliases: seasAdjflow
> ### Keywords: internal
> 
> ### ** Examples
> 
> #Set Retrieval Parameters
> yearStart   <- 1983
> yearEnd     <- 2015
> siteNumbers <- c("01578310")
> 
> # Regular Retrieval (default usage)
> df <- getUSGSflow(siteNumbers, yearStart, yearEnd, fill=TRUE)
> # Apply default smoothing
> df <- seasAdjflow(df,"01578310")


 

*Figure 0. Daily Flow [cms] as a Function of Day of Year. (Solid red line is the predicted GAM model using the model: gam(LogQ ~ s(doy,bs='cc')).)*

 

> 
> 
> 
> 
> cleanEx()
> nameEx("selectData")
> ### * selectData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: selectData
> ### Title: Select data for analysis from a larger data frame
> ### Aliases: selectData
> 
> ### ** Examples
> 
> ## Not run: 
> ##D dfr    <- analysisOrganizeData(dataCensored)
> ##D 
> ##D # retrieve Secchi depth for Station CB5.4, no transformations are applied
> ##D dfr1   <- selectData(dfr[["df"]], 'secchi', 'CB5.4', 'S', transform=FALSE,
> ##D                     remMiss=FALSE, analySpec=dfr[["analySpec"]])
> ##D df1    <- dfr1[[1]]   # data frame of selected data
> ##D iSpec1 <- dfr1[[2]]   # meta data about selected data
> ##D 
> ##D # retrieve surface corrected chlorophyll-a concentrations for Station CB5.4,
> ##D # missing values are removed and transformation applied
> ##D dfr2   <- selectData(dfr[["df"]], 'chla', 'CB5.4', 'S', analySpec=dfr[["analySpec"]])
> ##D df2    <- dfr2[[1]]   # data frame of selected data
> ##D iSpec2 <- dfr2[[2]]   # meta data about selected data
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("unSurv")
> ### * unSurv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unSurv
> ### Title: Converts Surv object into a 3-column matrix
> ### Aliases: unSurv
> 
> ### ** Examples
> 
> df1 <- dataCensored[dataCensored$station=="CB3.3C","chla"][1:30]
> colnames(df1)
[1] "time1"  "time2"  "status"
> # Default values
> df2 <- unSurv(df1)
> colnames(df2)
[1] "lo"   "hi"   "type"
> # User values
> df3 <- unSurv(df1, "LOW", "HIGH")
> colnames(df3)
[1] "LOW"  "HIGH" "type"
> 
> 
> 
> 
> cleanEx()
> nameEx("unSurvDF")
> ### * unSurvDF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unSurvDF
> ### Title: Converts Surv objects in a dataframe to "lo" and "hi" values
> ### Aliases: unSurvDF
> 
> ### ** Examples
> 
> df <- dataCensored[dataCensored$station=="CB3.3C", ][1:20,]
> colnames(df)
 [1] "station"  "date"     "layer"    "secchi"   "salinity" "do"      
 [7] "wtemp"    "tss"      "chla"     "din"      "nh4"      "no23"    
[13] "po4"      "tdn"      "tdp"      "tn"       "tp"      
> # Default values
> df2 <- unSurvDF(df)
> colnames(df2)
 [1] "station"  "date"     "layer"    "secchi"   "salinity" "do"      
 [7] "wtemp"    "tss"      "chla_lo"  "chla_hi"  "din_lo"   "din_hi"  
[13] "nh4_lo"   "nh4_hi"   "no23_lo"  "no23_hi"  "po4_lo"   "po4_hi"  
[19] "tdn_lo"   "tdn_hi"   "tdp_lo"   "tdp_hi"   "tn_lo"    "tn_hi"   
[25] "tp_lo"    "tp_hi"   
> # User values
> df3 <- unSurvDF(df, "_LOW", "_HIGH")
> colnames(df3)
 [1] "station"   "date"      "layer"     "secchi"    "salinity"  "do"       
 [7] "wtemp"     "tss"       "chla_LOW"  "chla_HIGH" "din_LOW"   "din_HIGH" 
[13] "nh4_LOW"   "nh4_HIGH"  "no23_LOW"  "no23_HIGH" "po4_LOW"   "po4_HIGH" 
[19] "tdn_LOW"   "tdn_HIGH"  "tdp_LOW"   "tdp_HIGH"  "tn_LOW"    "tn_HIGH"  
[25] "tp_LOW"    "tp_HIGH"  
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  6.883 0.643 13.289 0.006 0.01 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
