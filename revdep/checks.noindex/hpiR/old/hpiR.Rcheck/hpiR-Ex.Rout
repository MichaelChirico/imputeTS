
R version 4.0.1 (2020-06-06) -- "See Things Now"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "hpiR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('hpiR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("buildForecastIDs")
> ### * buildForecastIDs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: buildForecastIDs
> ### Title: Create the row IDs for forecast accuracy
> ### Aliases: buildForecastIDs
> 
> ### ** Examples
> 
> 
>   # Load example sales
>  data(ex_sales)
> 
>  # Create RT data
>  rt_data <- rtCreateTrans(trans_df = ex_sales,
+                           prop_id = 'pinx',
+                           trans_id = 'sale_id',
+                           price = 'sale_price',
+                           periodicity = 'monthly',
+                           date = 'sale_date')
> 
> # Create ids
>   fc_ids <- buildForecastIDs(time_cut = 27,
+                              hpi_df = rt_data,
+                              forecast_length = 2,
+                              train = TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("calcAccuracy")
> ### * calcAccuracy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcAccuracy
> ### Title: Calculate the accuracy of an index
> ### Aliases: calcAccuracy
> 
> ### ** Examples
> 
> 
>  # Load Data
>  data(ex_sales)
> 
>  # Create Index
>  rt_index <- rtIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'robust',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
>  # Calculate insample accuracy
>  hpi_accr <- calcAccuracy(hpi_obj = rt_index,
+                           test_type = 'rt',
+                           test_method = 'insample')
Trimming prediction date down to period 48 and before.
> 
> 
> 
> 
> cleanEx()
> nameEx("calcForecastError")
> ### * calcForecastError
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcForecastError
> ### Title: Calculate the forecast accuracy of series of indexes
> ### Aliases: calcForecastError
> 
> ### ** Examples
> 
> 
>  # Load example sales
>  data(ex_sales)
> 
>  # Create Index
>  hed_index <- hedIndex(trans_df = ex_sales,
+                        periodicity = 'monthly',
+                        max_date = '2011-12-31',
+                        adj_type = 'clip',
+                        date = 'sale_date',
+                        price = 'sale_price',
+                        trans_id = 'sale_id',
+                        prop_id = 'pinx',
+                        estimator = 'robust',
+                        log_dep = TRUE,
+                        trim_model = TRUE,
+                        max_period = 24,
+                        dep_var = 'price',
+                        ind_var = c('tot_sf', 'beds', 'baths'),
+                        smooth = FALSE)
Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
>  # Create Series (Suppressing messages do to small sample size of this example)
>   suppressMessages(
+     hpi_series <- createSeries(hpi_obj = hed_index,
+                                train_period = 12))
> 
>  # Create Prediction data
>  rt_data <- rtCreateTrans(trans_df = ex_sales,
+                           prop_id = 'pinx',
+                           max_date = '2011-12-31',
+                           trans_id = 'sale_id',
+                           price = 'sale_price',
+                           periodicity = 'monthly',
+                           date = 'sale_date',
+                           min_period_dist = 12)
Supplied "max_date" is less than maximum of transactions. Adjusting.

> 
> 
>  # Calculate forecast accuracty
>  fc_accr <- calcForecastError(is_obj = hpi_series,
+                               pred_df = rt_data)
> 
> 
> 
> 
> cleanEx()
> nameEx("calcInSampleError")
> ### * calcInSampleError
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcInSampleError
> ### Title: Calculate index errors in sample
> ### Aliases: calcInSampleError
> 
> ### ** Examples
> 
> 
>  # Load example data
>  data(ex_sales)
> 
>  # Create index with raw transaction data
>  rt_index <- rtIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'robust',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
>  # Calculate accuracy
>  in_accr <- calcInSampleError(pred_df = rt_index$data,
+                               index = rt_index$index$value)
> 
> 
> 
> 
> cleanEx()
> nameEx("calcKFoldError")
> ### * calcKFoldError
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcKFoldError
> ### Title: Calculate index error with FKold (out of sample)
> ### Aliases: calcKFoldError
> 
> ### ** Examples
> 
> 
>  # Load data
>  data(ex_sales)
> 
>  # Create index with raw transaction data
>  rt_index <- rtIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'robust',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
>   # Create prediction data
>   rt_data <- rtCreateTrans(trans_df = ex_sales,
+                           prop_id = 'pinx',
+                           trans_id = 'sale_id',
+                           price = 'sale_price',
+                           periodicity = 'monthly',
+                           date = 'sale_date')
> 
>   # Calc Accuracy
>   kf_accr <- calcKFoldError(hpi_obj = rt_index,
+                             pred_df = rt_data,
+                             k = 10,
+                             seed = 123,
+                             smooth = FALSE)
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
> 
> 
> 
> 
> cleanEx()
> nameEx("calcRevision")
> ### * calcRevision
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcRevision
> ### Title: Calculate revision values of an index
> ### Aliases: calcRevision
> 
> ### ** Examples
> 
> 
> # Load example sales
>  data(ex_sales)
> 
>  # Create Index
>  rt_index <- rtIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'robust',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
>  # Create Series (Suppressing messages do to small sample size of this example)
>   suppressMessages(
+     hpi_series <- createSeries(hpi_obj = rt_index,
+                                train_period = 12))
Warning in lmrob.fit(x, y, control, init = init) :
  D-step did NOT converge. Returning unconverged SMD-estimate
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
> 
>  # Calculate revision
>  series_rev <-  calcRevision(series_obj = hpi_series)
> 
> 
> 
> 
> cleanEx()
> nameEx("calcSeriesAccuracy")
> ### * calcSeriesAccuracy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcSeriesAccuracy
> ### Title: Calculate the accuracy of a series of indexes
> ### Aliases: calcSeriesAccuracy
> 
> ### ** Examples
> 
> 
>  # Load data
>  data(ex_sales)
> 
>  # Create index
>  rt_index <- rtIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'robust',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
>   #  Create Series (Suppressing messages do to small sample size of this example)
>   suppressMessages(
+     hpi_series <- createSeries(hpi_obj = rt_index,
+                                train_period = 12))
Warning in lmrob.fit(x, y, control, init = init) :
  D-step did NOT converge. Returning unconverged SMD-estimate
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
> 
>   # Calculate insample accuracy
>   hpi_series_accr <- calcSeriesAccuracy(series_obj = hpi_series,
+                                         test_type = 'rt',
+                                         test_method = 'insample')
> 
> 
> 
> 
> cleanEx()
> nameEx("calcSeriesVolatility")
> ### * calcSeriesVolatility
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcSeriesVolatility
> ### Title: Calculate volatility of a series of indexes
> ### Aliases: calcSeriesVolatility
> 
> ### ** Examples
> 
> 
> # Load example sales
>  data(ex_sales)
> 
>  # Create Index
>  rt_index <- rtIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'robust',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
>  # Create Series (Suppressing messages do to small sample size of this example)
>  suppressMessages(
+     hpi_series <- createSeries(hpi_obj = rt_index,
+                                train_period = 12))
Warning in lmrob.fit(x, y, control, init = init) :
  D-step did NOT converge. Returning unconverged SMD-estimate
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
> 
>  # Calculate series volatility
>  series_vol <- calcSeriesVolatility(series_obj = hpi_series,
+                                     window= 3)
> 
> 
> 
> 
> cleanEx()
> nameEx("calcVolatility")
> ### * calcVolatility
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcVolatility
> ### Title: Calculate index volatility
> ### Aliases: calcVolatility
> 
> ### ** Examples
> 
> 
>  # Load Data
>  data(ex_sales)
> 
>  # Create index with raw transaction data
>  rt_index <- rtIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'robust',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
>  # Calculate Volatility
>  index_vol <- calcVolatility(index = rt_index,
+                              window = 3)
> 
> 
> 
> 
> cleanEx()
> nameEx("checkDate")
> ### * checkDate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: checkDate
> ### Title: Validate the date argument
> ### Aliases: checkDate
> 
> ### ** Examples
> 
> 
>  # Load Data
>   data(ex_sales)
> 
>  # Check date
>   date_checked <- checkDate(x_date = ex_sales$sale_date,
+                             name = 'sale date')
> 
> 
> 
> cleanEx()
> nameEx("createKFoldData")
> ### * createKFoldData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createKFoldData
> ### Title: Create data for KFold error test
> ### Aliases: createKFoldData
> 
> ### ** Examples
> 
> 
>  # Load Data
>  data(ex_sales)
> 
>  # Create RT Data
>  rt_data <- rtCreateTrans(trans_df = ex_sales,
+                           prop_id = 'pinx',
+                           trans_id = 'sale_id',
+                           price = 'sale_price',
+                           periodicity = 'monthly',
+                           date = 'sale_date')
>  # Create folds
>  k_folds <- split(x = 1:nrow(rt_data),
+                   f = sample(1:10, nrow(rt_data), replace = TRUE))
> 
>  # Create data from folds
>  kfold_data <- createKFoldData(score_ids = k_folds[[1]],
+                                full_data = rt_data,
+                                pred_df = rt_data)
> 
> 
> 
> 
> cleanEx()
> nameEx("createSeries")
> ### * createSeries
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createSeries
> ### Title: Create a series of indexes
> ### Aliases: createSeries
> 
> ### ** Examples
> 
> 
>   # Load example sales
>  data(ex_sales)
> 
>  # Create Index
>  rt_index <- rtIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'robust',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
>  # Create Series (Suppressing messages do to small sample size of this example)
>   suppressMessages(
+     hpi_series <- createSeries(hpi_obj = rt_index,
+                                train_period = 12))
Warning in lmrob.fit(x, y, control, init = init) :
  D-step did NOT converge. Returning unconverged SMD-estimate
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
> 
> 
> 
> 
> cleanEx()
> nameEx("dateToPeriod")
> ### * dateToPeriod
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dateToPeriod
> ### Title: Convert dates to a relative period
> ### Aliases: dateToPeriod
> 
> ### ** Examples
> 
> 
> # Load data
>   data(ex_sales)
> 
> # Convert to period df
>   hpi_data <- dateToPeriod(trans_df = ex_sales,
+                            date = 'sale_date',
+                            periodicity = 'monthly')
> 
> 
> 
> 
> cleanEx()
> nameEx("hedCreateTrans")
> ### * hedCreateTrans
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hedCreateTrans
> ### Title: Create data for 'hed' approach
> ### Aliases: hedCreateTrans
> 
> ### ** Examples
> 
> 
>  # Load example data
>  data(ex_sales)
> 
>  # Create Hed Data
>  ex_heddata <- hedCreateTrans(trans_df = ex_sales,
+                               prop_id = 'pinx',
+                               trans_id = 'sale_id',
+                               price = 'sale_price',
+                               date = 'sale_date',
+                               periodicity = 'monthly')
> 
> 
> 
> 
> cleanEx()
> nameEx("hedIndex")
> ### * hedIndex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hedIndex
> ### Title: Create a full index object by hedonic approach
> ### Aliases: hedIndex
> 
> ### ** Examples
> 
> 
>  # Load data
>  data(ex_sales)
> 
>  # Create index with raw transaction data
>  hed_index <- hedIndex(trans_df = ex_sales,
+                        periodicity = 'monthly',
+                        min_date = '2010-06-01',
+                        max_date = '2015-11-30',
+                        adj_type = 'clip',
+                        date = 'sale_date',
+                        price = 'sale_price',
+                        trans_id = 'sale_id',
+                        prop_id = 'pinx',
+                        estimator = 'robust',
+                        log_dep = TRUE,
+                        trim_model = TRUE,
+                        max_period = 48,
+                        dep_var = 'price',
+                        ind_var = c('tot_sf', 'beds', 'baths'),
+                        smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
> 
> 
> 
> cleanEx()
> nameEx("hedModel")
> ### * hedModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hedModel
> ### Title: Estimate hedonic model for index creation
> ### Aliases: hedModel
> 
> ### ** Examples
> 
> 
>  # Load example data
>  data(ex_sales)
> 
>  # Create hedonic data
>  hed_data <- hedCreateTrans(trans_df = ex_sales,
+                            prop_id = 'pinx',
+                            trans_id = 'sale_id',
+                            price = 'sale_price',
+                            date = 'sale_date',
+                            periodicity = 'monthly')
> 
>  # Estimate Model
>  hed_model <- hedModel(estimator = structure('base', class = 'base'),
+                        hed_df = hed_data,
+                        hed_spec = as.formula(log(price) ~ baths + tot_sf))
> 
> 
> 
> 
> cleanEx()
> nameEx("hpiModel")
> ### * hpiModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hpiModel
> ### Title: Wrapper to estimate model approaches (generic method)
> ### Aliases: hpiModel
> 
> ### ** Examples
> 
> 
>  # Load data
>  data(ex_sales)
> 
>  # With a raw transaction data.frame
>  rt_data <- rtCreateTrans(trans_df = ex_sales,
+                           prop_id = 'pinx',
+                           trans_id = 'sale_id',
+                           price = 'sale_price',
+                           periodicity = 'monthly',
+                           date = 'sale_date')
> 
>  # Create model object
>  hpi_model <- hpiModel(model_type = 'rt',
+                        hpi_df = rt_data,
+                        estimator = 'base',
+                        log_dep = TRUE)
> 
>  # For custom weighted repeat transaction model
> 
>  hpi_model_wgt <- hpiModel(model_type = 'rt',
+                            hpi_df = rt_data,
+                            estimator = 'weighted',
+                            weights = runif(nrow(rt_data), 0, 1))
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("modelToIndex")
> ### * modelToIndex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: modelToIndex
> ### Title: Convert model results into a house price index
> ### Aliases: modelToIndex
> 
> ### ** Examples
> 
> 
>  # Load data
>  data(ex_sales)
> 
>  # With a raw transaction data.frame
>  rt_data <- rtCreateTrans(trans_df = ex_sales,
+                           prop_id = 'pinx',
+                           trans_id = 'sale_id',
+                           price = 'sale_price',
+                           periodicity = 'monthly',
+                           date = 'sale_date')
> 
>  # Create model object
>  hpi_model <- hpiModel(model_type = 'rt',
+                        hpi_df = rt_data,
+                        estimator = 'base',
+                        log_dep = TRUE)
> 
>  # Create Index
>  hpi_index <- modelToIndex(hpi_model,
+                            max_period = 84)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot.hpi")
> ### * plot.hpi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.hpi
> ### Title: Plot method for 'hpi' object
> ### Aliases: plot.hpi
> 
> ### ** Examples
> 
> 
>  # Load data
>  data(ex_sales)
> 
>  # Create index with raw transaction data
>  rt_index <- rtIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'robust',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
>  # Plot data
>  plot(rt_index)
>  plot(rt_index, smooth = TRUE)
No smoothed index (index_obj$smooth) present.

> 
> 
> 
> 
> cleanEx()
> nameEx("plot.hpiaccuracy")
> ### * plot.hpiaccuracy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.hpiaccuracy
> ### Title: Plot method for 'hpiaccuracy' object
> ### Aliases: plot.hpiaccuracy
> 
> ### ** Examples
> 
> 
>  # Load Data
>  data(ex_sales)
> 
>  # Create Index
>  rt_index <- rtIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'robust',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
>  # Calculate insample accuracy
>  hpi_accr <- calcAccuracy(hpi_obj = rt_index,
+                           test_type = 'rt',
+                           test_method = 'insample')
Trimming prediction date down to period 48 and before.
> 
>  # Make Plot
>  plot(hpi_accr)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot.hpiindex")
> ### * plot.hpiindex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.hpiindex
> ### Title: Plot method for 'hpiindex' object
> ### Aliases: plot.hpiindex
> 
> ### ** Examples
> 
> 
>  # Load data
>  data(ex_sales)
> 
>  # With a raw transaction data.frame
>  rt_data <- rtCreateTrans(trans_df = ex_sales,
+                           prop_id = 'pinx',
+                           trans_id = 'sale_id',
+                           price = 'sale_price',
+                           periodicity = 'monthly',
+                           date = 'sale_date')
> 
>  # Create model object
>  hpi_model <- hpiModel(model_type = 'rt',
+                        hpi_df = rt_data,
+                        estimator = 'base',
+                        log_dep = TRUE)
> 
>  # Create Index
>  hpi_index <- modelToIndex(hpi_model,
+                            max_period = 84)
> 
>  # Make Plot
>  plot(hpi_index)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot.indexvolatility")
> ### * plot.indexvolatility
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.indexvolatility
> ### Title: Plot method for 'indexvolatility' object
> ### Aliases: plot.indexvolatility
> 
> ### ** Examples
> 
> 
>  # Load Data
>  data(ex_sales)
> 
>  # Create index with raw transaction data
>  rt_index <- rtIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'robust',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
>  # Calculate Volatility
>  index_vol <- calcVolatility(index = rt_index,
+                              window = 3)
> 
>  # Make Plot
>  plot(index_vol)
Warning: Removed 3 row(s) containing missing values (geom_path).
> 
> 
> 
> 
> cleanEx()
> nameEx("plot.seriesaccuracy")
> ### * plot.seriesaccuracy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.seriesaccuracy
> ### Title: Plot method for 'seriesaccuracy' object
> ### Aliases: plot.seriesaccuracy
> 
> ### ** Examples
> 
> 
>  # Load data
>  data(ex_sales)
> 
>  # Create index
>  rt_index <- rtIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'robust',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
>  #  Create Series (Suppressing messages do to small sample size of this example)
>  suppressMessages(
+     hpi_series <- createSeries(hpi_obj = rt_index,
+                                train_period = 12))
Warning in lmrob.fit(x, y, control, init = init) :
  D-step did NOT converge. Returning unconverged SMD-estimate
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
> 
>  # Calculate insample accuracy
>  hpi_series_accr <- calcSeriesAccuracy(series_obj = hpi_series,
+                                        test_type = 'rt',
+                                        test_method = 'insample')
>  # Make Plot
>  plot(hpi_series_accr)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot.serieshpi")
> ### * plot.serieshpi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.serieshpi
> ### Title: Plot method for 'serieshpi' object
> ### Aliases: plot.serieshpi
> 
> ### ** Examples
> 
> 
>  # Load data
>  data(ex_sales)
> 
>  # Create index
>  rt_index <- rtIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'robust',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
>  # Create Series (Suppressing messages do to small sample size of this example)
>  suppressMessages(
+    hpi_series <- createSeries(hpi_obj = rt_index,
+                               train_period = 12))
Warning in lmrob.fit(x, y, control, init = init) :
  D-step did NOT converge. Returning unconverged SMD-estimate
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
> 
>  # Make Plot
>  plot(hpi_series)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot.seriesrevision")
> ### * plot.seriesrevision
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.seriesrevision
> ### Title: Plot method for 'seriesrevision' object
> ### Aliases: plot.seriesrevision
> 
> ### ** Examples
> 
> 
>  # Load example sales
>  data(ex_sales)
> 
>  # Create Index
>  rt_index <- rtIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'robust',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
>  # Create Series (Suppressing messages do to small sample size of this example)
>  suppressMessages(
+    hpi_series <- createSeries(hpi_obj = rt_index,
+                               train_period = 12))
Warning in lmrob.fit(x, y, control, init = init) :
  D-step did NOT converge. Returning unconverged SMD-estimate
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
> 
>  # Calculate revision
>  series_rev <-  calcRevision(series_obj = hpi_series)
> 
>  # Make Plot
>  plot(series_rev)
> 
> 
> 
> 
> cleanEx()
> nameEx("rfIndex")
> ### * rfIndex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rfIndex
> ### Title: Create a full index object by random forest approach
> ### Aliases: rfIndex
> 
> ### ** Examples
> 
> 
> 
>  # Load data
>  data(ex_sales)
> 
>  # Create index with raw transaction data
>  rf_index <- rfIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'pdp',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      dep_var = 'price',
+                      ind_var = c('tot_sf', 'beds', 'baths'),
+                      smooth = FALSE,
+                      ntrees = 10,
+                      sim_count = 2)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
> 
> 
> 
> cleanEx()
> nameEx("rfModel")
> ### * rfModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rfModel
> ### Title: Estimate random forest model for index creation
> ### Aliases: rfModel
> 
> ### ** Examples
> 
>  # Load example data
>  data(ex_sales)
> 
>  # Create hedonic data
>  hed_data <- hedCreateTrans(trans_df = ex_sales,
+                            prop_id = 'pinx',
+                            trans_id = 'sale_id',
+                            price = 'sale_price',
+                            date = 'sale_date',
+                            periodicity = 'monthly')
> 
>  # Estimate Model
>  rf_model <- rfModel(estimator = structure('pdp', class = 'pdp'),
+                      rf_df = hed_data,
+                      rf_spec = as.formula(log(price) ~ baths + tot_sf),
+                      ntrees = 10,
+                      sim_count = 1)
> 
> 
> 
> 
> cleanEx()
> nameEx("rtCreateTrans")
> ### * rtCreateTrans
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rtCreateTrans
> ### Title: Create transaction data for rt approach
> ### Aliases: rtCreateTrans
> 
> ### ** Examples
> 
> 
>  # Load data
>  data(ex_sales)
> 
>  # With a raw transaction data.frame
>  rt_data <- rtCreateTrans(trans_df = ex_sales,
+                           prop_id = 'pinx',
+                           trans_id = 'sale_id',
+                           price = 'sale_price',
+                           periodicity = 'monthly',
+                           date = 'sale_date')
> 
> 
> 
> 
> cleanEx()
> nameEx("rtIndex")
> ### * rtIndex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rtIndex
> ### Title: Create a full index object by repeat transaction approach
> ### Aliases: rtIndex
> 
> ### ** Examples
> 
> 
>  # Load data
>  data(ex_sales)
> 
>  # Create index with raw transaction data
>  rt_index <- rtIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'robust',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
> 
> 
> 
> cleanEx()
> nameEx("rtModel")
> ### * rtModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rtModel
> ### Title: Estimate repeat transaction model for index creation
> ### Aliases: rtModel
> 
> ### ** Examples
> 
> 
>   # Load data
>   data(ex_sales)
> 
>   # With a raw transaction data.frame
>   rt_data <- rtCreateTrans(trans_df = ex_sales,
+                            prop_id = 'pinx',
+                            trans_id = 'sale_id',
+                            price = 'sale_price',
+                            periodicity = 'monthly',
+                            date = 'sale_date')
> 
>   # Calc price differences
>   price_diff <- rt_data$price_2 - rt_data$price_1
> 
>   # Create time matrix
>   rt_matrix <- rtTimeMatrix(rt_data)
> 
>   # Calculate model
>   rt_model <- rtModel(rt_df = rt_data,
+                       price_diff = price_diff,
+                       time_matrix = rt_matrix,
+                       estimator = structure('base', class='base'))
> 
> 
> 
> 
> cleanEx()
> nameEx("rtTimeMatrix")
> ### * rtTimeMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rtTimeMatrix
> ### Title: Create model matrix for repeat transaction approach
> ### Aliases: rtTimeMatrix
> 
> ### ** Examples
> 
> 
>   # Load data
>   data(ex_sales)
> 
>   # With a raw transaction data.frame
>   rt_data <- rtCreateTrans(trans_df = ex_sales,
+                            prop_id = 'pinx',
+                            trans_id = 'sale_id',
+                            price = 'sale_price',
+                            periodicity = 'monthly',
+                            date = 'sale_date')
>  # Create Matrix
>  rt_matrix <- rtTimeMatrix(rt_data)
> 
> 
> 
> 
> cleanEx()
> nameEx("smoothIndex")
> ### * smoothIndex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: smoothIndex
> ### Title: Smooth an index
> ### Aliases: smoothIndex
> 
> ### ** Examples
> 
> 
>  # Load data
>  data(ex_sales)
> 
>  # Create index with raw transaction data
>  rt_index <- rtIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'robust',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
>  # Create Smooth index
>  sm_index <- smoothIndex(index_obj = rt_index,
+                          order = 3,
+                          in_place = FALSE)
> 
>  # Create Smooth index (in place)
>  sm_index <- smoothIndex(index_obj = rt_index,
+                          order = 3,
+                          in_place = TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("smoothSeries")
> ### * smoothSeries
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: smoothSeries
> ### Title: Smooth all indexes in a series
> ### Aliases: smoothSeries
> 
> ### ** Examples
> 
>  # Load data
>  data(ex_sales)
> 
>  # Create index
>  rt_index <- rtIndex(trans_df = ex_sales,
+                      periodicity = 'monthly',
+                      min_date = '2010-06-01',
+                      max_date = '2015-11-30',
+                      adj_type = 'clip',
+                      date = 'sale_date',
+                      price = 'sale_price',
+                      trans_id = 'sale_id',
+                      prop_id = 'pinx',
+                      estimator = 'robust',
+                      log_dep = TRUE,
+                      trim_model = TRUE,
+                      max_period = 48,
+                      smooth = FALSE)
Supplied "min_date" date is greater than minimum of transactions. Clipping transactions.

Supplied "max_date" is less than maximum of transactions. Clipping transactions.

> 
>  #  Create Series (Suppressing messages do to small sample size of this example)
>  suppressMessages(
+     hpi_series <- createSeries(hpi_obj = rt_index,
+                                train_period = 12))
Warning in lmrob.fit(x, y, control, init = init) :
  D-step did NOT converge. Returning unconverged SMD-estimate
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in lmrob.S(x, y, control = control) :
  S-estimated scale == 0:  Probably exact fit; check your data
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
Warning in rlm.default(x, y, weights, method = method, wt.method = wt.method,  :
  'rlm' failed to converge in 20 steps
>  # Smooth indexes
>  sm_series <- smoothSeries(series_obj = hpi_series,
+                            order = 5)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  34.576 1.884 39.105 0.003 0.005 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
