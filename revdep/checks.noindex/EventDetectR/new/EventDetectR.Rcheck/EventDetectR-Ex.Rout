
R version 4.0.1 (2020-06-06) -- "See Things Now"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "EventDetectR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('EventDetectR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("buildEDModel")
> ### * buildEDModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: buildEDModel
> ### Title: build Event Detection Model
> ### Aliases: buildEDModel
> 
> ### ** Examples
> 
> 
> ## build a simple event detection model with standard configuration
> x <- stationBData[100:200,-1]
> buildEDModel(x,ignoreVarianceWarning = TRUE)
$internal
$internal$isDirectForecast
[1] FALSE

$internal$usedModellingAlgo
function (y, model = "ZZZ", damped = NULL, alpha = NULL, beta = NULL, 
    gamma = NULL, phi = NULL, additive.only = FALSE, lambda = NULL, 
    biasadj = FALSE, lower = c(rep(1e-04, 3), 0.8), upper = c(rep(0.9999, 
        3), 0.98), opt.crit = c("lik", "amse", "mse", "sigma", 
        "mae"), nmse = 3, bounds = c("both", "usual", "admissible"), 
    ic = c("aicc", "aic", "bic"), restrict = TRUE, allow.multiplicative.trend = FALSE, 
    use.initial.values = FALSE, na.action = c("na.contiguous", 
        "na.interp", "na.fail"), ...) 
{
    opt.crit <- match.arg(opt.crit)
    bounds <- match.arg(bounds)
    ic <- match.arg(ic)
    if (!is.function(na.action)) {
        na.fn_name <- match.arg(na.action)
        na.action <- get(na.fn_name)
    }
    seriesname <- deparse(substitute(y))
    if (any(class(y) %in% c("data.frame", "list", "matrix", "mts"))) {
        stop("y should be a univariate time series")
    }
    y <- as.ts(y)
    if (missing(model) && is.constant(y)) {
        return(ses(y, alpha = 0.99999, initial = "simple")$model)
    }
    ny <- length(y)
    y <- na.action(y)
    if (ny != length(y) && na.fn_name == "na.contiguous") {
        warning("Missing values encountered. Using longest contiguous portion of time series")
        ny <- length(y)
    }
    orig.y <- y
    if (identical(class(model), "ets") && is.null(lambda)) {
        lambda <- model$lambda
    }
    if (!is.null(lambda)) {
        y <- BoxCox(y, lambda)
        lambda <- attr(y, "lambda")
        additive.only <- TRUE
    }
    if (nmse < 1 || nmse > 30) {
        stop("nmse out of range")
    }
    m <- frequency(y)
    if (any(upper < lower)) {
        stop("Lower limits must be less than upper limits")
    }
    if (class(model) == "ets") {
        alpha <- max(model$par["alpha"], 1e-10)
        beta <- model$par["beta"]
        if (is.na(beta)) {
            beta <- NULL
        }
        gamma <- model$par["gamma"]
        if (is.na(gamma)) {
            gamma <- NULL
        }
        phi <- model$par["phi"]
        if (is.na(phi)) {
            phi <- NULL
        }
        modelcomponents <- paste(model$components[1], model$components[2], 
            model$components[3], sep = "")
        damped <- (model$components[4] == "TRUE")
        if (use.initial.values) {
            errortype <- substr(modelcomponents, 1, 1)
            trendtype <- substr(modelcomponents, 2, 2)
            seasontype <- substr(modelcomponents, 3, 3)
            e <- pegelsresid.C(y, m, model$initstate, errortype, 
                trendtype, seasontype, damped, alpha, beta, gamma, 
                phi, nmse)
            np <- length(model$par) + 1
            model$loglik <- -0.5 * e$lik
            model$aic <- e$lik + 2 * np
            model$bic <- e$lik + log(ny) * np
            model$aicc <- model$aic + 2 * np * (np + 1)/(ny - 
                np - 1)
            model$mse <- e$amse[1]
            model$amse <- mean(e$amse)
            tsp.y <- tsp(y)
            model$states <- ts(e$states, frequency = tsp.y[3], 
                start = tsp.y[1] - 1/tsp.y[3])
            colnames(model$states)[1] <- "l"
            if (trendtype != "N") {
                colnames(model$states)[2] <- "b"
            }
            if (seasontype != "N") {
                colnames(model$states)[(2 + (trendtype != "N")):ncol(model$states)] <- paste("s", 
                  1:m, sep = "")
            }
            if (errortype == "A") {
                model$fitted <- ts(y - e$e, frequency = tsp.y[3], 
                  start = tsp.y[1])
            }
            else {
                model$fitted <- ts(y/(1 + e$e), frequency = tsp.y[3], 
                  start = tsp.y[1])
            }
            model$residuals <- ts(e$e, frequency = tsp.y[3], 
                start = tsp.y[1])
            model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny - 
                np)
            model$x <- orig.y
            model$series <- seriesname
            if (!is.null(lambda)) {
                model$fitted <- InvBoxCox(model$fitted, lambda, 
                  biasadj, var(model$residuals))
                attr(lambda, "biasadj") <- biasadj
            }
            model$lambda <- lambda
            return(model)
        }
        else {
            model <- modelcomponents
            if (missing(use.initial.values)) {
                message("Model is being refit with current smoothing parameters but initial states are being re-estimated.\nSet 'use.initial.values=TRUE' if you want to re-use existing initial values.")
            }
        }
    }
    errortype <- substr(model, 1, 1)
    trendtype <- substr(model, 2, 2)
    seasontype <- substr(model, 3, 3)
    if (!is.element(errortype, c("M", "A", "Z"))) {
        stop("Invalid error type")
    }
    if (!is.element(trendtype, c("N", "A", "M", "Z"))) {
        stop("Invalid trend type")
    }
    if (!is.element(seasontype, c("N", "A", "M", "Z"))) {
        stop("Invalid season type")
    }
    if (m < 1 || length(y) <= m) {
        seasontype <- "N"
    }
    if (m == 1) {
        if (seasontype == "A" || seasontype == "M") {
            stop("Nonseasonal data")
        }
        else {
            substr(model, 3, 3) <- seasontype <- "N"
        }
    }
    if (m > 24) {
        if (is.element(seasontype, c("A", "M"))) {
            stop("Frequency too high")
        }
        else if (seasontype == "Z") {
            warning("I can't handle data with frequency greater than 24. Seasonality will be ignored. Try stlf() if you need seasonal forecasts.")
            substr(model, 3, 3) <- seasontype <- "N"
        }
    }
    if (restrict) {
        if ((errortype == "A" && (trendtype == "M" || seasontype == 
            "M")) | (errortype == "M" && trendtype == "M" && 
            seasontype == "A") || (additive.only && (errortype == 
            "M" || trendtype == "M" || seasontype == "M"))) {
            stop("Forbidden model combination")
        }
    }
    data.positive <- (min(y) > 0)
    if (!data.positive && errortype == "M") {
        stop("Inappropriate model for data with negative or zero values")
    }
    if (!is.null(damped)) {
        if (damped && trendtype == "N") {
            stop("Forbidden model combination")
        }
    }
    n <- length(y)
    npars <- 2L
    if (trendtype == "A" || trendtype == "M") {
        npars <- npars + 2L
    }
    if (seasontype == "A" || seasontype == "M") {
        npars <- npars + m
    }
    if (!is.null(damped)) {
        npars <- npars + as.numeric(damped)
    }
    if (n <= npars + 4L) {
        if (!is.null(damped)) {
            if (damped) {
                warning("Not enough data to use damping")
            }
        }
        if (seasontype == "A" || seasontype == "M") {
            fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta, 
                gamma = gamma, phi = phi, exponential = (trendtype == 
                  "M"), seasonal = ifelse(seasontype != "A", 
                  "multiplicative", "additive"), lambda = lambda, 
                biasadj = biasadj, warnings = FALSE), silent = TRUE)
            if (!("try-error" %in% class(fit))) {
                fit$call <- match.call()
                fit$method <- as.character(fit)
                fit$series <- deparse(substitute(y))
                return(fit)
            }
            else {
                warning("Seasonal component could not be estimated")
            }
        }
        if (trendtype == "A" || trendtype == "M") {
            fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta, 
                gamma = FALSE, phi = phi, exponential = (trendtype == 
                  "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE), 
                silent = TRUE)
            if (!("try-error" %in% class(fit))) {
                fit$call <- match.call()
                fit$method <- as.character(fit)
                fit$series <- deparse(substitute(y))
                return(fit)
            }
            else {
                warning("Trend component could not be estimated")
            }
        }
        if (trendtype == "N" && seasontype == "N") {
            fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE, 
                gamma = FALSE, lambda = lambda, biasadj = biasadj, 
                warnings = FALSE), silent = TRUE)
            if (!("try-error" %in% class(fit))) {
                fit$call <- match.call()
                fit$method <- as.character(fit)
                fit$series <- deparse(substitute(y))
                return(fit)
            }
        }
        fit1 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta, 
            gamma = FALSE, phi = phi, exponential = (trendtype == 
                "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE), 
            silent = TRUE)
        fit2 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE, 
            gamma = FALSE, phi = phi, exponential = (trendtype == 
                "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE), 
            silent = TRUE)
        if ("try-error" %in% class(fit1)) {
            fit <- fit2
        }
        else if (fit1$sigma2 < fit2$sigma2) {
            fit <- fit1
        }
        else {
            fit <- fit2
        }
        if ("try-error" %in% class(fit)) 
            stop("Unable to estimate a model.")
        fit$call <- match.call()
        fit$method <- as.character(fit)
        fit$series <- deparse(substitute(y))
        return(fit)
    }
    if (errortype == "Z") {
        errortype <- c("A", "M")
    }
    if (trendtype == "Z") {
        if (allow.multiplicative.trend) {
            trendtype <- c("N", "A", "M")
        }
        else {
            trendtype <- c("N", "A")
        }
    }
    if (seasontype == "Z") {
        seasontype <- c("N", "A", "M")
    }
    if (is.null(damped)) {
        damped <- c(TRUE, FALSE)
    }
    best.ic <- Inf
    for (i in 1:length(errortype)) {
        for (j in 1:length(trendtype)) {
            for (k in 1:length(seasontype)) {
                for (l in 1:length(damped)) {
                  if (trendtype[j] == "N" && damped[l]) {
                    next
                  }
                  if (restrict) {
                    if (errortype[i] == "A" && (trendtype[j] == 
                      "M" || seasontype[k] == "M")) {
                      next
                    }
                    if (errortype[i] == "M" && trendtype[j] == 
                      "M" && seasontype[k] == "A") {
                      next
                    }
                    if (additive.only && (errortype[i] == "M" || 
                      trendtype[j] == "M" || seasontype[k] == 
                      "M")) {
                      next
                    }
                  }
                  if (!data.positive && errortype[i] == "M") {
                    next
                  }
                  fit <- try(etsmodel(y, errortype[i], trendtype[j], 
                    seasontype[k], damped[l], alpha, beta, gamma, 
                    phi, lower = lower, upper = upper, opt.crit = opt.crit, 
                    nmse = nmse, bounds = bounds, ...), silent = TRUE)
                  if (is.element("try-error", class(fit))) 
                    fit.ic <- Inf
                  else fit.ic <- switch(ic, aic = fit$aic, bic = fit$bic, 
                    aicc = fit$aicc)
                  if (!is.na(fit.ic)) {
                    if (fit.ic < best.ic) {
                      model <- fit
                      best.ic <- fit.ic
                      best.e <- errortype[i]
                      best.t <- trendtype[j]
                      best.s <- seasontype[k]
                      best.d <- damped[l]
                    }
                  }
                }
            }
        }
    }
    if (best.ic == Inf) {
        stop("No model able to be fitted")
    }
    model$m <- m
    model$method <- paste("ETS(", best.e, ",", best.t, ifelse(best.d, 
        "d", ""), ",", best.s, ")", sep = "")
    model$series <- seriesname
    model$components <- c(best.e, best.t, best.s, best.d)
    model$call <- match.call()
    model$initstate <- model$states[1, ]
    np <- length(model$par)
    model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny - 
        np)
    model$x <- orig.y
    if (!is.null(lambda)) {
        model$fitted <- InvBoxCox(model$fitted, lambda, biasadj, 
            var(model$residuals))
        attr(lambda, "biasadj") <- biasadj
    }
    model$lambda <- lambda
    return(structure(model, class = "ets"))
}
<bytecode: 0x7fd6ab264880>
<environment: namespace:forecast>

$internal$postProcessing
function (model, events) 
{
    hist <- events
    hist[1:length(hist)] <- F
    if (!is.null(model$oldModel)) {
        hist <- model$oldModel$eventHistory
    }
    postProcessorControl <- model$userConfig$postProcessorControl
    con <- getDefaultPostControl()
    con[names(postProcessorControl)] <- postProcessorControl
    postProcessorControl <- con
    rm(con)
    nEvents <- length(events)
    eventThreshold <- postProcessorControl$eventThreshold
    BEDWindowSize <- model$userConfig$postProcessorControl$bedWindowSize
    BEDProbList <- NULL
    realEvents <- rep(F, nEvents)
    for (k in 1:nEvents) {
        combinedEventVector <- c(hist, events[1:k])
        combinedEventVector <- tail(combinedEventVector, n = BEDWindowSize)
        r <- length(combinedEventVector[combinedEventVector == 
            T])
        p <- 0
        for (i in 1:r) {
            p = p + factorial(BEDWindowSize)/factorial(BEDWindowSize - 
                i)/factorial(i) * 0.5^BEDWindowSize
        }
        BEDProbList <- c(BEDProbList, p)
        realEvents[k] <- (BEDProbList[(k)] > eventThreshold)
    }
    return(realEvents)
}
<bytecode: 0x7fd6a8280c60>
<environment: 0x7fd6a8284d78>


$modelList
$modelList$model1
ETS(A,N,N) 

Call:
 (function (y, model = "ZZZ", damped = NULL, alpha = NULL, beta = NULL,  

 Call:
     gamma = NULL, phi = NULL, additive.only = FALSE, lambda = NULL,  

 Call:
     biasadj = FALSE, lower = c(rep(1e-04, 3), 0.8), upper = c(rep(0.9999,  

 Call:
         3), 0.98), opt.crit = c("lik", "amse", "mse", "sigma",  

 Call:
         "mae"), nmse = 3, bounds = c("both", "usual", "admissible"),  

 Call:
     ic = c("aicc", "aic", "bic"), restrict = TRUE, allow.multiplicative.trend = FALSE,  

 Call:
     use.initial.values = FALSE, na.action = c("na.contiguous",  

 Call:
         "na.interp", "na.fail"), ...)  

 Call:
 { 

 Call:
     opt.crit <- match.arg(opt.crit) 

 Call:
     bounds <- match.arg(bounds) 

 Call:
     ic <- match.arg(ic) 

 Call:
     if (!is.function(na.action)) { 

 Call:
         na.fn_name <- match.arg(na.action) 

 Call:
         na.action <- get(na.fn_name) 

 Call:
     } 

 Call:
     seriesname <- deparse(substitute(y)) 

 Call:
     if (any(class(y) %in% c("data.frame", "list", "matrix", "mts"))) { 

 Call:
         stop("y should be a univariate time series") 

 Call:
     } 

 Call:
     y <- as.ts(y) 

 Call:
     if (missing(model) && is.constant(y)) { 

 Call:
         return(ses(y, alpha = 0.99999, initial = "simple")$model) 

 Call:
     } 

 Call:
     ny <- length(y) 

 Call:
     y <- na.action(y) 

 Call:
     if (ny != length(y) && na.fn_name == "na.contiguous") { 

 Call:
         warning("Missing values encountered. Using longest contiguous portion of time series") 

 Call:
         ny <- length(y) 

 Call:
     } 

 Call:
     orig.y <- y 

 Call:
     if (identical(class(model), "ets") && is.null(lambda)) { 

 Call:
         lambda <- model$lambda 

 Call:
     } 

 Call:
     if (!is.null(lambda)) { 

 Call:
         y <- BoxCox(y, lambda) 

 Call:
         lambda <- attr(y, "lambda") 

 Call:
         additive.only <- TRUE 

 Call:
     } 

 Call:
     if (nmse < 1 || nmse > 30) { 

 Call:
         stop("nmse out of range") 

 Call:
     } 

 Call:
     m <- frequency(y) 

 Call:
     if (any(upper < lower)) { 

 Call:
         stop("Lower limits must be less than upper limits") 

 Call:
     } 

 Call:
     if (class(model) == "ets") { 

 Call:
         alpha <- max(model$par["alpha"], 1e-10) 

 Call:
         beta <- model$par["beta"] 

 Call:
         if (is.na(beta)) { 

 Call:
             beta <- NULL 

 Call:
         } 

 Call:
         gamma <- model$par["gamma"] 

 Call:
         if (is.na(gamma)) { 

 Call:
             gamma <- NULL 

 Call:
         } 

 Call:
         phi <- model$par["phi"] 

 Call:
         if (is.na(phi)) { 

 Call:
             phi <- NULL 

 Call:
         } 

 Call:
         modelcomponents <- paste(model$components[1], model$components[2],  

 Call:
             model$components[3], sep = "") 

 Call:
         damped <- (model$components[4] == "TRUE") 

 Call:
         if (use.initial.values) { 

 Call:
             errortype <- substr(modelcomponents, 1, 1) 

 Call:
             trendtype <- substr(modelcomponents, 2, 2) 

 Call:
             seasontype <- substr(modelcomponents, 3, 3) 

 Call:
             e <- pegelsresid.C(y, m, model$initstate, errortype,  

 Call:
                 trendtype, seasontype, damped, alpha, beta, gamma,  

 Call:
                 phi, nmse) 

 Call:
             np <- length(model$par) + 1 

 Call:
             model$loglik <- -0.5 * e$lik 

 Call:
             model$aic <- e$lik + 2 * np 

 Call:
             model$bic <- e$lik + log(ny) * np 

 Call:
             model$aicc <- model$aic + 2 * np * (np + 1)/(ny -  

 Call:
                 np - 1) 

 Call:
             model$mse <- e$amse[1] 

 Call:
             model$amse <- mean(e$amse) 

 Call:
             tsp.y <- tsp(y) 

 Call:
             model$states <- ts(e$states, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1] - 1/tsp.y[3]) 

 Call:
             colnames(model$states)[1] <- "l" 

 Call:
             if (trendtype != "N") { 

 Call:
                 colnames(model$states)[2] <- "b" 

 Call:
             } 

 Call:
             if (seasontype != "N") { 

 Call:
                 colnames(model$states)[(2 + (trendtype != "N")):ncol(model$states)] <- paste("s",  

 Call:
                   1:m, sep = "") 

 Call:
             } 

 Call:
             if (errortype == "A") { 

 Call:
                 model$fitted <- ts(y - e$e, frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             else { 

 Call:
                 model$fitted <- ts(y/(1 + e$e), frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             model$residuals <- ts(e$e, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1]) 

 Call:
             model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
                 np) 

 Call:
             model$x <- orig.y 

 Call:
             model$series <- seriesname 

 Call:
             if (!is.null(lambda)) { 

 Call:
                 model$fitted <- InvBoxCox(model$fitted, lambda,  

 Call:
                   biasadj, var(model$residuals)) 

 Call:
                 attr(lambda, "biasadj") <- biasadj 

 Call:
             } 

 Call:
             model$lambda <- lambda 

 Call:
             return(model) 

 Call:
         } 

 Call:
         else { 

 Call:
             model <- modelcomponents 

 Call:
             if (missing(use.initial.values)) { 

 Call:
                 message("Model is being refit with current smoothing parameters but initial states are being re-estimated.\nSet 'use.initial.values=TRUE' if you want to re-use existing initial values.") 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     errortype <- substr(model, 1, 1) 

 Call:
     trendtype <- substr(model, 2, 2) 

 Call:
     seasontype <- substr(model, 3, 3) 

 Call:
     if (!is.element(errortype, c("M", "A", "Z"))) { 

 Call:
         stop("Invalid error type") 

 Call:
     } 

 Call:
     if (!is.element(trendtype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid trend type") 

 Call:
     } 

 Call:
     if (!is.element(seasontype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid season type") 

 Call:
     } 

 Call:
     if (m < 1 || length(y) <= m) { 

 Call:
         seasontype <- "N" 

 Call:
     } 

 Call:
     if (m == 1) { 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             stop("Nonseasonal data") 

 Call:
         } 

 Call:
         else { 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (m > 24) { 

 Call:
         if (is.element(seasontype, c("A", "M"))) { 

 Call:
             stop("Frequency too high") 

 Call:
         } 

 Call:
         else if (seasontype == "Z") { 

 Call:
             warning("I can't handle data with frequency greater than 24. Seasonality will be ignored. Try stlf() if you need seasonal forecasts.") 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (restrict) { 

 Call:
         if ((errortype == "A" && (trendtype == "M" || seasontype ==  

 Call:
             "M")) | (errortype == "M" && trendtype == "M" &&  

 Call:
             seasontype == "A") || (additive.only && (errortype ==  

 Call:
             "M" || trendtype == "M" || seasontype == "M"))) { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     data.positive <- (min(y) > 0) 

 Call:
     if (!data.positive && errortype == "M") { 

 Call:
         stop("Inappropriate model for data with negative or zero values") 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         if (damped && trendtype == "N") { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     n <- length(y) 

 Call:
     npars <- 2L 

 Call:
     if (trendtype == "A" || trendtype == "M") { 

 Call:
         npars <- npars + 2L 

 Call:
     } 

 Call:
     if (seasontype == "A" || seasontype == "M") { 

 Call:
         npars <- npars + m 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         npars <- npars + as.numeric(damped) 

 Call:
     } 

 Call:
     if (n <= npars + 4L) { 

 Call:
         if (!is.null(damped)) { 

 Call:
             if (damped) { 

 Call:
                 warning("Not enough data to use damping") 

 Call:
             } 

 Call:
         } 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = gamma, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), seasonal = ifelse(seasontype != "A",  

 Call:
                   "multiplicative", "additive"), lambda = lambda,  

 Call:
                 biasadj = biasadj, warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Seasonal component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "A" || trendtype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
                 silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Trend component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "N" && seasontype == "N") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
                 gamma = FALSE, lambda = lambda, biasadj = biasadj,  

 Call:
                 warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
         } 

 Call:
         fit1 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         fit2 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         if ("try-error" %in% class(fit1)) { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         else if (fit1$sigma2 < fit2$sigma2) { 

 Call:
             fit <- fit1 

 Call:
         } 

 Call:
         else { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         if ("try-error" %in% class(fit))  

 Call:
             stop("Unable to estimate a model.") 

 Call:
         fit$call <- match.call() 

 Call:
         fit$method <- as.character(fit) 

 Call:
         fit$series <- deparse(substitute(y)) 

 Call:
         return(fit) 

 Call:
     } 

 Call:
     if (errortype == "Z") { 

 Call:
         errortype <- c("A", "M") 

 Call:
     } 

 Call:
     if (trendtype == "Z") { 

 Call:
         if (allow.multiplicative.trend) { 

 Call:
             trendtype <- c("N", "A", "M") 

 Call:
         } 

 Call:
         else { 

 Call:
             trendtype <- c("N", "A") 

 Call:
         } 

 Call:
     } 

 Call:
     if (seasontype == "Z") { 

 Call:
         seasontype <- c("N", "A", "M") 

 Call:
     } 

 Call:
     if (is.null(damped)) { 

 Call:
         damped <- c(TRUE, FALSE) 

 Call:
     } 

 Call:
     best.ic <- Inf 

 Call:
     for (i in 1:length(errortype)) { 

 Call:
         for (j in 1:length(trendtype)) { 

 Call:
             for (k in 1:length(seasontype)) { 

 Call:
                 for (l in 1:length(damped)) { 

 Call:
                   if (trendtype[j] == "N" && damped[l]) { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   if (restrict) { 

 Call:
                     if (errortype[i] == "A" && (trendtype[j] ==  

 Call:
                       "M" || seasontype[k] == "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (errortype[i] == "M" && trendtype[j] ==  

 Call:
                       "M" && seasontype[k] == "A") { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (additive.only && (errortype[i] == "M" ||  

 Call:
                       trendtype[j] == "M" || seasontype[k] ==  

 Call:
                       "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                   } 

 Call:
                   if (!data.positive && errortype[i] == "M") { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   fit <- try(etsmodel(y, errortype[i], trendtype[j],  

 Call:
                     seasontype[k], damped[l], alpha, beta, gamma,  

 Call:
                     phi, lower = lower, upper = upper, opt.crit = opt.crit,  

 Call:
                     nmse = nmse, bounds = bounds, ...), silent = TRUE) 

 Call:
                   if (is.element("try-error", class(fit)))  

 Call:
                     fit.ic <- Inf 

 Call:
                   else fit.ic <- switch(ic, aic = fit$aic, bic = fit$bic,  

 Call:
                     aicc = fit$aicc) 

 Call:
                   if (!is.na(fit.ic)) { 

 Call:
                     if (fit.ic < best.ic) { 

 Call:
                       model <- fit 

 Call:
                       best.ic <- fit.ic 

 Call:
                       best.e <- errortype[i] 

 Call:
                       best.t <- trendtype[j] 

 Call:
                       best.s <- seasontype[k] 

 Call:
                       best.d <- damped[l] 

 Call:
                     } 

 Call:
                   } 

 Call:
                 } 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     if (best.ic == Inf) { 

 Call:
         stop("No model able to be fitted") 

 Call:
     } 

 Call:
     model$m <- m 

 Call:
     model$method <- paste("ETS(", best.e, ",", best.t, ifelse(best.d,  

 Call:
         "d", ""), ",", best.s, ")", sep = "") 

 Call:
     model$series <- seriesname 

 Call:
     model$components <- c(best.e, best.t, best.s, best.d) 

 Call:
     model$call <- match.call() 

 Call:
     model$initstate <- model$states[1, ] 

 Call:
     np <- length(model$par) 

 Call:
     model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
         np) 

 Call:
     model$x <- orig.y 

 Call:
     if (!is.null(lambda)) { 

 Call:
         model$fitted <- InvBoxCox(model$fitted, lambda, biasadj,  

 Call:
             var(model$residuals)) 

 Call:
         attr(lambda, "biasadj") <- biasadj 

 Call:
     } 

 Call:
     model$lambda <- lambda 

 Call:
     return(structure(model, class = "ets")) 

 Call:
 })(y = structure(c(1.4775677629652, 1.4775677629652, 1.46891950473273,  

 Call:
 1.45162298826779, 1.44297473003532, 1.44297473003532, 1.3651404059431,  

 Call:
 1.41702995533791, 1.40838169710544, 1.39108518064051, 1.39973343887297,  

 Call:
 1.3651404059431, 1.39108518064051, 1.39108518064051, 1.39108518064051,  

 Call:
 1.39108518064051, 1.42567821357038, 1.43432647180285, 1.43432647180285,  

 Call:
 1.43432647180285, 1.41702995533791, 1.42567821357038, 1.43432647180285,  

 Call:
 1.42567821357038, 1.40838169710544, 1.40838169710544, 1.39973343887297,  

 Call:
 1.39108518064051, 1.39108518064051, 1.39108518064051, 1.39108518064051,  

 Call:
 1.37378866417557, 1.38243692240804, 0.733817554972863, -0.719089828081926,  

 Call:
 -0.727738086314395, -0.693145053384519, -0.710441569849457, -0.753682861011801,  

 Call:
 -0.710441569849457, -0.76233111924427, -0.719089828081926, -0.710441569849457,  

 Call:
 -0.710441569849457, -0.710441569849457, -0.710441569849457, -0.719089828081926,  

 Call:
 -0.710441569849457, -0.710441569849457, -0.710441569849457, -0.710441569849457,  

 Call:
 -0.719089828081926, -0.710441569849457, -0.710441569849457, -0.719089828081926,  

 Call:
 -0.719089828081926, -0.710441569849457, -0.710441569849457, -0.719089828081926,  

 Call:
 -0.710441569849457, -0.710441569849457, -0.719089828081926, -0.710441569849457,  

 Call:
 -0.710441569849457, -0.710441569849457, -0.719089828081926, -0.710441569849457,  

 Call:
 -0.710441569849457, -0.710441569849457, -0.710441569849457, -0.710441569849457,  

 Call:
 -0.701793311616988, -0.701793311616988, -0.701793311616988, -0.701793311616988,  

 Call:
 -0.701793311616988, -0.701793311616988, -0.701793311616988, -0.701793311616988,  

 Call:
 -0.701793311616988, -0.693145053384519, -0.701793311616988, -0.701793311616988,  

 Call:
 -0.710441569849457, -0.736386344546863, -0.710441569849457, -0.693145053384519,  

 Call:
 -0.693145053384519, -0.68449679515205, -0.68449679515205, -0.68449679515205,  

 Call:
 -0.68449679515205, -0.68449679515205, -0.68449679515205, -0.68449679515205,  

 Call:
 -0.68449679515205, -0.68449679515205, -0.693145053384519, -0.693145053384519,  

 Call:
 -0.701793311616988, -0.710441569849457), .Tsp = c(1, 101, 1), class = "ts")) 

  Smoothing parameters:
    alpha = 0.9999 

  Initial states:
    l = 1.4777 

  sigma:  0.1608

     AIC     AICc      BIC 
100.9036 101.1510 108.7490 

$modelList$model2
ETS(A,N,N) 

Call:
 (function (y, model = "ZZZ", damped = NULL, alpha = NULL, beta = NULL,  

 Call:
     gamma = NULL, phi = NULL, additive.only = FALSE, lambda = NULL,  

 Call:
     biasadj = FALSE, lower = c(rep(1e-04, 3), 0.8), upper = c(rep(0.9999,  

 Call:
         3), 0.98), opt.crit = c("lik", "amse", "mse", "sigma",  

 Call:
         "mae"), nmse = 3, bounds = c("both", "usual", "admissible"),  

 Call:
     ic = c("aicc", "aic", "bic"), restrict = TRUE, allow.multiplicative.trend = FALSE,  

 Call:
     use.initial.values = FALSE, na.action = c("na.contiguous",  

 Call:
         "na.interp", "na.fail"), ...)  

 Call:
 { 

 Call:
     opt.crit <- match.arg(opt.crit) 

 Call:
     bounds <- match.arg(bounds) 

 Call:
     ic <- match.arg(ic) 

 Call:
     if (!is.function(na.action)) { 

 Call:
         na.fn_name <- match.arg(na.action) 

 Call:
         na.action <- get(na.fn_name) 

 Call:
     } 

 Call:
     seriesname <- deparse(substitute(y)) 

 Call:
     if (any(class(y) %in% c("data.frame", "list", "matrix", "mts"))) { 

 Call:
         stop("y should be a univariate time series") 

 Call:
     } 

 Call:
     y <- as.ts(y) 

 Call:
     if (missing(model) && is.constant(y)) { 

 Call:
         return(ses(y, alpha = 0.99999, initial = "simple")$model) 

 Call:
     } 

 Call:
     ny <- length(y) 

 Call:
     y <- na.action(y) 

 Call:
     if (ny != length(y) && na.fn_name == "na.contiguous") { 

 Call:
         warning("Missing values encountered. Using longest contiguous portion of time series") 

 Call:
         ny <- length(y) 

 Call:
     } 

 Call:
     orig.y <- y 

 Call:
     if (identical(class(model), "ets") && is.null(lambda)) { 

 Call:
         lambda <- model$lambda 

 Call:
     } 

 Call:
     if (!is.null(lambda)) { 

 Call:
         y <- BoxCox(y, lambda) 

 Call:
         lambda <- attr(y, "lambda") 

 Call:
         additive.only <- TRUE 

 Call:
     } 

 Call:
     if (nmse < 1 || nmse > 30) { 

 Call:
         stop("nmse out of range") 

 Call:
     } 

 Call:
     m <- frequency(y) 

 Call:
     if (any(upper < lower)) { 

 Call:
         stop("Lower limits must be less than upper limits") 

 Call:
     } 

 Call:
     if (class(model) == "ets") { 

 Call:
         alpha <- max(model$par["alpha"], 1e-10) 

 Call:
         beta <- model$par["beta"] 

 Call:
         if (is.na(beta)) { 

 Call:
             beta <- NULL 

 Call:
         } 

 Call:
         gamma <- model$par["gamma"] 

 Call:
         if (is.na(gamma)) { 

 Call:
             gamma <- NULL 

 Call:
         } 

 Call:
         phi <- model$par["phi"] 

 Call:
         if (is.na(phi)) { 

 Call:
             phi <- NULL 

 Call:
         } 

 Call:
         modelcomponents <- paste(model$components[1], model$components[2],  

 Call:
             model$components[3], sep = "") 

 Call:
         damped <- (model$components[4] == "TRUE") 

 Call:
         if (use.initial.values) { 

 Call:
             errortype <- substr(modelcomponents, 1, 1) 

 Call:
             trendtype <- substr(modelcomponents, 2, 2) 

 Call:
             seasontype <- substr(modelcomponents, 3, 3) 

 Call:
             e <- pegelsresid.C(y, m, model$initstate, errortype,  

 Call:
                 trendtype, seasontype, damped, alpha, beta, gamma,  

 Call:
                 phi, nmse) 

 Call:
             np <- length(model$par) + 1 

 Call:
             model$loglik <- -0.5 * e$lik 

 Call:
             model$aic <- e$lik + 2 * np 

 Call:
             model$bic <- e$lik + log(ny) * np 

 Call:
             model$aicc <- model$aic + 2 * np * (np + 1)/(ny -  

 Call:
                 np - 1) 

 Call:
             model$mse <- e$amse[1] 

 Call:
             model$amse <- mean(e$amse) 

 Call:
             tsp.y <- tsp(y) 

 Call:
             model$states <- ts(e$states, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1] - 1/tsp.y[3]) 

 Call:
             colnames(model$states)[1] <- "l" 

 Call:
             if (trendtype != "N") { 

 Call:
                 colnames(model$states)[2] <- "b" 

 Call:
             } 

 Call:
             if (seasontype != "N") { 

 Call:
                 colnames(model$states)[(2 + (trendtype != "N")):ncol(model$states)] <- paste("s",  

 Call:
                   1:m, sep = "") 

 Call:
             } 

 Call:
             if (errortype == "A") { 

 Call:
                 model$fitted <- ts(y - e$e, frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             else { 

 Call:
                 model$fitted <- ts(y/(1 + e$e), frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             model$residuals <- ts(e$e, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1]) 

 Call:
             model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
                 np) 

 Call:
             model$x <- orig.y 

 Call:
             model$series <- seriesname 

 Call:
             if (!is.null(lambda)) { 

 Call:
                 model$fitted <- InvBoxCox(model$fitted, lambda,  

 Call:
                   biasadj, var(model$residuals)) 

 Call:
                 attr(lambda, "biasadj") <- biasadj 

 Call:
             } 

 Call:
             model$lambda <- lambda 

 Call:
             return(model) 

 Call:
         } 

 Call:
         else { 

 Call:
             model <- modelcomponents 

 Call:
             if (missing(use.initial.values)) { 

 Call:
                 message("Model is being refit with current smoothing parameters but initial states are being re-estimated.\nSet 'use.initial.values=TRUE' if you want to re-use existing initial values.") 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     errortype <- substr(model, 1, 1) 

 Call:
     trendtype <- substr(model, 2, 2) 

 Call:
     seasontype <- substr(model, 3, 3) 

 Call:
     if (!is.element(errortype, c("M", "A", "Z"))) { 

 Call:
         stop("Invalid error type") 

 Call:
     } 

 Call:
     if (!is.element(trendtype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid trend type") 

 Call:
     } 

 Call:
     if (!is.element(seasontype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid season type") 

 Call:
     } 

 Call:
     if (m < 1 || length(y) <= m) { 

 Call:
         seasontype <- "N" 

 Call:
     } 

 Call:
     if (m == 1) { 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             stop("Nonseasonal data") 

 Call:
         } 

 Call:
         else { 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (m > 24) { 

 Call:
         if (is.element(seasontype, c("A", "M"))) { 

 Call:
             stop("Frequency too high") 

 Call:
         } 

 Call:
         else if (seasontype == "Z") { 

 Call:
             warning("I can't handle data with frequency greater than 24. Seasonality will be ignored. Try stlf() if you need seasonal forecasts.") 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (restrict) { 

 Call:
         if ((errortype == "A" && (trendtype == "M" || seasontype ==  

 Call:
             "M")) | (errortype == "M" && trendtype == "M" &&  

 Call:
             seasontype == "A") || (additive.only && (errortype ==  

 Call:
             "M" || trendtype == "M" || seasontype == "M"))) { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     data.positive <- (min(y) > 0) 

 Call:
     if (!data.positive && errortype == "M") { 

 Call:
         stop("Inappropriate model for data with negative or zero values") 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         if (damped && trendtype == "N") { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     n <- length(y) 

 Call:
     npars <- 2L 

 Call:
     if (trendtype == "A" || trendtype == "M") { 

 Call:
         npars <- npars + 2L 

 Call:
     } 

 Call:
     if (seasontype == "A" || seasontype == "M") { 

 Call:
         npars <- npars + m 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         npars <- npars + as.numeric(damped) 

 Call:
     } 

 Call:
     if (n <= npars + 4L) { 

 Call:
         if (!is.null(damped)) { 

 Call:
             if (damped) { 

 Call:
                 warning("Not enough data to use damping") 

 Call:
             } 

 Call:
         } 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = gamma, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), seasonal = ifelse(seasontype != "A",  

 Call:
                   "multiplicative", "additive"), lambda = lambda,  

 Call:
                 biasadj = biasadj, warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Seasonal component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "A" || trendtype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
                 silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Trend component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "N" && seasontype == "N") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
                 gamma = FALSE, lambda = lambda, biasadj = biasadj,  

 Call:
                 warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
         } 

 Call:
         fit1 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         fit2 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         if ("try-error" %in% class(fit1)) { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         else if (fit1$sigma2 < fit2$sigma2) { 

 Call:
             fit <- fit1 

 Call:
         } 

 Call:
         else { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         if ("try-error" %in% class(fit))  

 Call:
             stop("Unable to estimate a model.") 

 Call:
         fit$call <- match.call() 

 Call:
         fit$method <- as.character(fit) 

 Call:
         fit$series <- deparse(substitute(y)) 

 Call:
         return(fit) 

 Call:
     } 

 Call:
     if (errortype == "Z") { 

 Call:
         errortype <- c("A", "M") 

 Call:
     } 

 Call:
     if (trendtype == "Z") { 

 Call:
         if (allow.multiplicative.trend) { 

 Call:
             trendtype <- c("N", "A", "M") 

 Call:
         } 

 Call:
         else { 

 Call:
             trendtype <- c("N", "A") 

 Call:
         } 

 Call:
     } 

 Call:
     if (seasontype == "Z") { 

 Call:
         seasontype <- c("N", "A", "M") 

 Call:
     } 

 Call:
     if (is.null(damped)) { 

 Call:
         damped <- c(TRUE, FALSE) 

 Call:
     } 

 Call:
     best.ic <- Inf 

 Call:
     for (i in 1:length(errortype)) { 

 Call:
         for (j in 1:length(trendtype)) { 

 Call:
             for (k in 1:length(seasontype)) { 

 Call:
                 for (l in 1:length(damped)) { 

 Call:
                   if (trendtype[j] == "N" && damped[l]) { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   if (restrict) { 

 Call:
                     if (errortype[i] == "A" && (trendtype[j] ==  

 Call:
                       "M" || seasontype[k] == "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (errortype[i] == "M" && trendtype[j] ==  

 Call:
                       "M" && seasontype[k] == "A") { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (additive.only && (errortype[i] == "M" ||  

 Call:
                       trendtype[j] == "M" || seasontype[k] ==  

 Call:
                       "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                   } 

 Call:
                   if (!data.positive && errortype[i] == "M") { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   fit <- try(etsmodel(y, errortype[i], trendtype[j],  

 Call:
                     seasontype[k], damped[l], alpha, beta, gamma,  

 Call:
                     phi, lower = lower, upper = upper, opt.crit = opt.crit,  

 Call:
                     nmse = nmse, bounds = bounds, ...), silent = TRUE) 

 Call:
                   if (is.element("try-error", class(fit)))  

 Call:
                     fit.ic <- Inf 

 Call:
                   else fit.ic <- switch(ic, aic = fit$aic, bic = fit$bic,  

 Call:
                     aicc = fit$aicc) 

 Call:
                   if (!is.na(fit.ic)) { 

 Call:
                     if (fit.ic < best.ic) { 

 Call:
                       model <- fit 

 Call:
                       best.ic <- fit.ic 

 Call:
                       best.e <- errortype[i] 

 Call:
                       best.t <- trendtype[j] 

 Call:
                       best.s <- seasontype[k] 

 Call:
                       best.d <- damped[l] 

 Call:
                     } 

 Call:
                   } 

 Call:
                 } 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     if (best.ic == Inf) { 

 Call:
         stop("No model able to be fitted") 

 Call:
     } 

 Call:
     model$m <- m 

 Call:
     model$method <- paste("ETS(", best.e, ",", best.t, ifelse(best.d,  

 Call:
         "d", ""), ",", best.s, ")", sep = "") 

 Call:
     model$series <- seriesname 

 Call:
     model$components <- c(best.e, best.t, best.s, best.d) 

 Call:
     model$call <- match.call() 

 Call:
     model$initstate <- model$states[1, ] 

 Call:
     np <- length(model$par) 

 Call:
     model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
         np) 

 Call:
     model$x <- orig.y 

 Call:
     if (!is.null(lambda)) { 

 Call:
         model$fitted <- InvBoxCox(model$fitted, lambda, biasadj,  

 Call:
             var(model$residuals)) 

 Call:
         attr(lambda, "biasadj") <- biasadj 

 Call:
     } 

 Call:
     model$lambda <- lambda 

 Call:
     return(structure(model, class = "ets")) 

 Call:
 })(y = structure(c(-1.14056522349026, -1.19500619115212, -0.432832643885952,  

 Call:
 -0.841139901349974, -0.65059651453343, -0.950021836673713, -0.950021836673713,  

 Call:
 -1.3311086103068, -1.3311086103068, -1.16778570732119, -1.08612425582839,  

 Call:
 -0.623376030702496, 0.32934090338022, 0.247679451887416, 0.302120419549286,  

 Call:
 -0.541714579209691, -0.051745870252866, 0.274899935718351, 0.220458968056481,  

 Call:
 0.00269509740900344, -0.051745870252866, -0.487273611547822,  

 Call:
 -1.05890377199745, -0.813919417519039, -1.60331344861614, -0.950021836673713,  

 Call:
 -1.43999054563054, -1.65775441627801, -0.596155546871561, -1.87551828692549,  

 Call:
 -1.19500619115212, -1.11334473965932, -1.27666764264493, 0.0843565489018077,  

 Call:
 0.111577032732742, 0.683207193182371, -0.106186837914736, 0.38378187104209,  

 Call:
 0.138797516563677, 0.547104774027697, 1.22761686980107, 0.655986709351436,  

 Call:
 0.492663806365829, -0.323950708562213, 0.73764816084424, 0.356561387211155,  

 Call:
 -0.432832643885952, 0.220458968056481, -0.977242320504647, -0.677816998364365,  

 Call:
 -0.813919417519039, -0.269509740900344, -0.323950708562213, 0.138797516563677,  

 Call:
 1.36371928895574, 1.06429396681546, 1.47260122427948, 1.9625699332363,  

 Call:
 2.31643622303845, 1.58148315960322, 1.71758557875789, 1.1731759021392,  

 Call:
 1.49982170811041, 1.7992470302507, 1.47260122427948, 1.06429396681546,  

 Call:
 1.39093977278667, 1.06429396681546, 0.764868644675175, 0.519884290196762,  

 Call:
 1.1731759021392, 0.710427677013305, 1.49982170811041, 1.39093977278667,  

 Call:
 0.193238484225547, -0.269509740900344, 0.764868644675175, 0.465443322534894,  

 Call:
 0.0299155812399382, 0.683207193182371, 0.846530096167979, 1.58148315960322,  

 Call:
 0.547104774027697, 1.71758557875789, -0.460053127716887, -0.487273611547822,  

 Call:
 0.438222838703959, 0.00269509740900344, 0.819309612337044, -0.215068773238475,  

 Call:
 -0.0789663540838008, -0.759478449857169, -0.514494095378757,  

 Call:
 -0.813919417519039, -0.841139901349974, -0.215068773238475, -1.35832909413773,  

 Call:
 -1.22222667498306, -1.54887248095428, -1.54887248095428, -1.57609296478521 

 Call:
 ), .Tsp = c(1, 101, 1), class = "ts")) 

  Smoothing parameters:
    alpha = 0.617 

  Initial states:
    l = -1.072 

  sigma:  0.5783

     AIC     AICc      BIC 
359.4899 359.7373 367.3353 

$modelList$model3
ETS(A,Ad,N) 

Call:
 (function (y, model = "ZZZ", damped = NULL, alpha = NULL, beta = NULL,  

 Call:
     gamma = NULL, phi = NULL, additive.only = FALSE, lambda = NULL,  

 Call:
     biasadj = FALSE, lower = c(rep(1e-04, 3), 0.8), upper = c(rep(0.9999,  

 Call:
         3), 0.98), opt.crit = c("lik", "amse", "mse", "sigma",  

 Call:
         "mae"), nmse = 3, bounds = c("both", "usual", "admissible"),  

 Call:
     ic = c("aicc", "aic", "bic"), restrict = TRUE, allow.multiplicative.trend = FALSE,  

 Call:
     use.initial.values = FALSE, na.action = c("na.contiguous",  

 Call:
         "na.interp", "na.fail"), ...)  

 Call:
 { 

 Call:
     opt.crit <- match.arg(opt.crit) 

 Call:
     bounds <- match.arg(bounds) 

 Call:
     ic <- match.arg(ic) 

 Call:
     if (!is.function(na.action)) { 

 Call:
         na.fn_name <- match.arg(na.action) 

 Call:
         na.action <- get(na.fn_name) 

 Call:
     } 

 Call:
     seriesname <- deparse(substitute(y)) 

 Call:
     if (any(class(y) %in% c("data.frame", "list", "matrix", "mts"))) { 

 Call:
         stop("y should be a univariate time series") 

 Call:
     } 

 Call:
     y <- as.ts(y) 

 Call:
     if (missing(model) && is.constant(y)) { 

 Call:
         return(ses(y, alpha = 0.99999, initial = "simple")$model) 

 Call:
     } 

 Call:
     ny <- length(y) 

 Call:
     y <- na.action(y) 

 Call:
     if (ny != length(y) && na.fn_name == "na.contiguous") { 

 Call:
         warning("Missing values encountered. Using longest contiguous portion of time series") 

 Call:
         ny <- length(y) 

 Call:
     } 

 Call:
     orig.y <- y 

 Call:
     if (identical(class(model), "ets") && is.null(lambda)) { 

 Call:
         lambda <- model$lambda 

 Call:
     } 

 Call:
     if (!is.null(lambda)) { 

 Call:
         y <- BoxCox(y, lambda) 

 Call:
         lambda <- attr(y, "lambda") 

 Call:
         additive.only <- TRUE 

 Call:
     } 

 Call:
     if (nmse < 1 || nmse > 30) { 

 Call:
         stop("nmse out of range") 

 Call:
     } 

 Call:
     m <- frequency(y) 

 Call:
     if (any(upper < lower)) { 

 Call:
         stop("Lower limits must be less than upper limits") 

 Call:
     } 

 Call:
     if (class(model) == "ets") { 

 Call:
         alpha <- max(model$par["alpha"], 1e-10) 

 Call:
         beta <- model$par["beta"] 

 Call:
         if (is.na(beta)) { 

 Call:
             beta <- NULL 

 Call:
         } 

 Call:
         gamma <- model$par["gamma"] 

 Call:
         if (is.na(gamma)) { 

 Call:
             gamma <- NULL 

 Call:
         } 

 Call:
         phi <- model$par["phi"] 

 Call:
         if (is.na(phi)) { 

 Call:
             phi <- NULL 

 Call:
         } 

 Call:
         modelcomponents <- paste(model$components[1], model$components[2],  

 Call:
             model$components[3], sep = "") 

 Call:
         damped <- (model$components[4] == "TRUE") 

 Call:
         if (use.initial.values) { 

 Call:
             errortype <- substr(modelcomponents, 1, 1) 

 Call:
             trendtype <- substr(modelcomponents, 2, 2) 

 Call:
             seasontype <- substr(modelcomponents, 3, 3) 

 Call:
             e <- pegelsresid.C(y, m, model$initstate, errortype,  

 Call:
                 trendtype, seasontype, damped, alpha, beta, gamma,  

 Call:
                 phi, nmse) 

 Call:
             np <- length(model$par) + 1 

 Call:
             model$loglik <- -0.5 * e$lik 

 Call:
             model$aic <- e$lik + 2 * np 

 Call:
             model$bic <- e$lik + log(ny) * np 

 Call:
             model$aicc <- model$aic + 2 * np * (np + 1)/(ny -  

 Call:
                 np - 1) 

 Call:
             model$mse <- e$amse[1] 

 Call:
             model$amse <- mean(e$amse) 

 Call:
             tsp.y <- tsp(y) 

 Call:
             model$states <- ts(e$states, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1] - 1/tsp.y[3]) 

 Call:
             colnames(model$states)[1] <- "l" 

 Call:
             if (trendtype != "N") { 

 Call:
                 colnames(model$states)[2] <- "b" 

 Call:
             } 

 Call:
             if (seasontype != "N") { 

 Call:
                 colnames(model$states)[(2 + (trendtype != "N")):ncol(model$states)] <- paste("s",  

 Call:
                   1:m, sep = "") 

 Call:
             } 

 Call:
             if (errortype == "A") { 

 Call:
                 model$fitted <- ts(y - e$e, frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             else { 

 Call:
                 model$fitted <- ts(y/(1 + e$e), frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             model$residuals <- ts(e$e, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1]) 

 Call:
             model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
                 np) 

 Call:
             model$x <- orig.y 

 Call:
             model$series <- seriesname 

 Call:
             if (!is.null(lambda)) { 

 Call:
                 model$fitted <- InvBoxCox(model$fitted, lambda,  

 Call:
                   biasadj, var(model$residuals)) 

 Call:
                 attr(lambda, "biasadj") <- biasadj 

 Call:
             } 

 Call:
             model$lambda <- lambda 

 Call:
             return(model) 

 Call:
         } 

 Call:
         else { 

 Call:
             model <- modelcomponents 

 Call:
             if (missing(use.initial.values)) { 

 Call:
                 message("Model is being refit with current smoothing parameters but initial states are being re-estimated.\nSet 'use.initial.values=TRUE' if you want to re-use existing initial values.") 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     errortype <- substr(model, 1, 1) 

 Call:
     trendtype <- substr(model, 2, 2) 

 Call:
     seasontype <- substr(model, 3, 3) 

 Call:
     if (!is.element(errortype, c("M", "A", "Z"))) { 

 Call:
         stop("Invalid error type") 

 Call:
     } 

 Call:
     if (!is.element(trendtype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid trend type") 

 Call:
     } 

 Call:
     if (!is.element(seasontype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid season type") 

 Call:
     } 

 Call:
     if (m < 1 || length(y) <= m) { 

 Call:
         seasontype <- "N" 

 Call:
     } 

 Call:
     if (m == 1) { 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             stop("Nonseasonal data") 

 Call:
         } 

 Call:
         else { 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (m > 24) { 

 Call:
         if (is.element(seasontype, c("A", "M"))) { 

 Call:
             stop("Frequency too high") 

 Call:
         } 

 Call:
         else if (seasontype == "Z") { 

 Call:
             warning("I can't handle data with frequency greater than 24. Seasonality will be ignored. Try stlf() if you need seasonal forecasts.") 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (restrict) { 

 Call:
         if ((errortype == "A" && (trendtype == "M" || seasontype ==  

 Call:
             "M")) | (errortype == "M" && trendtype == "M" &&  

 Call:
             seasontype == "A") || (additive.only && (errortype ==  

 Call:
             "M" || trendtype == "M" || seasontype == "M"))) { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     data.positive <- (min(y) > 0) 

 Call:
     if (!data.positive && errortype == "M") { 

 Call:
         stop("Inappropriate model for data with negative or zero values") 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         if (damped && trendtype == "N") { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     n <- length(y) 

 Call:
     npars <- 2L 

 Call:
     if (trendtype == "A" || trendtype == "M") { 

 Call:
         npars <- npars + 2L 

 Call:
     } 

 Call:
     if (seasontype == "A" || seasontype == "M") { 

 Call:
         npars <- npars + m 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         npars <- npars + as.numeric(damped) 

 Call:
     } 

 Call:
     if (n <= npars + 4L) { 

 Call:
         if (!is.null(damped)) { 

 Call:
             if (damped) { 

 Call:
                 warning("Not enough data to use damping") 

 Call:
             } 

 Call:
         } 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = gamma, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), seasonal = ifelse(seasontype != "A",  

 Call:
                   "multiplicative", "additive"), lambda = lambda,  

 Call:
                 biasadj = biasadj, warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Seasonal component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "A" || trendtype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
                 silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Trend component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "N" && seasontype == "N") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
                 gamma = FALSE, lambda = lambda, biasadj = biasadj,  

 Call:
                 warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
         } 

 Call:
         fit1 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         fit2 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         if ("try-error" %in% class(fit1)) { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         else if (fit1$sigma2 < fit2$sigma2) { 

 Call:
             fit <- fit1 

 Call:
         } 

 Call:
         else { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         if ("try-error" %in% class(fit))  

 Call:
             stop("Unable to estimate a model.") 

 Call:
         fit$call <- match.call() 

 Call:
         fit$method <- as.character(fit) 

 Call:
         fit$series <- deparse(substitute(y)) 

 Call:
         return(fit) 

 Call:
     } 

 Call:
     if (errortype == "Z") { 

 Call:
         errortype <- c("A", "M") 

 Call:
     } 

 Call:
     if (trendtype == "Z") { 

 Call:
         if (allow.multiplicative.trend) { 

 Call:
             trendtype <- c("N", "A", "M") 

 Call:
         } 

 Call:
         else { 

 Call:
             trendtype <- c("N", "A") 

 Call:
         } 

 Call:
     } 

 Call:
     if (seasontype == "Z") { 

 Call:
         seasontype <- c("N", "A", "M") 

 Call:
     } 

 Call:
     if (is.null(damped)) { 

 Call:
         damped <- c(TRUE, FALSE) 

 Call:
     } 

 Call:
     best.ic <- Inf 

 Call:
     for (i in 1:length(errortype)) { 

 Call:
         for (j in 1:length(trendtype)) { 

 Call:
             for (k in 1:length(seasontype)) { 

 Call:
                 for (l in 1:length(damped)) { 

 Call:
                   if (trendtype[j] == "N" && damped[l]) { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   if (restrict) { 

 Call:
                     if (errortype[i] == "A" && (trendtype[j] ==  

 Call:
                       "M" || seasontype[k] == "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (errortype[i] == "M" && trendtype[j] ==  

 Call:
                       "M" && seasontype[k] == "A") { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (additive.only && (errortype[i] == "M" ||  

 Call:
                       trendtype[j] == "M" || seasontype[k] ==  

 Call:
                       "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                   } 

 Call:
                   if (!data.positive && errortype[i] == "M") { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   fit <- try(etsmodel(y, errortype[i], trendtype[j],  

 Call:
                     seasontype[k], damped[l], alpha, beta, gamma,  

 Call:
                     phi, lower = lower, upper = upper, opt.crit = opt.crit,  

 Call:
                     nmse = nmse, bounds = bounds, ...), silent = TRUE) 

 Call:
                   if (is.element("try-error", class(fit)))  

 Call:
                     fit.ic <- Inf 

 Call:
                   else fit.ic <- switch(ic, aic = fit$aic, bic = fit$bic,  

 Call:
                     aicc = fit$aicc) 

 Call:
                   if (!is.na(fit.ic)) { 

 Call:
                     if (fit.ic < best.ic) { 

 Call:
                       model <- fit 

 Call:
                       best.ic <- fit.ic 

 Call:
                       best.e <- errortype[i] 

 Call:
                       best.t <- trendtype[j] 

 Call:
                       best.s <- seasontype[k] 

 Call:
                       best.d <- damped[l] 

 Call:
                     } 

 Call:
                   } 

 Call:
                 } 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     if (best.ic == Inf) { 

 Call:
         stop("No model able to be fitted") 

 Call:
     } 

 Call:
     model$m <- m 

 Call:
     model$method <- paste("ETS(", best.e, ",", best.t, ifelse(best.d,  

 Call:
         "d", ""), ",", best.s, ")", sep = "") 

 Call:
     model$series <- seriesname 

 Call:
     model$components <- c(best.e, best.t, best.s, best.d) 

 Call:
     model$call <- match.call() 

 Call:
     model$initstate <- model$states[1, ] 

 Call:
     np <- length(model$par) 

 Call:
     model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
         np) 

 Call:
     model$x <- orig.y 

 Call:
     if (!is.null(lambda)) { 

 Call:
         model$fitted <- InvBoxCox(model$fitted, lambda, biasadj,  

 Call:
             var(model$residuals)) 

 Call:
         attr(lambda, "biasadj") <- biasadj 

 Call:
     } 

 Call:
     model$lambda <- lambda 

 Call:
     return(structure(model, class = "ets")) 

 Call:
 })(y = structure(c(-0.916817576991003, -0.916817576991003, -0.916817576991003,  

 Call:
 -0.73805584865877, -0.559294120326553, -0.559294120326553, -0.380532391994336,  

 Call:
 -0.380532391994336, -0.201770663662119, -0.201770663662119, -0.201770663662119,  

 Call:
 -0.201770663662119, -0.0230089353298859, -0.201770663662119,  

 Call:
 -0.0230089353298859, -0.201770663662119, -0.201770663662119,  

 Call:
 -0.559294120326553, -0.559294120326553, -0.380532391994336, -0.380532391994336,  

 Call:
 -0.201770663662119, -0.0230089353298859, -0.0230089353298859,  

 Call:
 0.155752793002331, 0.334514521334548, 0.513276249666765, 0.513276249666765,  

 Call:
 0.870799706331215, 0.870799706331215, 0.870799706331215, 0.692037977998998,  

 Call:
 0.870799706331215, 0.692037977998998, 0.870799706331215, 0.870799706331215,  

 Call:
 0.870799706331215, 1.04956143466343, 1.04956143466343, 1.22832316299565,  

 Call:
 1.22832316299565, 1.22832316299565, 1.40708489132788, 1.5858466196601,  

 Call:
 1.5858466196601, 1.76460834799232, 1.76460834799232, 1.94337007632453,  

 Call:
 1.76460834799232, 1.94337007632453, 1.76460834799232, 1.76460834799232,  

 Call:
 1.5858466196601, 1.22832316299565, 0.870799706331215, 0.692037977998998,  

 Call:
 0.513276249666765, 0.513276249666765, 0.334514521334548, 0.513276249666765,  

 Call:
 0.513276249666765, 0.513276249666765, 0.334514521334548, 0.155752793002331,  

 Call:
 -0.0230089353298859, -0.0230089353298859, -0.201770663662119,  

 Call:
 -0.201770663662119, -0.380532391994336, -0.380532391994336, -0.380532391994336,  

 Call:
 -0.559294120326553, -0.559294120326553, -0.559294120326553, -0.380532391994336,  

 Call:
 -0.380532391994336, -0.380532391994336, -0.201770663662119, -0.201770663662119,  

 Call:
 -0.380532391994336, -0.201770663662119, -0.201770663662119, -0.201770663662119,  

 Call:
 -0.201770663662119, -0.201770663662119, -0.380532391994336, -0.73805584865877,  

 Call:
 -1.09557930532322, -1.27434103365544, -1.27434103365544, -1.27434103365544,  

 Call:
 -1.45310276198765, -1.63186449031989, -1.98938794698432, -1.98938794698432,  

 Call:
 -1.8106262186521, -1.8106262186521, -1.98938794698432, -1.98938794698432,  

 Call:
 -1.98938794698432, -1.98938794698432), .Tsp = c(1, 101, 1), class = "ts")) 

  Smoothing parameters:
    alpha = 0.8418 
    beta  = 0.407 
    phi   = 0.8 

  Initial states:
    l = -0.9775 
    b = 0.0484 

  sigma:  0.1476

      AIC      AICc       BIC 
 86.48129  87.37491 102.17201 

$modelList$model4
ETS(A,Ad,N) 

Call:
 (function (y, model = "ZZZ", damped = NULL, alpha = NULL, beta = NULL,  

 Call:
     gamma = NULL, phi = NULL, additive.only = FALSE, lambda = NULL,  

 Call:
     biasadj = FALSE, lower = c(rep(1e-04, 3), 0.8), upper = c(rep(0.9999,  

 Call:
         3), 0.98), opt.crit = c("lik", "amse", "mse", "sigma",  

 Call:
         "mae"), nmse = 3, bounds = c("both", "usual", "admissible"),  

 Call:
     ic = c("aicc", "aic", "bic"), restrict = TRUE, allow.multiplicative.trend = FALSE,  

 Call:
     use.initial.values = FALSE, na.action = c("na.contiguous",  

 Call:
         "na.interp", "na.fail"), ...)  

 Call:
 { 

 Call:
     opt.crit <- match.arg(opt.crit) 

 Call:
     bounds <- match.arg(bounds) 

 Call:
     ic <- match.arg(ic) 

 Call:
     if (!is.function(na.action)) { 

 Call:
         na.fn_name <- match.arg(na.action) 

 Call:
         na.action <- get(na.fn_name) 

 Call:
     } 

 Call:
     seriesname <- deparse(substitute(y)) 

 Call:
     if (any(class(y) %in% c("data.frame", "list", "matrix", "mts"))) { 

 Call:
         stop("y should be a univariate time series") 

 Call:
     } 

 Call:
     y <- as.ts(y) 

 Call:
     if (missing(model) && is.constant(y)) { 

 Call:
         return(ses(y, alpha = 0.99999, initial = "simple")$model) 

 Call:
     } 

 Call:
     ny <- length(y) 

 Call:
     y <- na.action(y) 

 Call:
     if (ny != length(y) && na.fn_name == "na.contiguous") { 

 Call:
         warning("Missing values encountered. Using longest contiguous portion of time series") 

 Call:
         ny <- length(y) 

 Call:
     } 

 Call:
     orig.y <- y 

 Call:
     if (identical(class(model), "ets") && is.null(lambda)) { 

 Call:
         lambda <- model$lambda 

 Call:
     } 

 Call:
     if (!is.null(lambda)) { 

 Call:
         y <- BoxCox(y, lambda) 

 Call:
         lambda <- attr(y, "lambda") 

 Call:
         additive.only <- TRUE 

 Call:
     } 

 Call:
     if (nmse < 1 || nmse > 30) { 

 Call:
         stop("nmse out of range") 

 Call:
     } 

 Call:
     m <- frequency(y) 

 Call:
     if (any(upper < lower)) { 

 Call:
         stop("Lower limits must be less than upper limits") 

 Call:
     } 

 Call:
     if (class(model) == "ets") { 

 Call:
         alpha <- max(model$par["alpha"], 1e-10) 

 Call:
         beta <- model$par["beta"] 

 Call:
         if (is.na(beta)) { 

 Call:
             beta <- NULL 

 Call:
         } 

 Call:
         gamma <- model$par["gamma"] 

 Call:
         if (is.na(gamma)) { 

 Call:
             gamma <- NULL 

 Call:
         } 

 Call:
         phi <- model$par["phi"] 

 Call:
         if (is.na(phi)) { 

 Call:
             phi <- NULL 

 Call:
         } 

 Call:
         modelcomponents <- paste(model$components[1], model$components[2],  

 Call:
             model$components[3], sep = "") 

 Call:
         damped <- (model$components[4] == "TRUE") 

 Call:
         if (use.initial.values) { 

 Call:
             errortype <- substr(modelcomponents, 1, 1) 

 Call:
             trendtype <- substr(modelcomponents, 2, 2) 

 Call:
             seasontype <- substr(modelcomponents, 3, 3) 

 Call:
             e <- pegelsresid.C(y, m, model$initstate, errortype,  

 Call:
                 trendtype, seasontype, damped, alpha, beta, gamma,  

 Call:
                 phi, nmse) 

 Call:
             np <- length(model$par) + 1 

 Call:
             model$loglik <- -0.5 * e$lik 

 Call:
             model$aic <- e$lik + 2 * np 

 Call:
             model$bic <- e$lik + log(ny) * np 

 Call:
             model$aicc <- model$aic + 2 * np * (np + 1)/(ny -  

 Call:
                 np - 1) 

 Call:
             model$mse <- e$amse[1] 

 Call:
             model$amse <- mean(e$amse) 

 Call:
             tsp.y <- tsp(y) 

 Call:
             model$states <- ts(e$states, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1] - 1/tsp.y[3]) 

 Call:
             colnames(model$states)[1] <- "l" 

 Call:
             if (trendtype != "N") { 

 Call:
                 colnames(model$states)[2] <- "b" 

 Call:
             } 

 Call:
             if (seasontype != "N") { 

 Call:
                 colnames(model$states)[(2 + (trendtype != "N")):ncol(model$states)] <- paste("s",  

 Call:
                   1:m, sep = "") 

 Call:
             } 

 Call:
             if (errortype == "A") { 

 Call:
                 model$fitted <- ts(y - e$e, frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             else { 

 Call:
                 model$fitted <- ts(y/(1 + e$e), frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             model$residuals <- ts(e$e, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1]) 

 Call:
             model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
                 np) 

 Call:
             model$x <- orig.y 

 Call:
             model$series <- seriesname 

 Call:
             if (!is.null(lambda)) { 

 Call:
                 model$fitted <- InvBoxCox(model$fitted, lambda,  

 Call:
                   biasadj, var(model$residuals)) 

 Call:
                 attr(lambda, "biasadj") <- biasadj 

 Call:
             } 

 Call:
             model$lambda <- lambda 

 Call:
             return(model) 

 Call:
         } 

 Call:
         else { 

 Call:
             model <- modelcomponents 

 Call:
             if (missing(use.initial.values)) { 

 Call:
                 message("Model is being refit with current smoothing parameters but initial states are being re-estimated.\nSet 'use.initial.values=TRUE' if you want to re-use existing initial values.") 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     errortype <- substr(model, 1, 1) 

 Call:
     trendtype <- substr(model, 2, 2) 

 Call:
     seasontype <- substr(model, 3, 3) 

 Call:
     if (!is.element(errortype, c("M", "A", "Z"))) { 

 Call:
         stop("Invalid error type") 

 Call:
     } 

 Call:
     if (!is.element(trendtype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid trend type") 

 Call:
     } 

 Call:
     if (!is.element(seasontype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid season type") 

 Call:
     } 

 Call:
     if (m < 1 || length(y) <= m) { 

 Call:
         seasontype <- "N" 

 Call:
     } 

 Call:
     if (m == 1) { 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             stop("Nonseasonal data") 

 Call:
         } 

 Call:
         else { 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (m > 24) { 

 Call:
         if (is.element(seasontype, c("A", "M"))) { 

 Call:
             stop("Frequency too high") 

 Call:
         } 

 Call:
         else if (seasontype == "Z") { 

 Call:
             warning("I can't handle data with frequency greater than 24. Seasonality will be ignored. Try stlf() if you need seasonal forecasts.") 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (restrict) { 

 Call:
         if ((errortype == "A" && (trendtype == "M" || seasontype ==  

 Call:
             "M")) | (errortype == "M" && trendtype == "M" &&  

 Call:
             seasontype == "A") || (additive.only && (errortype ==  

 Call:
             "M" || trendtype == "M" || seasontype == "M"))) { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     data.positive <- (min(y) > 0) 

 Call:
     if (!data.positive && errortype == "M") { 

 Call:
         stop("Inappropriate model for data with negative or zero values") 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         if (damped && trendtype == "N") { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     n <- length(y) 

 Call:
     npars <- 2L 

 Call:
     if (trendtype == "A" || trendtype == "M") { 

 Call:
         npars <- npars + 2L 

 Call:
     } 

 Call:
     if (seasontype == "A" || seasontype == "M") { 

 Call:
         npars <- npars + m 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         npars <- npars + as.numeric(damped) 

 Call:
     } 

 Call:
     if (n <= npars + 4L) { 

 Call:
         if (!is.null(damped)) { 

 Call:
             if (damped) { 

 Call:
                 warning("Not enough data to use damping") 

 Call:
             } 

 Call:
         } 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = gamma, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), seasonal = ifelse(seasontype != "A",  

 Call:
                   "multiplicative", "additive"), lambda = lambda,  

 Call:
                 biasadj = biasadj, warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Seasonal component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "A" || trendtype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
                 silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Trend component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "N" && seasontype == "N") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
                 gamma = FALSE, lambda = lambda, biasadj = biasadj,  

 Call:
                 warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
         } 

 Call:
         fit1 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         fit2 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         if ("try-error" %in% class(fit1)) { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         else if (fit1$sigma2 < fit2$sigma2) { 

 Call:
             fit <- fit1 

 Call:
         } 

 Call:
         else { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         if ("try-error" %in% class(fit))  

 Call:
             stop("Unable to estimate a model.") 

 Call:
         fit$call <- match.call() 

 Call:
         fit$method <- as.character(fit) 

 Call:
         fit$series <- deparse(substitute(y)) 

 Call:
         return(fit) 

 Call:
     } 

 Call:
     if (errortype == "Z") { 

 Call:
         errortype <- c("A", "M") 

 Call:
     } 

 Call:
     if (trendtype == "Z") { 

 Call:
         if (allow.multiplicative.trend) { 

 Call:
             trendtype <- c("N", "A", "M") 

 Call:
         } 

 Call:
         else { 

 Call:
             trendtype <- c("N", "A") 

 Call:
         } 

 Call:
     } 

 Call:
     if (seasontype == "Z") { 

 Call:
         seasontype <- c("N", "A", "M") 

 Call:
     } 

 Call:
     if (is.null(damped)) { 

 Call:
         damped <- c(TRUE, FALSE) 

 Call:
     } 

 Call:
     best.ic <- Inf 

 Call:
     for (i in 1:length(errortype)) { 

 Call:
         for (j in 1:length(trendtype)) { 

 Call:
             for (k in 1:length(seasontype)) { 

 Call:
                 for (l in 1:length(damped)) { 

 Call:
                   if (trendtype[j] == "N" && damped[l]) { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   if (restrict) { 

 Call:
                     if (errortype[i] == "A" && (trendtype[j] ==  

 Call:
                       "M" || seasontype[k] == "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (errortype[i] == "M" && trendtype[j] ==  

 Call:
                       "M" && seasontype[k] == "A") { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (additive.only && (errortype[i] == "M" ||  

 Call:
                       trendtype[j] == "M" || seasontype[k] ==  

 Call:
                       "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                   } 

 Call:
                   if (!data.positive && errortype[i] == "M") { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   fit <- try(etsmodel(y, errortype[i], trendtype[j],  

 Call:
                     seasontype[k], damped[l], alpha, beta, gamma,  

 Call:
                     phi, lower = lower, upper = upper, opt.crit = opt.crit,  

 Call:
                     nmse = nmse, bounds = bounds, ...), silent = TRUE) 

 Call:
                   if (is.element("try-error", class(fit)))  

 Call:
                     fit.ic <- Inf 

 Call:
                   else fit.ic <- switch(ic, aic = fit$aic, bic = fit$bic,  

 Call:
                     aicc = fit$aicc) 

 Call:
                   if (!is.na(fit.ic)) { 

 Call:
                     if (fit.ic < best.ic) { 

 Call:
                       model <- fit 

 Call:
                       best.ic <- fit.ic 

 Call:
                       best.e <- errortype[i] 

 Call:
                       best.t <- trendtype[j] 

 Call:
                       best.s <- seasontype[k] 

 Call:
                       best.d <- damped[l] 

 Call:
                     } 

 Call:
                   } 

 Call:
                 } 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     if (best.ic == Inf) { 

 Call:
         stop("No model able to be fitted") 

 Call:
     } 

 Call:
     model$m <- m 

 Call:
     model$method <- paste("ETS(", best.e, ",", best.t, ifelse(best.d,  

 Call:
         "d", ""), ",", best.s, ")", sep = "") 

 Call:
     model$series <- seriesname 

 Call:
     model$components <- c(best.e, best.t, best.s, best.d) 

 Call:
     model$call <- match.call() 

 Call:
     model$initstate <- model$states[1, ] 

 Call:
     np <- length(model$par) 

 Call:
     model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
         np) 

 Call:
     model$x <- orig.y 

 Call:
     if (!is.null(lambda)) { 

 Call:
         model$fitted <- InvBoxCox(model$fitted, lambda, biasadj,  

 Call:
             var(model$residuals)) 

 Call:
         attr(lambda, "biasadj") <- biasadj 

 Call:
     } 

 Call:
     model$lambda <- lambda 

 Call:
     return(structure(model, class = "ets")) 

 Call:
 })(y = structure(c(-0.87450050756237, 0.430145744487852, -1.00496513276738,  

 Call:
 -0.091712756332244, -0.222177381537259, 0.0387518688727708, -1.52682363358748,  

 Call:
 -0.61357125715234, -1.52682363358748, -0.61357125715234, -1.39635900838247,  

 Call:
 -0.744035882357355, -2.04868213440758, -0.87450050756237, -1.78775288399751,  

 Call:
 -0.87450050756237, -0.352642006742273, 0.0387518688727708, -0.352642006742273,  

 Call:
 -0.222177381537259, -0.091712756332244, -0.483106631947288, 0.169216494077823,  

 Call:
 -0.222177381537259, 0.0387518688727708, -0.222177381537259, -0.352642006742273,  

 Call:
 -0.352642006742273, -0.352642006742273, 0.0387518688727708, -0.87450050756237,  

 Call:
 0.169216494077823, -0.61357125715234, 0.299681119282837, 0.560610369692867,  

 Call:
 -0.222177381537259, -0.091712756332244, -1.00496513276738, 0.430145744487852,  

 Call:
 -0.222177381537259, -0.222177381537259, 0.0387518688727708, 0.169216494077823,  

 Call:
 0.430145744487852, 0.169216494077823, 0.691074994897882, -0.352642006742273,  

 Call:
 0.0387518688727708, 0.299681119282837, -0.222177381537259, 0.560610369692867,  

 Call:
 0.169216494077823, 1.34339812092299, 0.299681119282837, 1.60432737133306,  

 Call:
 0.430145744487852, 1.34339812092299, 1.08246887051296, 1.34339812092299,  

 Call:
 0.952004245307948, 0.821539620102933, 0.952004245307948, 0.691074994897882,  

 Call:
 1.47386274612804, 0.691074994897882, 1.21293349571798, 1.21293349571798,  

 Call:
 1.60432737133306, 1.08246887051296, 1.86525662174309, 1.08246887051296,  

 Call:
 2.12618587215316, 0.560610369692867, 1.86525662174309, 0.821539620102933,  

 Call:
 1.86525662174309, 0.952004245307948, 1.34339812092299, 0.691074994897882,  

 Call:
 1.21293349571798, 0.821539620102933, 0.691074994897882, 0.560610369692867,  

 Call:
 -0.091712756332244, 0.169216494077823, -0.352642006742273, 0.821539620102933,  

 Call:
 -1.00496513276738, -0.744035882357355, -0.483106631947288, -1.00496513276738,  

 Call:
 -0.744035882357355, -1.52682363358748, -1.78775288399751, -1.26589438317745,  

 Call:
 -1.6572882587925, -1.1354297579724, -1.26589438317745, -2.57054063522767,  

 Call:
 -2.30961138481761, -1.39635900838247), .Tsp = c(1, 101, 1), class = "ts")) 

  Smoothing parameters:
    alpha = 0.1638 
    beta  = 0.1299 
    phi   = 0.8 

  Initial states:
    l = 0.031 
    b = -0.1191 

  sigma:  0.556

     AIC     AICc      BIC 
354.4200 355.3137 370.1108 

$modelList$model5
ETS(A,Ad,N) 

Call:
 (function (y, model = "ZZZ", damped = NULL, alpha = NULL, beta = NULL,  

 Call:
     gamma = NULL, phi = NULL, additive.only = FALSE, lambda = NULL,  

 Call:
     biasadj = FALSE, lower = c(rep(1e-04, 3), 0.8), upper = c(rep(0.9999,  

 Call:
         3), 0.98), opt.crit = c("lik", "amse", "mse", "sigma",  

 Call:
         "mae"), nmse = 3, bounds = c("both", "usual", "admissible"),  

 Call:
     ic = c("aicc", "aic", "bic"), restrict = TRUE, allow.multiplicative.trend = FALSE,  

 Call:
     use.initial.values = FALSE, na.action = c("na.contiguous",  

 Call:
         "na.interp", "na.fail"), ...)  

 Call:
 { 

 Call:
     opt.crit <- match.arg(opt.crit) 

 Call:
     bounds <- match.arg(bounds) 

 Call:
     ic <- match.arg(ic) 

 Call:
     if (!is.function(na.action)) { 

 Call:
         na.fn_name <- match.arg(na.action) 

 Call:
         na.action <- get(na.fn_name) 

 Call:
     } 

 Call:
     seriesname <- deparse(substitute(y)) 

 Call:
     if (any(class(y) %in% c("data.frame", "list", "matrix", "mts"))) { 

 Call:
         stop("y should be a univariate time series") 

 Call:
     } 

 Call:
     y <- as.ts(y) 

 Call:
     if (missing(model) && is.constant(y)) { 

 Call:
         return(ses(y, alpha = 0.99999, initial = "simple")$model) 

 Call:
     } 

 Call:
     ny <- length(y) 

 Call:
     y <- na.action(y) 

 Call:
     if (ny != length(y) && na.fn_name == "na.contiguous") { 

 Call:
         warning("Missing values encountered. Using longest contiguous portion of time series") 

 Call:
         ny <- length(y) 

 Call:
     } 

 Call:
     orig.y <- y 

 Call:
     if (identical(class(model), "ets") && is.null(lambda)) { 

 Call:
         lambda <- model$lambda 

 Call:
     } 

 Call:
     if (!is.null(lambda)) { 

 Call:
         y <- BoxCox(y, lambda) 

 Call:
         lambda <- attr(y, "lambda") 

 Call:
         additive.only <- TRUE 

 Call:
     } 

 Call:
     if (nmse < 1 || nmse > 30) { 

 Call:
         stop("nmse out of range") 

 Call:
     } 

 Call:
     m <- frequency(y) 

 Call:
     if (any(upper < lower)) { 

 Call:
         stop("Lower limits must be less than upper limits") 

 Call:
     } 

 Call:
     if (class(model) == "ets") { 

 Call:
         alpha <- max(model$par["alpha"], 1e-10) 

 Call:
         beta <- model$par["beta"] 

 Call:
         if (is.na(beta)) { 

 Call:
             beta <- NULL 

 Call:
         } 

 Call:
         gamma <- model$par["gamma"] 

 Call:
         if (is.na(gamma)) { 

 Call:
             gamma <- NULL 

 Call:
         } 

 Call:
         phi <- model$par["phi"] 

 Call:
         if (is.na(phi)) { 

 Call:
             phi <- NULL 

 Call:
         } 

 Call:
         modelcomponents <- paste(model$components[1], model$components[2],  

 Call:
             model$components[3], sep = "") 

 Call:
         damped <- (model$components[4] == "TRUE") 

 Call:
         if (use.initial.values) { 

 Call:
             errortype <- substr(modelcomponents, 1, 1) 

 Call:
             trendtype <- substr(modelcomponents, 2, 2) 

 Call:
             seasontype <- substr(modelcomponents, 3, 3) 

 Call:
             e <- pegelsresid.C(y, m, model$initstate, errortype,  

 Call:
                 trendtype, seasontype, damped, alpha, beta, gamma,  

 Call:
                 phi, nmse) 

 Call:
             np <- length(model$par) + 1 

 Call:
             model$loglik <- -0.5 * e$lik 

 Call:
             model$aic <- e$lik + 2 * np 

 Call:
             model$bic <- e$lik + log(ny) * np 

 Call:
             model$aicc <- model$aic + 2 * np * (np + 1)/(ny -  

 Call:
                 np - 1) 

 Call:
             model$mse <- e$amse[1] 

 Call:
             model$amse <- mean(e$amse) 

 Call:
             tsp.y <- tsp(y) 

 Call:
             model$states <- ts(e$states, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1] - 1/tsp.y[3]) 

 Call:
             colnames(model$states)[1] <- "l" 

 Call:
             if (trendtype != "N") { 

 Call:
                 colnames(model$states)[2] <- "b" 

 Call:
             } 

 Call:
             if (seasontype != "N") { 

 Call:
                 colnames(model$states)[(2 + (trendtype != "N")):ncol(model$states)] <- paste("s",  

 Call:
                   1:m, sep = "") 

 Call:
             } 

 Call:
             if (errortype == "A") { 

 Call:
                 model$fitted <- ts(y - e$e, frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             else { 

 Call:
                 model$fitted <- ts(y/(1 + e$e), frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             model$residuals <- ts(e$e, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1]) 

 Call:
             model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
                 np) 

 Call:
             model$x <- orig.y 

 Call:
             model$series <- seriesname 

 Call:
             if (!is.null(lambda)) { 

 Call:
                 model$fitted <- InvBoxCox(model$fitted, lambda,  

 Call:
                   biasadj, var(model$residuals)) 

 Call:
                 attr(lambda, "biasadj") <- biasadj 

 Call:
             } 

 Call:
             model$lambda <- lambda 

 Call:
             return(model) 

 Call:
         } 

 Call:
         else { 

 Call:
             model <- modelcomponents 

 Call:
             if (missing(use.initial.values)) { 

 Call:
                 message("Model is being refit with current smoothing parameters but initial states are being re-estimated.\nSet 'use.initial.values=TRUE' if you want to re-use existing initial values.") 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     errortype <- substr(model, 1, 1) 

 Call:
     trendtype <- substr(model, 2, 2) 

 Call:
     seasontype <- substr(model, 3, 3) 

 Call:
     if (!is.element(errortype, c("M", "A", "Z"))) { 

 Call:
         stop("Invalid error type") 

 Call:
     } 

 Call:
     if (!is.element(trendtype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid trend type") 

 Call:
     } 

 Call:
     if (!is.element(seasontype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid season type") 

 Call:
     } 

 Call:
     if (m < 1 || length(y) <= m) { 

 Call:
         seasontype <- "N" 

 Call:
     } 

 Call:
     if (m == 1) { 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             stop("Nonseasonal data") 

 Call:
         } 

 Call:
         else { 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (m > 24) { 

 Call:
         if (is.element(seasontype, c("A", "M"))) { 

 Call:
             stop("Frequency too high") 

 Call:
         } 

 Call:
         else if (seasontype == "Z") { 

 Call:
             warning("I can't handle data with frequency greater than 24. Seasonality will be ignored. Try stlf() if you need seasonal forecasts.") 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (restrict) { 

 Call:
         if ((errortype == "A" && (trendtype == "M" || seasontype ==  

 Call:
             "M")) | (errortype == "M" && trendtype == "M" &&  

 Call:
             seasontype == "A") || (additive.only && (errortype ==  

 Call:
             "M" || trendtype == "M" || seasontype == "M"))) { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     data.positive <- (min(y) > 0) 

 Call:
     if (!data.positive && errortype == "M") { 

 Call:
         stop("Inappropriate model for data with negative or zero values") 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         if (damped && trendtype == "N") { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     n <- length(y) 

 Call:
     npars <- 2L 

 Call:
     if (trendtype == "A" || trendtype == "M") { 

 Call:
         npars <- npars + 2L 

 Call:
     } 

 Call:
     if (seasontype == "A" || seasontype == "M") { 

 Call:
         npars <- npars + m 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         npars <- npars + as.numeric(damped) 

 Call:
     } 

 Call:
     if (n <= npars + 4L) { 

 Call:
         if (!is.null(damped)) { 

 Call:
             if (damped) { 

 Call:
                 warning("Not enough data to use damping") 

 Call:
             } 

 Call:
         } 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = gamma, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), seasonal = ifelse(seasontype != "A",  

 Call:
                   "multiplicative", "additive"), lambda = lambda,  

 Call:
                 biasadj = biasadj, warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Seasonal component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "A" || trendtype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
                 silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Trend component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "N" && seasontype == "N") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
                 gamma = FALSE, lambda = lambda, biasadj = biasadj,  

 Call:
                 warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
         } 

 Call:
         fit1 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         fit2 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         if ("try-error" %in% class(fit1)) { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         else if (fit1$sigma2 < fit2$sigma2) { 

 Call:
             fit <- fit1 

 Call:
         } 

 Call:
         else { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         if ("try-error" %in% class(fit))  

 Call:
             stop("Unable to estimate a model.") 

 Call:
         fit$call <- match.call() 

 Call:
         fit$method <- as.character(fit) 

 Call:
         fit$series <- deparse(substitute(y)) 

 Call:
         return(fit) 

 Call:
     } 

 Call:
     if (errortype == "Z") { 

 Call:
         errortype <- c("A", "M") 

 Call:
     } 

 Call:
     if (trendtype == "Z") { 

 Call:
         if (allow.multiplicative.trend) { 

 Call:
             trendtype <- c("N", "A", "M") 

 Call:
         } 

 Call:
         else { 

 Call:
             trendtype <- c("N", "A") 

 Call:
         } 

 Call:
     } 

 Call:
     if (seasontype == "Z") { 

 Call:
         seasontype <- c("N", "A", "M") 

 Call:
     } 

 Call:
     if (is.null(damped)) { 

 Call:
         damped <- c(TRUE, FALSE) 

 Call:
     } 

 Call:
     best.ic <- Inf 

 Call:
     for (i in 1:length(errortype)) { 

 Call:
         for (j in 1:length(trendtype)) { 

 Call:
             for (k in 1:length(seasontype)) { 

 Call:
                 for (l in 1:length(damped)) { 

 Call:
                   if (trendtype[j] == "N" && damped[l]) { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   if (restrict) { 

 Call:
                     if (errortype[i] == "A" && (trendtype[j] ==  

 Call:
                       "M" || seasontype[k] == "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (errortype[i] == "M" && trendtype[j] ==  

 Call:
                       "M" && seasontype[k] == "A") { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (additive.only && (errortype[i] == "M" ||  

 Call:
                       trendtype[j] == "M" || seasontype[k] ==  

 Call:
                       "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                   } 

 Call:
                   if (!data.positive && errortype[i] == "M") { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   fit <- try(etsmodel(y, errortype[i], trendtype[j],  

 Call:
                     seasontype[k], damped[l], alpha, beta, gamma,  

 Call:
                     phi, lower = lower, upper = upper, opt.crit = opt.crit,  

 Call:
                     nmse = nmse, bounds = bounds, ...), silent = TRUE) 

 Call:
                   if (is.element("try-error", class(fit)))  

 Call:
                     fit.ic <- Inf 

 Call:
                   else fit.ic <- switch(ic, aic = fit$aic, bic = fit$bic,  

 Call:
                     aicc = fit$aicc) 

 Call:
                   if (!is.na(fit.ic)) { 

 Call:
                     if (fit.ic < best.ic) { 

 Call:
                       model <- fit 

 Call:
                       best.ic <- fit.ic 

 Call:
                       best.e <- errortype[i] 

 Call:
                       best.t <- trendtype[j] 

 Call:
                       best.s <- seasontype[k] 

 Call:
                       best.d <- damped[l] 

 Call:
                     } 

 Call:
                   } 

 Call:
                 } 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     if (best.ic == Inf) { 

 Call:
         stop("No model able to be fitted") 

 Call:
     } 

 Call:
     model$m <- m 

 Call:
     model$method <- paste("ETS(", best.e, ",", best.t, ifelse(best.d,  

 Call:
         "d", ""), ",", best.s, ")", sep = "") 

 Call:
     model$series <- seriesname 

 Call:
     model$components <- c(best.e, best.t, best.s, best.d) 

 Call:
     model$call <- match.call() 

 Call:
     model$initstate <- model$states[1, ] 

 Call:
     np <- length(model$par) 

 Call:
     model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
         np) 

 Call:
     model$x <- orig.y 

 Call:
     if (!is.null(lambda)) { 

 Call:
         model$fitted <- InvBoxCox(model$fitted, lambda, biasadj,  

 Call:
             var(model$residuals)) 

 Call:
         attr(lambda, "biasadj") <- biasadj 

 Call:
     } 

 Call:
     model$lambda <- lambda 

 Call:
     return(structure(model, class = "ets")) 

 Call:
 })(y = structure(c(-1.17201088882571, -1.35328669245726, -1.35328669245726,  

 Call:
 -1.17201088882571, -1.17201088882571, -1.17201088882571, -0.99073508519418,  

 Call:
 -0.809459281562635, -0.446907674299545, -0.446907674299545, -0.265631870668,  

 Call:
 -0.265631870668, 0.0969197365950774, 0.0969197365950774, 0.459471343858168,  

 Call:
 0.0969197365950774, 0.459471343858168, 0.0969197365950774, 0.459471343858168,  

 Call:
 0.278195540226623, 0.459471343858168, 0.0969197365950774, 0.459471343858168,  

 Call:
 0.278195540226623, 0.278195540226623, 0.278195540226623, 0.0969197365950774,  

 Call:
 0.640747147489713, 0.278195540226623, 0.459471343858168, 0.278195540226623,  

 Call:
 0.278195540226623, 0.459471343858168, -0.0843560670364677, 0.0969197365950774,  

 Call:
 -0.0843560670364677, 0.0969197365950774, 0.0969197365950774,  

 Call:
 -0.265631870668, -0.0843560670364677, -0.265631870668, -0.265631870668,  

 Call:
 -0.446907674299545, -0.265631870668, -0.446907674299545, -0.446907674299545,  

 Call:
 -0.265631870668, -0.446907674299545, -0.265631870668, -0.446907674299545,  

 Call:
 -0.265631870668, -0.265631870668, -0.62818347793109, -0.62818347793109,  

 Call:
 -0.99073508519418, -0.809459281562635, -0.99073508519418, -0.62818347793109,  

 Call:
 -0.99073508519418, -0.62818347793109, -0.809459281562635, -0.62818347793109,  

 Call:
 -0.99073508519418, -0.809459281562635, -1.17201088882571, -0.809459281562635,  

 Call:
 -0.809459281562635, -0.809459281562635, -0.99073508519418, -0.99073508519418,  

 Call:
 -0.99073508519418, -0.99073508519418, -0.99073508519418, -0.99073508519418,  

 Call:
 -0.62818347793109, -0.99073508519418, -0.62818347793109, -0.99073508519418,  

 Call:
 -0.446907674299545, -0.62818347793109, -0.0843560670364677, -0.0843560670364677,  

 Call:
 0.459471343858168, 0.278195540226623, 0.640747147489713, 0.822022951121245,  

 Call:
 1.00329875475279, 1.54712616564743, 1.36585036201588, 1.72840196927896,  

 Call:
 1.72840196927896, 1.9096777729105, 1.9096777729105, 1.9096777729105,  

 Call:
 2.45350518380514, 2.63478098743667, 2.45350518380514, 2.45350518380514,  

 Call:
 2.45350518380514, 2.09095357654205, 2.27222938017359), .Tsp = c(1,  

 Call:
 101, 1), class = "ts")) 

  Smoothing parameters:
    alpha = 0.3558 
    beta  = 0.2577 
    phi   = 0.8489 

  Initial states:
    l = -1.2758 
    b = -0.0477 

  sigma:  0.2195

     AIC     AICc      BIC 
166.7195 167.6131 182.4102 

$modelList$model6
ETS(A,N,N) 

Call:
 (function (y, model = "ZZZ", damped = NULL, alpha = NULL, beta = NULL,  

 Call:
     gamma = NULL, phi = NULL, additive.only = FALSE, lambda = NULL,  

 Call:
     biasadj = FALSE, lower = c(rep(1e-04, 3), 0.8), upper = c(rep(0.9999,  

 Call:
         3), 0.98), opt.crit = c("lik", "amse", "mse", "sigma",  

 Call:
         "mae"), nmse = 3, bounds = c("both", "usual", "admissible"),  

 Call:
     ic = c("aicc", "aic", "bic"), restrict = TRUE, allow.multiplicative.trend = FALSE,  

 Call:
     use.initial.values = FALSE, na.action = c("na.contiguous",  

 Call:
         "na.interp", "na.fail"), ...)  

 Call:
 { 

 Call:
     opt.crit <- match.arg(opt.crit) 

 Call:
     bounds <- match.arg(bounds) 

 Call:
     ic <- match.arg(ic) 

 Call:
     if (!is.function(na.action)) { 

 Call:
         na.fn_name <- match.arg(na.action) 

 Call:
         na.action <- get(na.fn_name) 

 Call:
     } 

 Call:
     seriesname <- deparse(substitute(y)) 

 Call:
     if (any(class(y) %in% c("data.frame", "list", "matrix", "mts"))) { 

 Call:
         stop("y should be a univariate time series") 

 Call:
     } 

 Call:
     y <- as.ts(y) 

 Call:
     if (missing(model) && is.constant(y)) { 

 Call:
         return(ses(y, alpha = 0.99999, initial = "simple")$model) 

 Call:
     } 

 Call:
     ny <- length(y) 

 Call:
     y <- na.action(y) 

 Call:
     if (ny != length(y) && na.fn_name == "na.contiguous") { 

 Call:
         warning("Missing values encountered. Using longest contiguous portion of time series") 

 Call:
         ny <- length(y) 

 Call:
     } 

 Call:
     orig.y <- y 

 Call:
     if (identical(class(model), "ets") && is.null(lambda)) { 

 Call:
         lambda <- model$lambda 

 Call:
     } 

 Call:
     if (!is.null(lambda)) { 

 Call:
         y <- BoxCox(y, lambda) 

 Call:
         lambda <- attr(y, "lambda") 

 Call:
         additive.only <- TRUE 

 Call:
     } 

 Call:
     if (nmse < 1 || nmse > 30) { 

 Call:
         stop("nmse out of range") 

 Call:
     } 

 Call:
     m <- frequency(y) 

 Call:
     if (any(upper < lower)) { 

 Call:
         stop("Lower limits must be less than upper limits") 

 Call:
     } 

 Call:
     if (class(model) == "ets") { 

 Call:
         alpha <- max(model$par["alpha"], 1e-10) 

 Call:
         beta <- model$par["beta"] 

 Call:
         if (is.na(beta)) { 

 Call:
             beta <- NULL 

 Call:
         } 

 Call:
         gamma <- model$par["gamma"] 

 Call:
         if (is.na(gamma)) { 

 Call:
             gamma <- NULL 

 Call:
         } 

 Call:
         phi <- model$par["phi"] 

 Call:
         if (is.na(phi)) { 

 Call:
             phi <- NULL 

 Call:
         } 

 Call:
         modelcomponents <- paste(model$components[1], model$components[2],  

 Call:
             model$components[3], sep = "") 

 Call:
         damped <- (model$components[4] == "TRUE") 

 Call:
         if (use.initial.values) { 

 Call:
             errortype <- substr(modelcomponents, 1, 1) 

 Call:
             trendtype <- substr(modelcomponents, 2, 2) 

 Call:
             seasontype <- substr(modelcomponents, 3, 3) 

 Call:
             e <- pegelsresid.C(y, m, model$initstate, errortype,  

 Call:
                 trendtype, seasontype, damped, alpha, beta, gamma,  

 Call:
                 phi, nmse) 

 Call:
             np <- length(model$par) + 1 

 Call:
             model$loglik <- -0.5 * e$lik 

 Call:
             model$aic <- e$lik + 2 * np 

 Call:
             model$bic <- e$lik + log(ny) * np 

 Call:
             model$aicc <- model$aic + 2 * np * (np + 1)/(ny -  

 Call:
                 np - 1) 

 Call:
             model$mse <- e$amse[1] 

 Call:
             model$amse <- mean(e$amse) 

 Call:
             tsp.y <- tsp(y) 

 Call:
             model$states <- ts(e$states, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1] - 1/tsp.y[3]) 

 Call:
             colnames(model$states)[1] <- "l" 

 Call:
             if (trendtype != "N") { 

 Call:
                 colnames(model$states)[2] <- "b" 

 Call:
             } 

 Call:
             if (seasontype != "N") { 

 Call:
                 colnames(model$states)[(2 + (trendtype != "N")):ncol(model$states)] <- paste("s",  

 Call:
                   1:m, sep = "") 

 Call:
             } 

 Call:
             if (errortype == "A") { 

 Call:
                 model$fitted <- ts(y - e$e, frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             else { 

 Call:
                 model$fitted <- ts(y/(1 + e$e), frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             model$residuals <- ts(e$e, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1]) 

 Call:
             model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
                 np) 

 Call:
             model$x <- orig.y 

 Call:
             model$series <- seriesname 

 Call:
             if (!is.null(lambda)) { 

 Call:
                 model$fitted <- InvBoxCox(model$fitted, lambda,  

 Call:
                   biasadj, var(model$residuals)) 

 Call:
                 attr(lambda, "biasadj") <- biasadj 

 Call:
             } 

 Call:
             model$lambda <- lambda 

 Call:
             return(model) 

 Call:
         } 

 Call:
         else { 

 Call:
             model <- modelcomponents 

 Call:
             if (missing(use.initial.values)) { 

 Call:
                 message("Model is being refit with current smoothing parameters but initial states are being re-estimated.\nSet 'use.initial.values=TRUE' if you want to re-use existing initial values.") 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     errortype <- substr(model, 1, 1) 

 Call:
     trendtype <- substr(model, 2, 2) 

 Call:
     seasontype <- substr(model, 3, 3) 

 Call:
     if (!is.element(errortype, c("M", "A", "Z"))) { 

 Call:
         stop("Invalid error type") 

 Call:
     } 

 Call:
     if (!is.element(trendtype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid trend type") 

 Call:
     } 

 Call:
     if (!is.element(seasontype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid season type") 

 Call:
     } 

 Call:
     if (m < 1 || length(y) <= m) { 

 Call:
         seasontype <- "N" 

 Call:
     } 

 Call:
     if (m == 1) { 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             stop("Nonseasonal data") 

 Call:
         } 

 Call:
         else { 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (m > 24) { 

 Call:
         if (is.element(seasontype, c("A", "M"))) { 

 Call:
             stop("Frequency too high") 

 Call:
         } 

 Call:
         else if (seasontype == "Z") { 

 Call:
             warning("I can't handle data with frequency greater than 24. Seasonality will be ignored. Try stlf() if you need seasonal forecasts.") 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (restrict) { 

 Call:
         if ((errortype == "A" && (trendtype == "M" || seasontype ==  

 Call:
             "M")) | (errortype == "M" && trendtype == "M" &&  

 Call:
             seasontype == "A") || (additive.only && (errortype ==  

 Call:
             "M" || trendtype == "M" || seasontype == "M"))) { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     data.positive <- (min(y) > 0) 

 Call:
     if (!data.positive && errortype == "M") { 

 Call:
         stop("Inappropriate model for data with negative or zero values") 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         if (damped && trendtype == "N") { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     n <- length(y) 

 Call:
     npars <- 2L 

 Call:
     if (trendtype == "A" || trendtype == "M") { 

 Call:
         npars <- npars + 2L 

 Call:
     } 

 Call:
     if (seasontype == "A" || seasontype == "M") { 

 Call:
         npars <- npars + m 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         npars <- npars + as.numeric(damped) 

 Call:
     } 

 Call:
     if (n <= npars + 4L) { 

 Call:
         if (!is.null(damped)) { 

 Call:
             if (damped) { 

 Call:
                 warning("Not enough data to use damping") 

 Call:
             } 

 Call:
         } 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = gamma, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), seasonal = ifelse(seasontype != "A",  

 Call:
                   "multiplicative", "additive"), lambda = lambda,  

 Call:
                 biasadj = biasadj, warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Seasonal component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "A" || trendtype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
                 silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Trend component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "N" && seasontype == "N") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
                 gamma = FALSE, lambda = lambda, biasadj = biasadj,  

 Call:
                 warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
         } 

 Call:
         fit1 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         fit2 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         if ("try-error" %in% class(fit1)) { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         else if (fit1$sigma2 < fit2$sigma2) { 

 Call:
             fit <- fit1 

 Call:
         } 

 Call:
         else { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         if ("try-error" %in% class(fit))  

 Call:
             stop("Unable to estimate a model.") 

 Call:
         fit$call <- match.call() 

 Call:
         fit$method <- as.character(fit) 

 Call:
         fit$series <- deparse(substitute(y)) 

 Call:
         return(fit) 

 Call:
     } 

 Call:
     if (errortype == "Z") { 

 Call:
         errortype <- c("A", "M") 

 Call:
     } 

 Call:
     if (trendtype == "Z") { 

 Call:
         if (allow.multiplicative.trend) { 

 Call:
             trendtype <- c("N", "A", "M") 

 Call:
         } 

 Call:
         else { 

 Call:
             trendtype <- c("N", "A") 

 Call:
         } 

 Call:
     } 

 Call:
     if (seasontype == "Z") { 

 Call:
         seasontype <- c("N", "A", "M") 

 Call:
     } 

 Call:
     if (is.null(damped)) { 

 Call:
         damped <- c(TRUE, FALSE) 

 Call:
     } 

 Call:
     best.ic <- Inf 

 Call:
     for (i in 1:length(errortype)) { 

 Call:
         for (j in 1:length(trendtype)) { 

 Call:
             for (k in 1:length(seasontype)) { 

 Call:
                 for (l in 1:length(damped)) { 

 Call:
                   if (trendtype[j] == "N" && damped[l]) { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   if (restrict) { 

 Call:
                     if (errortype[i] == "A" && (trendtype[j] ==  

 Call:
                       "M" || seasontype[k] == "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (errortype[i] == "M" && trendtype[j] ==  

 Call:
                       "M" && seasontype[k] == "A") { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (additive.only && (errortype[i] == "M" ||  

 Call:
                       trendtype[j] == "M" || seasontype[k] ==  

 Call:
                       "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                   } 

 Call:
                   if (!data.positive && errortype[i] == "M") { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   fit <- try(etsmodel(y, errortype[i], trendtype[j],  

 Call:
                     seasontype[k], damped[l], alpha, beta, gamma,  

 Call:
                     phi, lower = lower, upper = upper, opt.crit = opt.crit,  

 Call:
                     nmse = nmse, bounds = bounds, ...), silent = TRUE) 

 Call:
                   if (is.element("try-error", class(fit)))  

 Call:
                     fit.ic <- Inf 

 Call:
                   else fit.ic <- switch(ic, aic = fit$aic, bic = fit$bic,  

 Call:
                     aicc = fit$aicc) 

 Call:
                   if (!is.na(fit.ic)) { 

 Call:
                     if (fit.ic < best.ic) { 

 Call:
                       model <- fit 

 Call:
                       best.ic <- fit.ic 

 Call:
                       best.e <- errortype[i] 

 Call:
                       best.t <- trendtype[j] 

 Call:
                       best.s <- seasontype[k] 

 Call:
                       best.d <- damped[l] 

 Call:
                     } 

 Call:
                   } 

 Call:
                 } 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     if (best.ic == Inf) { 

 Call:
         stop("No model able to be fitted") 

 Call:
     } 

 Call:
     model$m <- m 

 Call:
     model$method <- paste("ETS(", best.e, ",", best.t, ifelse(best.d,  

 Call:
         "d", ""), ",", best.s, ")", sep = "") 

 Call:
     model$series <- seriesname 

 Call:
     model$components <- c(best.e, best.t, best.s, best.d) 

 Call:
     model$call <- match.call() 

 Call:
     model$initstate <- model$states[1, ] 

 Call:
     np <- length(model$par) 

 Call:
     model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
         np) 

 Call:
     model$x <- orig.y 

 Call:
     if (!is.null(lambda)) { 

 Call:
         model$fitted <- InvBoxCox(model$fitted, lambda, biasadj,  

 Call:
             var(model$residuals)) 

 Call:
         attr(lambda, "biasadj") <- biasadj 

 Call:
     } 

 Call:
     model$lambda <- lambda 

 Call:
     return(structure(model, class = "ets")) 

 Call:
 })(y = structure(c(1.04101746227459, 0.650152169747699, 0.650152169747699,  

 Call:
 1.04101746227459, 0.650152169747699, 1.04101746227459, 1.04101746227459,  

 Call:
 1.04101746227459, 1.43188275480148, 1.04101746227459, 0.259286877220807,  

 Call:
 -0.131578415306085, -0.131578415306085, -0.131578415306085, -0.131578415306085,  

 Call:
 -0.522443707832977, -0.522443707832977, -0.522443707832977, -0.913309000359869,  

 Call:
 -0.913309000359869, -1.30417429288676, -1.30417429288676, 0.650152169747699,  

 Call:
 0.650152169747699, 0.259286877220807, 0.259286877220807, 0.259286877220807,  

 Call:
 0.259286877220807, -0.131578415306085, -0.131578415306085, -0.131578415306085,  

 Call:
 0.259286877220807, 0.259286877220807, 0.259286877220807, 0.259286877220807,  

 Call:
 0.259286877220807, 0.259286877220807, 0.259286877220807, -0.131578415306085,  

 Call:
 0.259286877220807, 0.259286877220807, 0.650152169747699, 0.259286877220807,  

 Call:
 -0.131578415306085, -0.131578415306085, -0.522443707832977, -1.30417429288676,  

 Call:
 -1.69503958541365, -1.69503958541365, -1.69503958541365, -1.69503958541365,  

 Call:
 -1.69503958541365, -2.47677017046744, -2.47677017046744, -1.69503958541365,  

 Call:
 -2.08590487794054, -0.913309000359869, 0.259286877220807, 1.04101746227459,  

 Call:
 1.82274804732838, 1.82274804732838, 1.43188275480148, 1.04101746227459,  

 Call:
 1.04101746227459, 0.259286877220807, -0.131578415306085, 0.259286877220807,  

 Call:
 0.259286877220807, 0.650152169747699, 0.650152169747699, 1.04101746227459,  

 Call:
 -0.131578415306085, 1.04101746227459, 2.60447863238216, 1.43188275480148,  

 Call:
 1.43188275480148, 1.04101746227459, 0.259286877220807, -1.30417429288676,  

 Call:
 0.259286877220807, 0.259286877220807, 0.259286877220807, 0.259286877220807,  

 Call:
 -0.131578415306085, -0.522443707832977, -0.522443707832977, -0.913309000359869,  

 Call:
 -1.30417429288676, -1.69503958541365, -1.69503958541365, -1.69503958541365,  

 Call:
 -1.69503958541365, 0.259286877220807, 0.650152169747699, 0.650152169747699,  

 Call:
 0.259286877220807, 0.259286877220807, 0.259286877220807, 0.259286877220807,  

 Call:
 0.259286877220807, 0.259286877220807), .Tsp = c(1, 101, 1), class = "ts")) 

  Smoothing parameters:
    alpha = 0.9999 

  Initial states:
    l = 1.0422 

  sigma:  0.5693

     AIC     AICc      BIC 
356.3016 356.5490 364.1469 

$modelList$model7
ETS(A,N,N) 

Call:
 (function (y, model = "ZZZ", damped = NULL, alpha = NULL, beta = NULL,  

 Call:
     gamma = NULL, phi = NULL, additive.only = FALSE, lambda = NULL,  

 Call:
     biasadj = FALSE, lower = c(rep(1e-04, 3), 0.8), upper = c(rep(0.9999,  

 Call:
         3), 0.98), opt.crit = c("lik", "amse", "mse", "sigma",  

 Call:
         "mae"), nmse = 3, bounds = c("both", "usual", "admissible"),  

 Call:
     ic = c("aicc", "aic", "bic"), restrict = TRUE, allow.multiplicative.trend = FALSE,  

 Call:
     use.initial.values = FALSE, na.action = c("na.contiguous",  

 Call:
         "na.interp", "na.fail"), ...)  

 Call:
 { 

 Call:
     opt.crit <- match.arg(opt.crit) 

 Call:
     bounds <- match.arg(bounds) 

 Call:
     ic <- match.arg(ic) 

 Call:
     if (!is.function(na.action)) { 

 Call:
         na.fn_name <- match.arg(na.action) 

 Call:
         na.action <- get(na.fn_name) 

 Call:
     } 

 Call:
     seriesname <- deparse(substitute(y)) 

 Call:
     if (any(class(y) %in% c("data.frame", "list", "matrix", "mts"))) { 

 Call:
         stop("y should be a univariate time series") 

 Call:
     } 

 Call:
     y <- as.ts(y) 

 Call:
     if (missing(model) && is.constant(y)) { 

 Call:
         return(ses(y, alpha = 0.99999, initial = "simple")$model) 

 Call:
     } 

 Call:
     ny <- length(y) 

 Call:
     y <- na.action(y) 

 Call:
     if (ny != length(y) && na.fn_name == "na.contiguous") { 

 Call:
         warning("Missing values encountered. Using longest contiguous portion of time series") 

 Call:
         ny <- length(y) 

 Call:
     } 

 Call:
     orig.y <- y 

 Call:
     if (identical(class(model), "ets") && is.null(lambda)) { 

 Call:
         lambda <- model$lambda 

 Call:
     } 

 Call:
     if (!is.null(lambda)) { 

 Call:
         y <- BoxCox(y, lambda) 

 Call:
         lambda <- attr(y, "lambda") 

 Call:
         additive.only <- TRUE 

 Call:
     } 

 Call:
     if (nmse < 1 || nmse > 30) { 

 Call:
         stop("nmse out of range") 

 Call:
     } 

 Call:
     m <- frequency(y) 

 Call:
     if (any(upper < lower)) { 

 Call:
         stop("Lower limits must be less than upper limits") 

 Call:
     } 

 Call:
     if (class(model) == "ets") { 

 Call:
         alpha <- max(model$par["alpha"], 1e-10) 

 Call:
         beta <- model$par["beta"] 

 Call:
         if (is.na(beta)) { 

 Call:
             beta <- NULL 

 Call:
         } 

 Call:
         gamma <- model$par["gamma"] 

 Call:
         if (is.na(gamma)) { 

 Call:
             gamma <- NULL 

 Call:
         } 

 Call:
         phi <- model$par["phi"] 

 Call:
         if (is.na(phi)) { 

 Call:
             phi <- NULL 

 Call:
         } 

 Call:
         modelcomponents <- paste(model$components[1], model$components[2],  

 Call:
             model$components[3], sep = "") 

 Call:
         damped <- (model$components[4] == "TRUE") 

 Call:
         if (use.initial.values) { 

 Call:
             errortype <- substr(modelcomponents, 1, 1) 

 Call:
             trendtype <- substr(modelcomponents, 2, 2) 

 Call:
             seasontype <- substr(modelcomponents, 3, 3) 

 Call:
             e <- pegelsresid.C(y, m, model$initstate, errortype,  

 Call:
                 trendtype, seasontype, damped, alpha, beta, gamma,  

 Call:
                 phi, nmse) 

 Call:
             np <- length(model$par) + 1 

 Call:
             model$loglik <- -0.5 * e$lik 

 Call:
             model$aic <- e$lik + 2 * np 

 Call:
             model$bic <- e$lik + log(ny) * np 

 Call:
             model$aicc <- model$aic + 2 * np * (np + 1)/(ny -  

 Call:
                 np - 1) 

 Call:
             model$mse <- e$amse[1] 

 Call:
             model$amse <- mean(e$amse) 

 Call:
             tsp.y <- tsp(y) 

 Call:
             model$states <- ts(e$states, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1] - 1/tsp.y[3]) 

 Call:
             colnames(model$states)[1] <- "l" 

 Call:
             if (trendtype != "N") { 

 Call:
                 colnames(model$states)[2] <- "b" 

 Call:
             } 

 Call:
             if (seasontype != "N") { 

 Call:
                 colnames(model$states)[(2 + (trendtype != "N")):ncol(model$states)] <- paste("s",  

 Call:
                   1:m, sep = "") 

 Call:
             } 

 Call:
             if (errortype == "A") { 

 Call:
                 model$fitted <- ts(y - e$e, frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             else { 

 Call:
                 model$fitted <- ts(y/(1 + e$e), frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             model$residuals <- ts(e$e, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1]) 

 Call:
             model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
                 np) 

 Call:
             model$x <- orig.y 

 Call:
             model$series <- seriesname 

 Call:
             if (!is.null(lambda)) { 

 Call:
                 model$fitted <- InvBoxCox(model$fitted, lambda,  

 Call:
                   biasadj, var(model$residuals)) 

 Call:
                 attr(lambda, "biasadj") <- biasadj 

 Call:
             } 

 Call:
             model$lambda <- lambda 

 Call:
             return(model) 

 Call:
         } 

 Call:
         else { 

 Call:
             model <- modelcomponents 

 Call:
             if (missing(use.initial.values)) { 

 Call:
                 message("Model is being refit with current smoothing parameters but initial states are being re-estimated.\nSet 'use.initial.values=TRUE' if you want to re-use existing initial values.") 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     errortype <- substr(model, 1, 1) 

 Call:
     trendtype <- substr(model, 2, 2) 

 Call:
     seasontype <- substr(model, 3, 3) 

 Call:
     if (!is.element(errortype, c("M", "A", "Z"))) { 

 Call:
         stop("Invalid error type") 

 Call:
     } 

 Call:
     if (!is.element(trendtype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid trend type") 

 Call:
     } 

 Call:
     if (!is.element(seasontype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid season type") 

 Call:
     } 

 Call:
     if (m < 1 || length(y) <= m) { 

 Call:
         seasontype <- "N" 

 Call:
     } 

 Call:
     if (m == 1) { 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             stop("Nonseasonal data") 

 Call:
         } 

 Call:
         else { 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (m > 24) { 

 Call:
         if (is.element(seasontype, c("A", "M"))) { 

 Call:
             stop("Frequency too high") 

 Call:
         } 

 Call:
         else if (seasontype == "Z") { 

 Call:
             warning("I can't handle data with frequency greater than 24. Seasonality will be ignored. Try stlf() if you need seasonal forecasts.") 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (restrict) { 

 Call:
         if ((errortype == "A" && (trendtype == "M" || seasontype ==  

 Call:
             "M")) | (errortype == "M" && trendtype == "M" &&  

 Call:
             seasontype == "A") || (additive.only && (errortype ==  

 Call:
             "M" || trendtype == "M" || seasontype == "M"))) { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     data.positive <- (min(y) > 0) 

 Call:
     if (!data.positive && errortype == "M") { 

 Call:
         stop("Inappropriate model for data with negative or zero values") 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         if (damped && trendtype == "N") { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     n <- length(y) 

 Call:
     npars <- 2L 

 Call:
     if (trendtype == "A" || trendtype == "M") { 

 Call:
         npars <- npars + 2L 

 Call:
     } 

 Call:
     if (seasontype == "A" || seasontype == "M") { 

 Call:
         npars <- npars + m 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         npars <- npars + as.numeric(damped) 

 Call:
     } 

 Call:
     if (n <= npars + 4L) { 

 Call:
         if (!is.null(damped)) { 

 Call:
             if (damped) { 

 Call:
                 warning("Not enough data to use damping") 

 Call:
             } 

 Call:
         } 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = gamma, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), seasonal = ifelse(seasontype != "A",  

 Call:
                   "multiplicative", "additive"), lambda = lambda,  

 Call:
                 biasadj = biasadj, warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Seasonal component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "A" || trendtype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
                 silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Trend component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "N" && seasontype == "N") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
                 gamma = FALSE, lambda = lambda, biasadj = biasadj,  

 Call:
                 warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
         } 

 Call:
         fit1 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         fit2 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         if ("try-error" %in% class(fit1)) { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         else if (fit1$sigma2 < fit2$sigma2) { 

 Call:
             fit <- fit1 

 Call:
         } 

 Call:
         else { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         if ("try-error" %in% class(fit))  

 Call:
             stop("Unable to estimate a model.") 

 Call:
         fit$call <- match.call() 

 Call:
         fit$method <- as.character(fit) 

 Call:
         fit$series <- deparse(substitute(y)) 

 Call:
         return(fit) 

 Call:
     } 

 Call:
     if (errortype == "Z") { 

 Call:
         errortype <- c("A", "M") 

 Call:
     } 

 Call:
     if (trendtype == "Z") { 

 Call:
         if (allow.multiplicative.trend) { 

 Call:
             trendtype <- c("N", "A", "M") 

 Call:
         } 

 Call:
         else { 

 Call:
             trendtype <- c("N", "A") 

 Call:
         } 

 Call:
     } 

 Call:
     if (seasontype == "Z") { 

 Call:
         seasontype <- c("N", "A", "M") 

 Call:
     } 

 Call:
     if (is.null(damped)) { 

 Call:
         damped <- c(TRUE, FALSE) 

 Call:
     } 

 Call:
     best.ic <- Inf 

 Call:
     for (i in 1:length(errortype)) { 

 Call:
         for (j in 1:length(trendtype)) { 

 Call:
             for (k in 1:length(seasontype)) { 

 Call:
                 for (l in 1:length(damped)) { 

 Call:
                   if (trendtype[j] == "N" && damped[l]) { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   if (restrict) { 

 Call:
                     if (errortype[i] == "A" && (trendtype[j] ==  

 Call:
                       "M" || seasontype[k] == "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (errortype[i] == "M" && trendtype[j] ==  

 Call:
                       "M" && seasontype[k] == "A") { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (additive.only && (errortype[i] == "M" ||  

 Call:
                       trendtype[j] == "M" || seasontype[k] ==  

 Call:
                       "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                   } 

 Call:
                   if (!data.positive && errortype[i] == "M") { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   fit <- try(etsmodel(y, errortype[i], trendtype[j],  

 Call:
                     seasontype[k], damped[l], alpha, beta, gamma,  

 Call:
                     phi, lower = lower, upper = upper, opt.crit = opt.crit,  

 Call:
                     nmse = nmse, bounds = bounds, ...), silent = TRUE) 

 Call:
                   if (is.element("try-error", class(fit)))  

 Call:
                     fit.ic <- Inf 

 Call:
                   else fit.ic <- switch(ic, aic = fit$aic, bic = fit$bic,  

 Call:
                     aicc = fit$aicc) 

 Call:
                   if (!is.na(fit.ic)) { 

 Call:
                     if (fit.ic < best.ic) { 

 Call:
                       model <- fit 

 Call:
                       best.ic <- fit.ic 

 Call:
                       best.e <- errortype[i] 

 Call:
                       best.t <- trendtype[j] 

 Call:
                       best.s <- seasontype[k] 

 Call:
                       best.d <- damped[l] 

 Call:
                     } 

 Call:
                   } 

 Call:
                 } 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     if (best.ic == Inf) { 

 Call:
         stop("No model able to be fitted") 

 Call:
     } 

 Call:
     model$m <- m 

 Call:
     model$method <- paste("ETS(", best.e, ",", best.t, ifelse(best.d,  

 Call:
         "d", ""), ",", best.s, ")", sep = "") 

 Call:
     model$series <- seriesname 

 Call:
     model$components <- c(best.e, best.t, best.s, best.d) 

 Call:
     model$call <- match.call() 

 Call:
     model$initstate <- model$states[1, ] 

 Call:
     np <- length(model$par) 

 Call:
     model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
         np) 

 Call:
     model$x <- orig.y 

 Call:
     if (!is.null(lambda)) { 

 Call:
         model$fitted <- InvBoxCox(model$fitted, lambda, biasadj,  

 Call:
             var(model$residuals)) 

 Call:
         attr(lambda, "biasadj") <- biasadj 

 Call:
     } 

 Call:
     model$lambda <- lambda 

 Call:
     return(structure(model, class = "ets")) 

 Call:
 })(y = structure(c(1.16873757724396, -0.236530223966045, 0.466103676638959,  

 Call:
 0.466103676638959, -0.236530223966045, 0.466103676638959, 1.16873757724396,  

 Call:
 0.466103676638959, 1.87137147784897, 0.466103676638959, -0.236530223966045,  

 Call:
 -0.236530223966045, -0.236530223966045, -0.236530223966045, -0.236530223966045,  

 Call:
 -0.236530223966045, -0.236530223966045, -0.236530223966045, -0.236530223966045,  

 Call:
 0.466103676638959, -0.236530223966045, -0.236530223966045, 0.466103676638959,  

 Call:
 0.466103676638959, -0.236530223966045, -0.236530223966045, -0.236530223966045,  

 Call:
 -0.236530223966045, -0.236530223966045, -0.939164124571048, -0.939164124571048,  

 Call:
 -0.236530223966045, -0.236530223966045, -0.236530223966045, -0.236530223966045,  

 Call:
 -0.236530223966045, -0.236530223966045, -0.236530223966045, -0.236530223966045,  

 Call:
 -0.236530223966045, 0.466103676638959, 0.466103676638959, 0.466103676638959,  

 Call:
 0.466103676638959, 0.466103676638959, -0.236530223966045, -0.939164124571048,  

 Call:
 -0.939164124571048, -0.939164124571048, -0.939164124571048, -0.939164124571048,  

 Call:
 -0.939164124571048, -0.939164124571048, -0.939164124571048, -0.236530223966045,  

 Call:
 -0.939164124571048, -0.236530223966045, 0.466103676638959, 1.16873757724396,  

 Call:
 1.87137147784897, 1.16873757724396, 1.16873757724396, 1.16873757724396,  

 Call:
 0.466103676638959, -0.236530223966045, -0.939164124571048, -0.939164124571048,  

 Call:
 -0.236530223966045, -0.236530223966045, -0.236530223966045, 0.466103676638959,  

 Call:
 -1.64179802517605, 0.466103676638959, 4.68190708026898, 2.57400537845397,  

 Call:
 1.87137147784897, 1.16873757724396, -0.939164124571048, -5.15496752820107,  

 Call:
 -0.236530223966045, -0.236530223966045, -0.236530223966045, -0.236530223966045,  

 Call:
 -0.236530223966045, -0.236530223966045, -0.236530223966045, -0.236530223966045,  

 Call:
 -0.939164124571048, -0.939164124571048, -0.236530223966045, 0.466103676638959,  

 Call:
 -0.236530223966045, 0.466103676638959, 0.466103676638959, 0.466103676638959,  

 Call:
 0.466103676638959, 0.466103676638959, 0.466103676638959, 0.466103676638959,  

 Call:
 -0.236530223966045, -0.236530223966045), .Tsp = c(1, 101, 1), class = "ts")) 

  Smoothing parameters:
    alpha = 0.6777 

  Initial states:
    l = 0.7851 

  sigma:  0.9807

     AIC     AICc      BIC 
466.1737 466.4211 474.0190 

$modelList$model8
ETS(A,Ad,N) 

Call:
 (function (y, model = "ZZZ", damped = NULL, alpha = NULL, beta = NULL,  

 Call:
     gamma = NULL, phi = NULL, additive.only = FALSE, lambda = NULL,  

 Call:
     biasadj = FALSE, lower = c(rep(1e-04, 3), 0.8), upper = c(rep(0.9999,  

 Call:
         3), 0.98), opt.crit = c("lik", "amse", "mse", "sigma",  

 Call:
         "mae"), nmse = 3, bounds = c("both", "usual", "admissible"),  

 Call:
     ic = c("aicc", "aic", "bic"), restrict = TRUE, allow.multiplicative.trend = FALSE,  

 Call:
     use.initial.values = FALSE, na.action = c("na.contiguous",  

 Call:
         "na.interp", "na.fail"), ...)  

 Call:
 { 

 Call:
     opt.crit <- match.arg(opt.crit) 

 Call:
     bounds <- match.arg(bounds) 

 Call:
     ic <- match.arg(ic) 

 Call:
     if (!is.function(na.action)) { 

 Call:
         na.fn_name <- match.arg(na.action) 

 Call:
         na.action <- get(na.fn_name) 

 Call:
     } 

 Call:
     seriesname <- deparse(substitute(y)) 

 Call:
     if (any(class(y) %in% c("data.frame", "list", "matrix", "mts"))) { 

 Call:
         stop("y should be a univariate time series") 

 Call:
     } 

 Call:
     y <- as.ts(y) 

 Call:
     if (missing(model) && is.constant(y)) { 

 Call:
         return(ses(y, alpha = 0.99999, initial = "simple")$model) 

 Call:
     } 

 Call:
     ny <- length(y) 

 Call:
     y <- na.action(y) 

 Call:
     if (ny != length(y) && na.fn_name == "na.contiguous") { 

 Call:
         warning("Missing values encountered. Using longest contiguous portion of time series") 

 Call:
         ny <- length(y) 

 Call:
     } 

 Call:
     orig.y <- y 

 Call:
     if (identical(class(model), "ets") && is.null(lambda)) { 

 Call:
         lambda <- model$lambda 

 Call:
     } 

 Call:
     if (!is.null(lambda)) { 

 Call:
         y <- BoxCox(y, lambda) 

 Call:
         lambda <- attr(y, "lambda") 

 Call:
         additive.only <- TRUE 

 Call:
     } 

 Call:
     if (nmse < 1 || nmse > 30) { 

 Call:
         stop("nmse out of range") 

 Call:
     } 

 Call:
     m <- frequency(y) 

 Call:
     if (any(upper < lower)) { 

 Call:
         stop("Lower limits must be less than upper limits") 

 Call:
     } 

 Call:
     if (class(model) == "ets") { 

 Call:
         alpha <- max(model$par["alpha"], 1e-10) 

 Call:
         beta <- model$par["beta"] 

 Call:
         if (is.na(beta)) { 

 Call:
             beta <- NULL 

 Call:
         } 

 Call:
         gamma <- model$par["gamma"] 

 Call:
         if (is.na(gamma)) { 

 Call:
             gamma <- NULL 

 Call:
         } 

 Call:
         phi <- model$par["phi"] 

 Call:
         if (is.na(phi)) { 

 Call:
             phi <- NULL 

 Call:
         } 

 Call:
         modelcomponents <- paste(model$components[1], model$components[2],  

 Call:
             model$components[3], sep = "") 

 Call:
         damped <- (model$components[4] == "TRUE") 

 Call:
         if (use.initial.values) { 

 Call:
             errortype <- substr(modelcomponents, 1, 1) 

 Call:
             trendtype <- substr(modelcomponents, 2, 2) 

 Call:
             seasontype <- substr(modelcomponents, 3, 3) 

 Call:
             e <- pegelsresid.C(y, m, model$initstate, errortype,  

 Call:
                 trendtype, seasontype, damped, alpha, beta, gamma,  

 Call:
                 phi, nmse) 

 Call:
             np <- length(model$par) + 1 

 Call:
             model$loglik <- -0.5 * e$lik 

 Call:
             model$aic <- e$lik + 2 * np 

 Call:
             model$bic <- e$lik + log(ny) * np 

 Call:
             model$aicc <- model$aic + 2 * np * (np + 1)/(ny -  

 Call:
                 np - 1) 

 Call:
             model$mse <- e$amse[1] 

 Call:
             model$amse <- mean(e$amse) 

 Call:
             tsp.y <- tsp(y) 

 Call:
             model$states <- ts(e$states, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1] - 1/tsp.y[3]) 

 Call:
             colnames(model$states)[1] <- "l" 

 Call:
             if (trendtype != "N") { 

 Call:
                 colnames(model$states)[2] <- "b" 

 Call:
             } 

 Call:
             if (seasontype != "N") { 

 Call:
                 colnames(model$states)[(2 + (trendtype != "N")):ncol(model$states)] <- paste("s",  

 Call:
                   1:m, sep = "") 

 Call:
             } 

 Call:
             if (errortype == "A") { 

 Call:
                 model$fitted <- ts(y - e$e, frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             else { 

 Call:
                 model$fitted <- ts(y/(1 + e$e), frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             model$residuals <- ts(e$e, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1]) 

 Call:
             model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
                 np) 

 Call:
             model$x <- orig.y 

 Call:
             model$series <- seriesname 

 Call:
             if (!is.null(lambda)) { 

 Call:
                 model$fitted <- InvBoxCox(model$fitted, lambda,  

 Call:
                   biasadj, var(model$residuals)) 

 Call:
                 attr(lambda, "biasadj") <- biasadj 

 Call:
             } 

 Call:
             model$lambda <- lambda 

 Call:
             return(model) 

 Call:
         } 

 Call:
         else { 

 Call:
             model <- modelcomponents 

 Call:
             if (missing(use.initial.values)) { 

 Call:
                 message("Model is being refit with current smoothing parameters but initial states are being re-estimated.\nSet 'use.initial.values=TRUE' if you want to re-use existing initial values.") 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     errortype <- substr(model, 1, 1) 

 Call:
     trendtype <- substr(model, 2, 2) 

 Call:
     seasontype <- substr(model, 3, 3) 

 Call:
     if (!is.element(errortype, c("M", "A", "Z"))) { 

 Call:
         stop("Invalid error type") 

 Call:
     } 

 Call:
     if (!is.element(trendtype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid trend type") 

 Call:
     } 

 Call:
     if (!is.element(seasontype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid season type") 

 Call:
     } 

 Call:
     if (m < 1 || length(y) <= m) { 

 Call:
         seasontype <- "N" 

 Call:
     } 

 Call:
     if (m == 1) { 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             stop("Nonseasonal data") 

 Call:
         } 

 Call:
         else { 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (m > 24) { 

 Call:
         if (is.element(seasontype, c("A", "M"))) { 

 Call:
             stop("Frequency too high") 

 Call:
         } 

 Call:
         else if (seasontype == "Z") { 

 Call:
             warning("I can't handle data with frequency greater than 24. Seasonality will be ignored. Try stlf() if you need seasonal forecasts.") 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (restrict) { 

 Call:
         if ((errortype == "A" && (trendtype == "M" || seasontype ==  

 Call:
             "M")) | (errortype == "M" && trendtype == "M" &&  

 Call:
             seasontype == "A") || (additive.only && (errortype ==  

 Call:
             "M" || trendtype == "M" || seasontype == "M"))) { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     data.positive <- (min(y) > 0) 

 Call:
     if (!data.positive && errortype == "M") { 

 Call:
         stop("Inappropriate model for data with negative or zero values") 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         if (damped && trendtype == "N") { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     n <- length(y) 

 Call:
     npars <- 2L 

 Call:
     if (trendtype == "A" || trendtype == "M") { 

 Call:
         npars <- npars + 2L 

 Call:
     } 

 Call:
     if (seasontype == "A" || seasontype == "M") { 

 Call:
         npars <- npars + m 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         npars <- npars + as.numeric(damped) 

 Call:
     } 

 Call:
     if (n <= npars + 4L) { 

 Call:
         if (!is.null(damped)) { 

 Call:
             if (damped) { 

 Call:
                 warning("Not enough data to use damping") 

 Call:
             } 

 Call:
         } 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = gamma, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), seasonal = ifelse(seasontype != "A",  

 Call:
                   "multiplicative", "additive"), lambda = lambda,  

 Call:
                 biasadj = biasadj, warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Seasonal component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "A" || trendtype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
                 silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Trend component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "N" && seasontype == "N") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
                 gamma = FALSE, lambda = lambda, biasadj = biasadj,  

 Call:
                 warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
         } 

 Call:
         fit1 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         fit2 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         if ("try-error" %in% class(fit1)) { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         else if (fit1$sigma2 < fit2$sigma2) { 

 Call:
             fit <- fit1 

 Call:
         } 

 Call:
         else { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         if ("try-error" %in% class(fit))  

 Call:
             stop("Unable to estimate a model.") 

 Call:
         fit$call <- match.call() 

 Call:
         fit$method <- as.character(fit) 

 Call:
         fit$series <- deparse(substitute(y)) 

 Call:
         return(fit) 

 Call:
     } 

 Call:
     if (errortype == "Z") { 

 Call:
         errortype <- c("A", "M") 

 Call:
     } 

 Call:
     if (trendtype == "Z") { 

 Call:
         if (allow.multiplicative.trend) { 

 Call:
             trendtype <- c("N", "A", "M") 

 Call:
         } 

 Call:
         else { 

 Call:
             trendtype <- c("N", "A") 

 Call:
         } 

 Call:
     } 

 Call:
     if (seasontype == "Z") { 

 Call:
         seasontype <- c("N", "A", "M") 

 Call:
     } 

 Call:
     if (is.null(damped)) { 

 Call:
         damped <- c(TRUE, FALSE) 

 Call:
     } 

 Call:
     best.ic <- Inf 

 Call:
     for (i in 1:length(errortype)) { 

 Call:
         for (j in 1:length(trendtype)) { 

 Call:
             for (k in 1:length(seasontype)) { 

 Call:
                 for (l in 1:length(damped)) { 

 Call:
                   if (trendtype[j] == "N" && damped[l]) { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   if (restrict) { 

 Call:
                     if (errortype[i] == "A" && (trendtype[j] ==  

 Call:
                       "M" || seasontype[k] == "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (errortype[i] == "M" && trendtype[j] ==  

 Call:
                       "M" && seasontype[k] == "A") { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (additive.only && (errortype[i] == "M" ||  

 Call:
                       trendtype[j] == "M" || seasontype[k] ==  

 Call:
                       "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                   } 

 Call:
                   if (!data.positive && errortype[i] == "M") { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   fit <- try(etsmodel(y, errortype[i], trendtype[j],  

 Call:
                     seasontype[k], damped[l], alpha, beta, gamma,  

 Call:
                     phi, lower = lower, upper = upper, opt.crit = opt.crit,  

 Call:
                     nmse = nmse, bounds = bounds, ...), silent = TRUE) 

 Call:
                   if (is.element("try-error", class(fit)))  

 Call:
                     fit.ic <- Inf 

 Call:
                   else fit.ic <- switch(ic, aic = fit$aic, bic = fit$bic,  

 Call:
                     aicc = fit$aicc) 

 Call:
                   if (!is.na(fit.ic)) { 

 Call:
                     if (fit.ic < best.ic) { 

 Call:
                       model <- fit 

 Call:
                       best.ic <- fit.ic 

 Call:
                       best.e <- errortype[i] 

 Call:
                       best.t <- trendtype[j] 

 Call:
                       best.s <- seasontype[k] 

 Call:
                       best.d <- damped[l] 

 Call:
                     } 

 Call:
                   } 

 Call:
                 } 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     if (best.ic == Inf) { 

 Call:
         stop("No model able to be fitted") 

 Call:
     } 

 Call:
     model$m <- m 

 Call:
     model$method <- paste("ETS(", best.e, ",", best.t, ifelse(best.d,  

 Call:
         "d", ""), ",", best.s, ")", sep = "") 

 Call:
     model$series <- seriesname 

 Call:
     model$components <- c(best.e, best.t, best.s, best.d) 

 Call:
     model$call <- match.call() 

 Call:
     model$initstate <- model$states[1, ] 

 Call:
     np <- length(model$par) 

 Call:
     model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
         np) 

 Call:
     model$x <- orig.y 

 Call:
     if (!is.null(lambda)) { 

 Call:
         model$fitted <- InvBoxCox(model$fitted, lambda, biasadj,  

 Call:
             var(model$residuals)) 

 Call:
         attr(lambda, "biasadj") <- biasadj 

 Call:
     } 

 Call:
     model$lambda <- lambda 

 Call:
     return(structure(model, class = "ets")) 

 Call:
 })(y = structure(c(2.27991240737132, 2.04325140722279, 2.04325140722279,  

 Call:
 2.04325140722279, 1.80659040707428, 1.80659040707428, 1.80659040707428,  

 Call:
 1.80659040707428, 1.56992940692578, 1.56992940692578, 1.56992940692578,  

 Call:
 1.56992940692578, 1.56992940692578, 1.56992940692578, 1.33326840677727,  

 Call:
 1.33326840677727, 1.33326840677727, 1.33326840677727, 1.33326840677727,  

 Call:
 1.09660740662875, 1.09660740662875, 0.859946406480239, 0.859946406480239,  

 Call:
 0.623285406331733, 0.623285406331733, 0.623285406331733, 0.386624406183227,  

 Call:
 0.386624406183227, 0.386624406183227, 0.1499634060347, 0.1499634060347,  

 Call:
 0.1499634060347, -0.0866975941138058, -0.0866975941138058, -0.0866975941138058,  

 Call:
 -0.0866975941138058, -0.0866975941138058, -0.0866975941138058,  

 Call:
 -0.0866975941138058, -0.0866975941138058, -0.0866975941138058,  

 Call:
 -0.0866975941138058, -0.0866975941138058, -0.0866975941138058,  

 Call:
 -0.0866975941138058, -0.0866975941138058, -0.0866975941138058,  

 Call:
 0.1499634060347, 0.1499634060347, 0.1499634060347, 0.1499634060347,  

 Call:
 0.1499634060347, 0.386624406183227, 0.386624406183227, 0.1499634060347,  

 Call:
 -0.0866975941138058, -0.323358594262312, -0.323358594262312,  

 Call:
 -0.323358594262312, -0.323358594262312, -0.323358594262312, -0.323358594262312,  

 Call:
 -0.323358594262312, -0.323358594262312, -0.323358594262312, -0.560019594410818,  

 Call:
 -0.796680594559345, -0.796680594559345, -1.03334159470785, -1.03334159470785,  

 Call:
 -1.03334159470785, -1.27000259485636, -1.27000259485636, -1.27000259485636,  

 Call:
 -1.27000259485636, -1.27000259485636, -1.27000259485636, -1.27000259485636,  

 Call:
 -1.27000259485636, -1.27000259485636, -1.27000259485636, -1.03334159470785,  

 Call:
 -1.03334159470785, -1.03334159470785, -1.03334159470785, -1.03334159470785,  

 Call:
 -1.03334159470785, -1.03334159470785, -1.03334159470785, -1.03334159470785,  

 Call:
 -1.03334159470785, -1.03334159470785, -1.03334159470785, -0.796680594559345,  

 Call:
 -0.796680594559345, -0.796680594559345, -0.560019594410818, -0.796680594559345,  

 Call:
 -0.796680594559345, -0.796680594559345, -0.796680594559345), .Tsp = c(1,  

 Call:
 101, 1), class = "ts")) 

  Smoothing parameters:
    alpha = 0.8731 
    beta  = 0.1479 
    phi   = 0.8457 

  Initial states:
    l = 2.4475 
    b = -0.1903 

  sigma:  0.1099

     AIC     AICc      BIC 
26.99270 27.88632 42.68343 

$modelList$model9
ETS(A,N,N) 

Call:
 (function (y, model = "ZZZ", damped = NULL, alpha = NULL, beta = NULL,  

 Call:
     gamma = NULL, phi = NULL, additive.only = FALSE, lambda = NULL,  

 Call:
     biasadj = FALSE, lower = c(rep(1e-04, 3), 0.8), upper = c(rep(0.9999,  

 Call:
         3), 0.98), opt.crit = c("lik", "amse", "mse", "sigma",  

 Call:
         "mae"), nmse = 3, bounds = c("both", "usual", "admissible"),  

 Call:
     ic = c("aicc", "aic", "bic"), restrict = TRUE, allow.multiplicative.trend = FALSE,  

 Call:
     use.initial.values = FALSE, na.action = c("na.contiguous",  

 Call:
         "na.interp", "na.fail"), ...)  

 Call:
 { 

 Call:
     opt.crit <- match.arg(opt.crit) 

 Call:
     bounds <- match.arg(bounds) 

 Call:
     ic <- match.arg(ic) 

 Call:
     if (!is.function(na.action)) { 

 Call:
         na.fn_name <- match.arg(na.action) 

 Call:
         na.action <- get(na.fn_name) 

 Call:
     } 

 Call:
     seriesname <- deparse(substitute(y)) 

 Call:
     if (any(class(y) %in% c("data.frame", "list", "matrix", "mts"))) { 

 Call:
         stop("y should be a univariate time series") 

 Call:
     } 

 Call:
     y <- as.ts(y) 

 Call:
     if (missing(model) && is.constant(y)) { 

 Call:
         return(ses(y, alpha = 0.99999, initial = "simple")$model) 

 Call:
     } 

 Call:
     ny <- length(y) 

 Call:
     y <- na.action(y) 

 Call:
     if (ny != length(y) && na.fn_name == "na.contiguous") { 

 Call:
         warning("Missing values encountered. Using longest contiguous portion of time series") 

 Call:
         ny <- length(y) 

 Call:
     } 

 Call:
     orig.y <- y 

 Call:
     if (identical(class(model), "ets") && is.null(lambda)) { 

 Call:
         lambda <- model$lambda 

 Call:
     } 

 Call:
     if (!is.null(lambda)) { 

 Call:
         y <- BoxCox(y, lambda) 

 Call:
         lambda <- attr(y, "lambda") 

 Call:
         additive.only <- TRUE 

 Call:
     } 

 Call:
     if (nmse < 1 || nmse > 30) { 

 Call:
         stop("nmse out of range") 

 Call:
     } 

 Call:
     m <- frequency(y) 

 Call:
     if (any(upper < lower)) { 

 Call:
         stop("Lower limits must be less than upper limits") 

 Call:
     } 

 Call:
     if (class(model) == "ets") { 

 Call:
         alpha <- max(model$par["alpha"], 1e-10) 

 Call:
         beta <- model$par["beta"] 

 Call:
         if (is.na(beta)) { 

 Call:
             beta <- NULL 

 Call:
         } 

 Call:
         gamma <- model$par["gamma"] 

 Call:
         if (is.na(gamma)) { 

 Call:
             gamma <- NULL 

 Call:
         } 

 Call:
         phi <- model$par["phi"] 

 Call:
         if (is.na(phi)) { 

 Call:
             phi <- NULL 

 Call:
         } 

 Call:
         modelcomponents <- paste(model$components[1], model$components[2],  

 Call:
             model$components[3], sep = "") 

 Call:
         damped <- (model$components[4] == "TRUE") 

 Call:
         if (use.initial.values) { 

 Call:
             errortype <- substr(modelcomponents, 1, 1) 

 Call:
             trendtype <- substr(modelcomponents, 2, 2) 

 Call:
             seasontype <- substr(modelcomponents, 3, 3) 

 Call:
             e <- pegelsresid.C(y, m, model$initstate, errortype,  

 Call:
                 trendtype, seasontype, damped, alpha, beta, gamma,  

 Call:
                 phi, nmse) 

 Call:
             np <- length(model$par) + 1 

 Call:
             model$loglik <- -0.5 * e$lik 

 Call:
             model$aic <- e$lik + 2 * np 

 Call:
             model$bic <- e$lik + log(ny) * np 

 Call:
             model$aicc <- model$aic + 2 * np * (np + 1)/(ny -  

 Call:
                 np - 1) 

 Call:
             model$mse <- e$amse[1] 

 Call:
             model$amse <- mean(e$amse) 

 Call:
             tsp.y <- tsp(y) 

 Call:
             model$states <- ts(e$states, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1] - 1/tsp.y[3]) 

 Call:
             colnames(model$states)[1] <- "l" 

 Call:
             if (trendtype != "N") { 

 Call:
                 colnames(model$states)[2] <- "b" 

 Call:
             } 

 Call:
             if (seasontype != "N") { 

 Call:
                 colnames(model$states)[(2 + (trendtype != "N")):ncol(model$states)] <- paste("s",  

 Call:
                   1:m, sep = "") 

 Call:
             } 

 Call:
             if (errortype == "A") { 

 Call:
                 model$fitted <- ts(y - e$e, frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             else { 

 Call:
                 model$fitted <- ts(y/(1 + e$e), frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             model$residuals <- ts(e$e, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1]) 

 Call:
             model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
                 np) 

 Call:
             model$x <- orig.y 

 Call:
             model$series <- seriesname 

 Call:
             if (!is.null(lambda)) { 

 Call:
                 model$fitted <- InvBoxCox(model$fitted, lambda,  

 Call:
                   biasadj, var(model$residuals)) 

 Call:
                 attr(lambda, "biasadj") <- biasadj 

 Call:
             } 

 Call:
             model$lambda <- lambda 

 Call:
             return(model) 

 Call:
         } 

 Call:
         else { 

 Call:
             model <- modelcomponents 

 Call:
             if (missing(use.initial.values)) { 

 Call:
                 message("Model is being refit with current smoothing parameters but initial states are being re-estimated.\nSet 'use.initial.values=TRUE' if you want to re-use existing initial values.") 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     errortype <- substr(model, 1, 1) 

 Call:
     trendtype <- substr(model, 2, 2) 

 Call:
     seasontype <- substr(model, 3, 3) 

 Call:
     if (!is.element(errortype, c("M", "A", "Z"))) { 

 Call:
         stop("Invalid error type") 

 Call:
     } 

 Call:
     if (!is.element(trendtype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid trend type") 

 Call:
     } 

 Call:
     if (!is.element(seasontype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid season type") 

 Call:
     } 

 Call:
     if (m < 1 || length(y) <= m) { 

 Call:
         seasontype <- "N" 

 Call:
     } 

 Call:
     if (m == 1) { 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             stop("Nonseasonal data") 

 Call:
         } 

 Call:
         else { 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (m > 24) { 

 Call:
         if (is.element(seasontype, c("A", "M"))) { 

 Call:
             stop("Frequency too high") 

 Call:
         } 

 Call:
         else if (seasontype == "Z") { 

 Call:
             warning("I can't handle data with frequency greater than 24. Seasonality will be ignored. Try stlf() if you need seasonal forecasts.") 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (restrict) { 

 Call:
         if ((errortype == "A" && (trendtype == "M" || seasontype ==  

 Call:
             "M")) | (errortype == "M" && trendtype == "M" &&  

 Call:
             seasontype == "A") || (additive.only && (errortype ==  

 Call:
             "M" || trendtype == "M" || seasontype == "M"))) { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     data.positive <- (min(y) > 0) 

 Call:
     if (!data.positive && errortype == "M") { 

 Call:
         stop("Inappropriate model for data with negative or zero values") 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         if (damped && trendtype == "N") { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     n <- length(y) 

 Call:
     npars <- 2L 

 Call:
     if (trendtype == "A" || trendtype == "M") { 

 Call:
         npars <- npars + 2L 

 Call:
     } 

 Call:
     if (seasontype == "A" || seasontype == "M") { 

 Call:
         npars <- npars + m 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         npars <- npars + as.numeric(damped) 

 Call:
     } 

 Call:
     if (n <= npars + 4L) { 

 Call:
         if (!is.null(damped)) { 

 Call:
             if (damped) { 

 Call:
                 warning("Not enough data to use damping") 

 Call:
             } 

 Call:
         } 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = gamma, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), seasonal = ifelse(seasontype != "A",  

 Call:
                   "multiplicative", "additive"), lambda = lambda,  

 Call:
                 biasadj = biasadj, warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Seasonal component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "A" || trendtype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
                 silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Trend component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "N" && seasontype == "N") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
                 gamma = FALSE, lambda = lambda, biasadj = biasadj,  

 Call:
                 warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
         } 

 Call:
         fit1 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         fit2 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         if ("try-error" %in% class(fit1)) { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         else if (fit1$sigma2 < fit2$sigma2) { 

 Call:
             fit <- fit1 

 Call:
         } 

 Call:
         else { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         if ("try-error" %in% class(fit))  

 Call:
             stop("Unable to estimate a model.") 

 Call:
         fit$call <- match.call() 

 Call:
         fit$method <- as.character(fit) 

 Call:
         fit$series <- deparse(substitute(y)) 

 Call:
         return(fit) 

 Call:
     } 

 Call:
     if (errortype == "Z") { 

 Call:
         errortype <- c("A", "M") 

 Call:
     } 

 Call:
     if (trendtype == "Z") { 

 Call:
         if (allow.multiplicative.trend) { 

 Call:
             trendtype <- c("N", "A", "M") 

 Call:
         } 

 Call:
         else { 

 Call:
             trendtype <- c("N", "A") 

 Call:
         } 

 Call:
     } 

 Call:
     if (seasontype == "Z") { 

 Call:
         seasontype <- c("N", "A", "M") 

 Call:
     } 

 Call:
     if (is.null(damped)) { 

 Call:
         damped <- c(TRUE, FALSE) 

 Call:
     } 

 Call:
     best.ic <- Inf 

 Call:
     for (i in 1:length(errortype)) { 

 Call:
         for (j in 1:length(trendtype)) { 

 Call:
             for (k in 1:length(seasontype)) { 

 Call:
                 for (l in 1:length(damped)) { 

 Call:
                   if (trendtype[j] == "N" && damped[l]) { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   if (restrict) { 

 Call:
                     if (errortype[i] == "A" && (trendtype[j] ==  

 Call:
                       "M" || seasontype[k] == "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (errortype[i] == "M" && trendtype[j] ==  

 Call:
                       "M" && seasontype[k] == "A") { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (additive.only && (errortype[i] == "M" ||  

 Call:
                       trendtype[j] == "M" || seasontype[k] ==  

 Call:
                       "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                   } 

 Call:
                   if (!data.positive && errortype[i] == "M") { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   fit <- try(etsmodel(y, errortype[i], trendtype[j],  

 Call:
                     seasontype[k], damped[l], alpha, beta, gamma,  

 Call:
                     phi, lower = lower, upper = upper, opt.crit = opt.crit,  

 Call:
                     nmse = nmse, bounds = bounds, ...), silent = TRUE) 

 Call:
                   if (is.element("try-error", class(fit)))  

 Call:
                     fit.ic <- Inf 

 Call:
                   else fit.ic <- switch(ic, aic = fit$aic, bic = fit$bic,  

 Call:
                     aicc = fit$aicc) 

 Call:
                   if (!is.na(fit.ic)) { 

 Call:
                     if (fit.ic < best.ic) { 

 Call:
                       model <- fit 

 Call:
                       best.ic <- fit.ic 

 Call:
                       best.e <- errortype[i] 

 Call:
                       best.t <- trendtype[j] 

 Call:
                       best.s <- seasontype[k] 

 Call:
                       best.d <- damped[l] 

 Call:
                     } 

 Call:
                   } 

 Call:
                 } 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     if (best.ic == Inf) { 

 Call:
         stop("No model able to be fitted") 

 Call:
     } 

 Call:
     model$m <- m 

 Call:
     model$method <- paste("ETS(", best.e, ",", best.t, ifelse(best.d,  

 Call:
         "d", ""), ",", best.s, ")", sep = "") 

 Call:
     model$series <- seriesname 

 Call:
     model$components <- c(best.e, best.t, best.s, best.d) 

 Call:
     model$call <- match.call() 

 Call:
     model$initstate <- model$states[1, ] 

 Call:
     np <- length(model$par) 

 Call:
     model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
         np) 

 Call:
     model$x <- orig.y 

 Call:
     if (!is.null(lambda)) { 

 Call:
         model$fitted <- InvBoxCox(model$fitted, lambda, biasadj,  

 Call:
             var(model$residuals)) 

 Call:
         attr(lambda, "biasadj") <- biasadj 

 Call:
     } 

 Call:
     model$lambda <- lambda 

 Call:
     return(structure(model, class = "ets")) 

 Call:
 })(y = structure(c(0.128897115165417, 0.00331568141904609, 0.045176159334503,  

 Call:
 0.380059982658158, 0.526571655362256, 0.756804283897269, 0.652153089108627,  

 Call:
 0.861455478685911, 1.2172695409673, 1.19633930200957, 1.44750216950231,  

 Call:
 1.42657193054458, 1.59401384220641, 1.42657193054458, 1.42657193054458,  

 Call:
 1.30099049679821, 1.23819977992502, 1.04982762930547, 1.02889739034774,  

 Call:
 1.00796715139001, 0.819595000770454, 0.673083328066355, 0.568432133277713,  

 Call:
 0.421920460573615, 0.317269265784973, 0.275408787869516, 0.275408787869516,  

 Call:
 0.275408787869516, 0.233548309954059, 0.254478548911788, 0.0870366372499599,  

 Call:
 6.34517808561076, 0.987036912432282, 0.00331568141904609, -0.143195991285053,  

 Call:
 -0.164126230242782, -0.18505646920051, -0.18505646920051, -0.226916947115967,  

 Call:
 -0.143195991285053, -0.101335513369596, 0.0242459203767745, 0.170757593080874,  

 Call:
 0.296339026827244, 0.254478548911788, 0.107966876207688, 0.0870366372499599,  

 Call:
 -0.289707663989152, -0.205986708158238, 0.233548309954059, 0.275408787869516,  

 Call:
 0.170757593080874, -0.624591487312807, -0.0594750354541393, 0.0661063982922314,  

 Call:
 -0.164126230242782, -0.226916947115967, -0.18505646920051, 0.107966876207688,  

 Call:
 0.0661063982922314, 0.0242459203767745, -0.0176145575386824,  

 Call:
 -0.352498380862338, 0.0870366372499599, 0.212618070996331, 0.254478548911788,  

 Call:
 -0.499010053566437, -0.812963637932363, -1.04319626646738, -1.12691722229829,  

 Call:
 -1.29435913396012, -1.33621961187557, -1.18970793917147, -1.2106381781292,  

 Call:
 -1.31528937291784, -1.46180104562194, -1.44087080666422, -1.3571498508333,  

 Call:
 -0.875754354805548, -1.33621961187557, -1.52459176249513, -1.29435913396012,  

 Call:
 -1.18970793917147, -1.08505674438283, -1.16877770021375, -1.0641265054251,  

 Call:
 -0.833893876890092, -0.98040554959419, -0.854824115847819, -0.58273100939735,  

 Call:
 -0.247847186073695, -0.289707663989152, -0.268777425031424, -0.45714957565098,  

 Call:
 -0.101335513369596, -0.0385447964964108, -0.750172921059178,  

 Call:
 -0.268777425031424, -0.310637902946881, -0.0385447964964108,  

 Call:
 0.233548309954059), .Tsp = c(1, 101, 1), class = "ts")) 

  Smoothing parameters:
    alpha = 0.3077 

  Initial states:
    l = 0.2709 

  sigma:  0.7401

     AIC     AICc      BIC 
409.3027 409.5501 417.1480 

$modelList$model10
ETS(A,N,N) 

Call:
 (function (y, model = "ZZZ", damped = NULL, alpha = NULL, beta = NULL,  

 Call:
     gamma = NULL, phi = NULL, additive.only = FALSE, lambda = NULL,  

 Call:
     biasadj = FALSE, lower = c(rep(1e-04, 3), 0.8), upper = c(rep(0.9999,  

 Call:
         3), 0.98), opt.crit = c("lik", "amse", "mse", "sigma",  

 Call:
         "mae"), nmse = 3, bounds = c("both", "usual", "admissible"),  

 Call:
     ic = c("aicc", "aic", "bic"), restrict = TRUE, allow.multiplicative.trend = FALSE,  

 Call:
     use.initial.values = FALSE, na.action = c("na.contiguous",  

 Call:
         "na.interp", "na.fail"), ...)  

 Call:
 { 

 Call:
     opt.crit <- match.arg(opt.crit) 

 Call:
     bounds <- match.arg(bounds) 

 Call:
     ic <- match.arg(ic) 

 Call:
     if (!is.function(na.action)) { 

 Call:
         na.fn_name <- match.arg(na.action) 

 Call:
         na.action <- get(na.fn_name) 

 Call:
     } 

 Call:
     seriesname <- deparse(substitute(y)) 

 Call:
     if (any(class(y) %in% c("data.frame", "list", "matrix", "mts"))) { 

 Call:
         stop("y should be a univariate time series") 

 Call:
     } 

 Call:
     y <- as.ts(y) 

 Call:
     if (missing(model) && is.constant(y)) { 

 Call:
         return(ses(y, alpha = 0.99999, initial = "simple")$model) 

 Call:
     } 

 Call:
     ny <- length(y) 

 Call:
     y <- na.action(y) 

 Call:
     if (ny != length(y) && na.fn_name == "na.contiguous") { 

 Call:
         warning("Missing values encountered. Using longest contiguous portion of time series") 

 Call:
         ny <- length(y) 

 Call:
     } 

 Call:
     orig.y <- y 

 Call:
     if (identical(class(model), "ets") && is.null(lambda)) { 

 Call:
         lambda <- model$lambda 

 Call:
     } 

 Call:
     if (!is.null(lambda)) { 

 Call:
         y <- BoxCox(y, lambda) 

 Call:
         lambda <- attr(y, "lambda") 

 Call:
         additive.only <- TRUE 

 Call:
     } 

 Call:
     if (nmse < 1 || nmse > 30) { 

 Call:
         stop("nmse out of range") 

 Call:
     } 

 Call:
     m <- frequency(y) 

 Call:
     if (any(upper < lower)) { 

 Call:
         stop("Lower limits must be less than upper limits") 

 Call:
     } 

 Call:
     if (class(model) == "ets") { 

 Call:
         alpha <- max(model$par["alpha"], 1e-10) 

 Call:
         beta <- model$par["beta"] 

 Call:
         if (is.na(beta)) { 

 Call:
             beta <- NULL 

 Call:
         } 

 Call:
         gamma <- model$par["gamma"] 

 Call:
         if (is.na(gamma)) { 

 Call:
             gamma <- NULL 

 Call:
         } 

 Call:
         phi <- model$par["phi"] 

 Call:
         if (is.na(phi)) { 

 Call:
             phi <- NULL 

 Call:
         } 

 Call:
         modelcomponents <- paste(model$components[1], model$components[2],  

 Call:
             model$components[3], sep = "") 

 Call:
         damped <- (model$components[4] == "TRUE") 

 Call:
         if (use.initial.values) { 

 Call:
             errortype <- substr(modelcomponents, 1, 1) 

 Call:
             trendtype <- substr(modelcomponents, 2, 2) 

 Call:
             seasontype <- substr(modelcomponents, 3, 3) 

 Call:
             e <- pegelsresid.C(y, m, model$initstate, errortype,  

 Call:
                 trendtype, seasontype, damped, alpha, beta, gamma,  

 Call:
                 phi, nmse) 

 Call:
             np <- length(model$par) + 1 

 Call:
             model$loglik <- -0.5 * e$lik 

 Call:
             model$aic <- e$lik + 2 * np 

 Call:
             model$bic <- e$lik + log(ny) * np 

 Call:
             model$aicc <- model$aic + 2 * np * (np + 1)/(ny -  

 Call:
                 np - 1) 

 Call:
             model$mse <- e$amse[1] 

 Call:
             model$amse <- mean(e$amse) 

 Call:
             tsp.y <- tsp(y) 

 Call:
             model$states <- ts(e$states, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1] - 1/tsp.y[3]) 

 Call:
             colnames(model$states)[1] <- "l" 

 Call:
             if (trendtype != "N") { 

 Call:
                 colnames(model$states)[2] <- "b" 

 Call:
             } 

 Call:
             if (seasontype != "N") { 

 Call:
                 colnames(model$states)[(2 + (trendtype != "N")):ncol(model$states)] <- paste("s",  

 Call:
                   1:m, sep = "") 

 Call:
             } 

 Call:
             if (errortype == "A") { 

 Call:
                 model$fitted <- ts(y - e$e, frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             else { 

 Call:
                 model$fitted <- ts(y/(1 + e$e), frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             model$residuals <- ts(e$e, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1]) 

 Call:
             model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
                 np) 

 Call:
             model$x <- orig.y 

 Call:
             model$series <- seriesname 

 Call:
             if (!is.null(lambda)) { 

 Call:
                 model$fitted <- InvBoxCox(model$fitted, lambda,  

 Call:
                   biasadj, var(model$residuals)) 

 Call:
                 attr(lambda, "biasadj") <- biasadj 

 Call:
             } 

 Call:
             model$lambda <- lambda 

 Call:
             return(model) 

 Call:
         } 

 Call:
         else { 

 Call:
             model <- modelcomponents 

 Call:
             if (missing(use.initial.values)) { 

 Call:
                 message("Model is being refit with current smoothing parameters but initial states are being re-estimated.\nSet 'use.initial.values=TRUE' if you want to re-use existing initial values.") 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     errortype <- substr(model, 1, 1) 

 Call:
     trendtype <- substr(model, 2, 2) 

 Call:
     seasontype <- substr(model, 3, 3) 

 Call:
     if (!is.element(errortype, c("M", "A", "Z"))) { 

 Call:
         stop("Invalid error type") 

 Call:
     } 

 Call:
     if (!is.element(trendtype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid trend type") 

 Call:
     } 

 Call:
     if (!is.element(seasontype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid season type") 

 Call:
     } 

 Call:
     if (m < 1 || length(y) <= m) { 

 Call:
         seasontype <- "N" 

 Call:
     } 

 Call:
     if (m == 1) { 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             stop("Nonseasonal data") 

 Call:
         } 

 Call:
         else { 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (m > 24) { 

 Call:
         if (is.element(seasontype, c("A", "M"))) { 

 Call:
             stop("Frequency too high") 

 Call:
         } 

 Call:
         else if (seasontype == "Z") { 

 Call:
             warning("I can't handle data with frequency greater than 24. Seasonality will be ignored. Try stlf() if you need seasonal forecasts.") 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (restrict) { 

 Call:
         if ((errortype == "A" && (trendtype == "M" || seasontype ==  

 Call:
             "M")) | (errortype == "M" && trendtype == "M" &&  

 Call:
             seasontype == "A") || (additive.only && (errortype ==  

 Call:
             "M" || trendtype == "M" || seasontype == "M"))) { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     data.positive <- (min(y) > 0) 

 Call:
     if (!data.positive && errortype == "M") { 

 Call:
         stop("Inappropriate model for data with negative or zero values") 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         if (damped && trendtype == "N") { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     n <- length(y) 

 Call:
     npars <- 2L 

 Call:
     if (trendtype == "A" || trendtype == "M") { 

 Call:
         npars <- npars + 2L 

 Call:
     } 

 Call:
     if (seasontype == "A" || seasontype == "M") { 

 Call:
         npars <- npars + m 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         npars <- npars + as.numeric(damped) 

 Call:
     } 

 Call:
     if (n <= npars + 4L) { 

 Call:
         if (!is.null(damped)) { 

 Call:
             if (damped) { 

 Call:
                 warning("Not enough data to use damping") 

 Call:
             } 

 Call:
         } 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = gamma, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), seasonal = ifelse(seasontype != "A",  

 Call:
                   "multiplicative", "additive"), lambda = lambda,  

 Call:
                 biasadj = biasadj, warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Seasonal component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "A" || trendtype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
                 silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Trend component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "N" && seasontype == "N") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
                 gamma = FALSE, lambda = lambda, biasadj = biasadj,  

 Call:
                 warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
         } 

 Call:
         fit1 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         fit2 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         if ("try-error" %in% class(fit1)) { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         else if (fit1$sigma2 < fit2$sigma2) { 

 Call:
             fit <- fit1 

 Call:
         } 

 Call:
         else { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         if ("try-error" %in% class(fit))  

 Call:
             stop("Unable to estimate a model.") 

 Call:
         fit$call <- match.call() 

 Call:
         fit$method <- as.character(fit) 

 Call:
         fit$series <- deparse(substitute(y)) 

 Call:
         return(fit) 

 Call:
     } 

 Call:
     if (errortype == "Z") { 

 Call:
         errortype <- c("A", "M") 

 Call:
     } 

 Call:
     if (trendtype == "Z") { 

 Call:
         if (allow.multiplicative.trend) { 

 Call:
             trendtype <- c("N", "A", "M") 

 Call:
         } 

 Call:
         else { 

 Call:
             trendtype <- c("N", "A") 

 Call:
         } 

 Call:
     } 

 Call:
     if (seasontype == "Z") { 

 Call:
         seasontype <- c("N", "A", "M") 

 Call:
     } 

 Call:
     if (is.null(damped)) { 

 Call:
         damped <- c(TRUE, FALSE) 

 Call:
     } 

 Call:
     best.ic <- Inf 

 Call:
     for (i in 1:length(errortype)) { 

 Call:
         for (j in 1:length(trendtype)) { 

 Call:
             for (k in 1:length(seasontype)) { 

 Call:
                 for (l in 1:length(damped)) { 

 Call:
                   if (trendtype[j] == "N" && damped[l]) { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   if (restrict) { 

 Call:
                     if (errortype[i] == "A" && (trendtype[j] ==  

 Call:
                       "M" || seasontype[k] == "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (errortype[i] == "M" && trendtype[j] ==  

 Call:
                       "M" && seasontype[k] == "A") { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (additive.only && (errortype[i] == "M" ||  

 Call:
                       trendtype[j] == "M" || seasontype[k] ==  

 Call:
                       "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                   } 

 Call:
                   if (!data.positive && errortype[i] == "M") { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   fit <- try(etsmodel(y, errortype[i], trendtype[j],  

 Call:
                     seasontype[k], damped[l], alpha, beta, gamma,  

 Call:
                     phi, lower = lower, upper = upper, opt.crit = opt.crit,  

 Call:
                     nmse = nmse, bounds = bounds, ...), silent = TRUE) 

 Call:
                   if (is.element("try-error", class(fit)))  

 Call:
                     fit.ic <- Inf 

 Call:
                   else fit.ic <- switch(ic, aic = fit$aic, bic = fit$bic,  

 Call:
                     aicc = fit$aicc) 

 Call:
                   if (!is.na(fit.ic)) { 

 Call:
                     if (fit.ic < best.ic) { 

 Call:
                       model <- fit 

 Call:
                       best.ic <- fit.ic 

 Call:
                       best.e <- errortype[i] 

 Call:
                       best.t <- trendtype[j] 

 Call:
                       best.s <- seasontype[k] 

 Call:
                       best.d <- damped[l] 

 Call:
                     } 

 Call:
                   } 

 Call:
                 } 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     if (best.ic == Inf) { 

 Call:
         stop("No model able to be fitted") 

 Call:
     } 

 Call:
     model$m <- m 

 Call:
     model$method <- paste("ETS(", best.e, ",", best.t, ifelse(best.d,  

 Call:
         "d", ""), ",", best.s, ")", sep = "") 

 Call:
     model$series <- seriesname 

 Call:
     model$components <- c(best.e, best.t, best.s, best.d) 

 Call:
     model$call <- match.call() 

 Call:
     model$initstate <- model$states[1, ] 

 Call:
     np <- length(model$par) 

 Call:
     model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
         np) 

 Call:
     model$x <- orig.y 

 Call:
     if (!is.null(lambda)) { 

 Call:
         model$fitted <- InvBoxCox(model$fitted, lambda, biasadj,  

 Call:
             var(model$residuals)) 

 Call:
         attr(lambda, "biasadj") <- biasadj 

 Call:
     } 

 Call:
     model$lambda <- lambda 

 Call:
     return(structure(model, class = "ets")) 

 Call:
 })(y = structure(c(-1.58151548125171, 0.145328449628532, -0.718093515811591,  

 Call:
 -0.718093515811591, -0.718093515811591, -0.718093515811591, -0.718093515811591,  

 Call:
 -0.718093515811591, -1.58151548125171, -0.718093515811591, -0.718093515811591,  

 Call:
 0.145328449628532, 0.145328449628532, 0.145328449628532, 0.145328449628532,  

 Call:
 0.145328449628532, 0.145328449628532, 0.145328449628532, -0.718093515811591,  

 Call:
 0.145328449628532, -0.718093515811591, 0.145328449628532, -0.718093515811591,  

 Call:
 -0.718093515811591, 0.145328449628532, 0.145328449628532, 0.145328449628532,  

 Call:
 -0.718093515811591, -0.718093515811591, 0.145328449628532, 0.145328449628532,  

 Call:
 -0.718093515811591, 0.145328449628532, 0.145328449628532, 0.145328449628532,  

 Call:
 -0.718093515811591, -0.718093515811591, 0.145328449628532, 0.145328449628532,  

 Call:
 -0.718093515811591, -0.718093515811591, -0.718093515811591, -0.718093515811591,  

 Call:
 -0.718093515811591, 0.145328449628532, 1.00875041506866, 0.145328449628532,  

 Call:
 1.00875041506866, 1.00875041506866, 1.00875041506866, 1.00875041506866,  

 Call:
 1.00875041506866, 1.00875041506866, 1.00875041506866, 1.00875041506866,  

 Call:
 1.00875041506866, 1.00875041506866, 0.145328449628532, -0.718093515811591,  

 Call:
 -1.58151548125171, -0.718093515811591, -0.718093515811591, -0.718093515811591,  

 Call:
 -0.718093515811591, 0.145328449628532, 1.00875041506866, 0.145328449628532,  

 Call:
 0.145328449628532, 0.145328449628532, 0.145328449628532, 0.145328449628532,  

 Call:
 1.87217238050878, 0.145328449628532, -4.1717813775721, -2.44493744669185,  

 Call:
 -1.58151548125171, -0.718093515811591, 1.00875041506866, 5.32586024226929,  

 Call:
 1.00875041506866, 0.145328449628532, 0.145328449628532, 0.145328449628532,  

 Call:
 1.00875041506866, 0.145328449628532, 0.145328449628532, 0.145328449628532,  

 Call:
 1.00875041506866, 1.00875041506866, 1.00875041506866, 0.145328449628532,  

 Call:
 0.145328449628532, 0.145328449628532, 0.145328449628532, 0.145328449628532,  

 Call:
 0.145328449628532, 0.145328449628532, 1.00875041506866, 0.145328449628532,  

 Call:
 0.145328449628532, 0.145328449628532), .Tsp = c(1, 101, 1), class = "ts")) 

  Smoothing parameters:
    alpha = 0.6661 

  Initial states:
    l = -1.0989 

  sigma:  0.9749

     AIC     AICc      BIC 
464.9801 465.2275 472.8254 

$modelList$model11
ETS(A,A,N) 

Call:
 (function (y, model = "ZZZ", damped = NULL, alpha = NULL, beta = NULL,  

 Call:
     gamma = NULL, phi = NULL, additive.only = FALSE, lambda = NULL,  

 Call:
     biasadj = FALSE, lower = c(rep(1e-04, 3), 0.8), upper = c(rep(0.9999,  

 Call:
         3), 0.98), opt.crit = c("lik", "amse", "mse", "sigma",  

 Call:
         "mae"), nmse = 3, bounds = c("both", "usual", "admissible"),  

 Call:
     ic = c("aicc", "aic", "bic"), restrict = TRUE, allow.multiplicative.trend = FALSE,  

 Call:
     use.initial.values = FALSE, na.action = c("na.contiguous",  

 Call:
         "na.interp", "na.fail"), ...)  

 Call:
 { 

 Call:
     opt.crit <- match.arg(opt.crit) 

 Call:
     bounds <- match.arg(bounds) 

 Call:
     ic <- match.arg(ic) 

 Call:
     if (!is.function(na.action)) { 

 Call:
         na.fn_name <- match.arg(na.action) 

 Call:
         na.action <- get(na.fn_name) 

 Call:
     } 

 Call:
     seriesname <- deparse(substitute(y)) 

 Call:
     if (any(class(y) %in% c("data.frame", "list", "matrix", "mts"))) { 

 Call:
         stop("y should be a univariate time series") 

 Call:
     } 

 Call:
     y <- as.ts(y) 

 Call:
     if (missing(model) && is.constant(y)) { 

 Call:
         return(ses(y, alpha = 0.99999, initial = "simple")$model) 

 Call:
     } 

 Call:
     ny <- length(y) 

 Call:
     y <- na.action(y) 

 Call:
     if (ny != length(y) && na.fn_name == "na.contiguous") { 

 Call:
         warning("Missing values encountered. Using longest contiguous portion of time series") 

 Call:
         ny <- length(y) 

 Call:
     } 

 Call:
     orig.y <- y 

 Call:
     if (identical(class(model), "ets") && is.null(lambda)) { 

 Call:
         lambda <- model$lambda 

 Call:
     } 

 Call:
     if (!is.null(lambda)) { 

 Call:
         y <- BoxCox(y, lambda) 

 Call:
         lambda <- attr(y, "lambda") 

 Call:
         additive.only <- TRUE 

 Call:
     } 

 Call:
     if (nmse < 1 || nmse > 30) { 

 Call:
         stop("nmse out of range") 

 Call:
     } 

 Call:
     m <- frequency(y) 

 Call:
     if (any(upper < lower)) { 

 Call:
         stop("Lower limits must be less than upper limits") 

 Call:
     } 

 Call:
     if (class(model) == "ets") { 

 Call:
         alpha <- max(model$par["alpha"], 1e-10) 

 Call:
         beta <- model$par["beta"] 

 Call:
         if (is.na(beta)) { 

 Call:
             beta <- NULL 

 Call:
         } 

 Call:
         gamma <- model$par["gamma"] 

 Call:
         if (is.na(gamma)) { 

 Call:
             gamma <- NULL 

 Call:
         } 

 Call:
         phi <- model$par["phi"] 

 Call:
         if (is.na(phi)) { 

 Call:
             phi <- NULL 

 Call:
         } 

 Call:
         modelcomponents <- paste(model$components[1], model$components[2],  

 Call:
             model$components[3], sep = "") 

 Call:
         damped <- (model$components[4] == "TRUE") 

 Call:
         if (use.initial.values) { 

 Call:
             errortype <- substr(modelcomponents, 1, 1) 

 Call:
             trendtype <- substr(modelcomponents, 2, 2) 

 Call:
             seasontype <- substr(modelcomponents, 3, 3) 

 Call:
             e <- pegelsresid.C(y, m, model$initstate, errortype,  

 Call:
                 trendtype, seasontype, damped, alpha, beta, gamma,  

 Call:
                 phi, nmse) 

 Call:
             np <- length(model$par) + 1 

 Call:
             model$loglik <- -0.5 * e$lik 

 Call:
             model$aic <- e$lik + 2 * np 

 Call:
             model$bic <- e$lik + log(ny) * np 

 Call:
             model$aicc <- model$aic + 2 * np * (np + 1)/(ny -  

 Call:
                 np - 1) 

 Call:
             model$mse <- e$amse[1] 

 Call:
             model$amse <- mean(e$amse) 

 Call:
             tsp.y <- tsp(y) 

 Call:
             model$states <- ts(e$states, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1] - 1/tsp.y[3]) 

 Call:
             colnames(model$states)[1] <- "l" 

 Call:
             if (trendtype != "N") { 

 Call:
                 colnames(model$states)[2] <- "b" 

 Call:
             } 

 Call:
             if (seasontype != "N") { 

 Call:
                 colnames(model$states)[(2 + (trendtype != "N")):ncol(model$states)] <- paste("s",  

 Call:
                   1:m, sep = "") 

 Call:
             } 

 Call:
             if (errortype == "A") { 

 Call:
                 model$fitted <- ts(y - e$e, frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             else { 

 Call:
                 model$fitted <- ts(y/(1 + e$e), frequency = tsp.y[3],  

 Call:
                   start = tsp.y[1]) 

 Call:
             } 

 Call:
             model$residuals <- ts(e$e, frequency = tsp.y[3],  

 Call:
                 start = tsp.y[1]) 

 Call:
             model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
                 np) 

 Call:
             model$x <- orig.y 

 Call:
             model$series <- seriesname 

 Call:
             if (!is.null(lambda)) { 

 Call:
                 model$fitted <- InvBoxCox(model$fitted, lambda,  

 Call:
                   biasadj, var(model$residuals)) 

 Call:
                 attr(lambda, "biasadj") <- biasadj 

 Call:
             } 

 Call:
             model$lambda <- lambda 

 Call:
             return(model) 

 Call:
         } 

 Call:
         else { 

 Call:
             model <- modelcomponents 

 Call:
             if (missing(use.initial.values)) { 

 Call:
                 message("Model is being refit with current smoothing parameters but initial states are being re-estimated.\nSet 'use.initial.values=TRUE' if you want to re-use existing initial values.") 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     errortype <- substr(model, 1, 1) 

 Call:
     trendtype <- substr(model, 2, 2) 

 Call:
     seasontype <- substr(model, 3, 3) 

 Call:
     if (!is.element(errortype, c("M", "A", "Z"))) { 

 Call:
         stop("Invalid error type") 

 Call:
     } 

 Call:
     if (!is.element(trendtype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid trend type") 

 Call:
     } 

 Call:
     if (!is.element(seasontype, c("N", "A", "M", "Z"))) { 

 Call:
         stop("Invalid season type") 

 Call:
     } 

 Call:
     if (m < 1 || length(y) <= m) { 

 Call:
         seasontype <- "N" 

 Call:
     } 

 Call:
     if (m == 1) { 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             stop("Nonseasonal data") 

 Call:
         } 

 Call:
         else { 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (m > 24) { 

 Call:
         if (is.element(seasontype, c("A", "M"))) { 

 Call:
             stop("Frequency too high") 

 Call:
         } 

 Call:
         else if (seasontype == "Z") { 

 Call:
             warning("I can't handle data with frequency greater than 24. Seasonality will be ignored. Try stlf() if you need seasonal forecasts.") 

 Call:
             substr(model, 3, 3) <- seasontype <- "N" 

 Call:
         } 

 Call:
     } 

 Call:
     if (restrict) { 

 Call:
         if ((errortype == "A" && (trendtype == "M" || seasontype ==  

 Call:
             "M")) | (errortype == "M" && trendtype == "M" &&  

 Call:
             seasontype == "A") || (additive.only && (errortype ==  

 Call:
             "M" || trendtype == "M" || seasontype == "M"))) { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     data.positive <- (min(y) > 0) 

 Call:
     if (!data.positive && errortype == "M") { 

 Call:
         stop("Inappropriate model for data with negative or zero values") 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         if (damped && trendtype == "N") { 

 Call:
             stop("Forbidden model combination") 

 Call:
         } 

 Call:
     } 

 Call:
     n <- length(y) 

 Call:
     npars <- 2L 

 Call:
     if (trendtype == "A" || trendtype == "M") { 

 Call:
         npars <- npars + 2L 

 Call:
     } 

 Call:
     if (seasontype == "A" || seasontype == "M") { 

 Call:
         npars <- npars + m 

 Call:
     } 

 Call:
     if (!is.null(damped)) { 

 Call:
         npars <- npars + as.numeric(damped) 

 Call:
     } 

 Call:
     if (n <= npars + 4L) { 

 Call:
         if (!is.null(damped)) { 

 Call:
             if (damped) { 

 Call:
                 warning("Not enough data to use damping") 

 Call:
             } 

 Call:
         } 

 Call:
         if (seasontype == "A" || seasontype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = gamma, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), seasonal = ifelse(seasontype != "A",  

 Call:
                   "multiplicative", "additive"), lambda = lambda,  

 Call:
                 biasadj = biasadj, warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Seasonal component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "A" || trendtype == "M") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
                 gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                   "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
                 silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
             else { 

 Call:
                 warning("Trend component could not be estimated") 

 Call:
             } 

 Call:
         } 

 Call:
         if (trendtype == "N" && seasontype == "N") { 

 Call:
             fit <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
                 gamma = FALSE, lambda = lambda, biasadj = biasadj,  

 Call:
                 warnings = FALSE), silent = TRUE) 

 Call:
             if (!("try-error" %in% class(fit))) { 

 Call:
                 fit$call <- match.call() 

 Call:
                 fit$method <- as.character(fit) 

 Call:
                 fit$series <- deparse(substitute(y)) 

 Call:
                 return(fit) 

 Call:
             } 

 Call:
         } 

 Call:
         fit1 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = beta,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         fit2 <- try(HoltWintersZZ(orig.y, alpha = alpha, beta = FALSE,  

 Call:
             gamma = FALSE, phi = phi, exponential = (trendtype ==  

 Call:
                 "M"), lambda = lambda, biasadj = biasadj, warnings = FALSE),  

 Call:
             silent = TRUE) 

 Call:
         if ("try-error" %in% class(fit1)) { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         else if (fit1$sigma2 < fit2$sigma2) { 

 Call:
             fit <- fit1 

 Call:
         } 

 Call:
         else { 

 Call:
             fit <- fit2 

 Call:
         } 

 Call:
         if ("try-error" %in% class(fit))  

 Call:
             stop("Unable to estimate a model.") 

 Call:
         fit$call <- match.call() 

 Call:
         fit$method <- as.character(fit) 

 Call:
         fit$series <- deparse(substitute(y)) 

 Call:
         return(fit) 

 Call:
     } 

 Call:
     if (errortype == "Z") { 

 Call:
         errortype <- c("A", "M") 

 Call:
     } 

 Call:
     if (trendtype == "Z") { 

 Call:
         if (allow.multiplicative.trend) { 

 Call:
             trendtype <- c("N", "A", "M") 

 Call:
         } 

 Call:
         else { 

 Call:
             trendtype <- c("N", "A") 

 Call:
         } 

 Call:
     } 

 Call:
     if (seasontype == "Z") { 

 Call:
         seasontype <- c("N", "A", "M") 

 Call:
     } 

 Call:
     if (is.null(damped)) { 

 Call:
         damped <- c(TRUE, FALSE) 

 Call:
     } 

 Call:
     best.ic <- Inf 

 Call:
     for (i in 1:length(errortype)) { 

 Call:
         for (j in 1:length(trendtype)) { 

 Call:
             for (k in 1:length(seasontype)) { 

 Call:
                 for (l in 1:length(damped)) { 

 Call:
                   if (trendtype[j] == "N" && damped[l]) { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   if (restrict) { 

 Call:
                     if (errortype[i] == "A" && (trendtype[j] ==  

 Call:
                       "M" || seasontype[k] == "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (errortype[i] == "M" && trendtype[j] ==  

 Call:
                       "M" && seasontype[k] == "A") { 

 Call:
                       next 

 Call:
                     } 

 Call:
                     if (additive.only && (errortype[i] == "M" ||  

 Call:
                       trendtype[j] == "M" || seasontype[k] ==  

 Call:
                       "M")) { 

 Call:
                       next 

 Call:
                     } 

 Call:
                   } 

 Call:
                   if (!data.positive && errortype[i] == "M") { 

 Call:
                     next 

 Call:
                   } 

 Call:
                   fit <- try(etsmodel(y, errortype[i], trendtype[j],  

 Call:
                     seasontype[k], damped[l], alpha, beta, gamma,  

 Call:
                     phi, lower = lower, upper = upper, opt.crit = opt.crit,  

 Call:
                     nmse = nmse, bounds = bounds, ...), silent = TRUE) 

 Call:
                   if (is.element("try-error", class(fit)))  

 Call:
                     fit.ic <- Inf 

 Call:
                   else fit.ic <- switch(ic, aic = fit$aic, bic = fit$bic,  

 Call:
                     aicc = fit$aicc) 

 Call:
                   if (!is.na(fit.ic)) { 

 Call:
                     if (fit.ic < best.ic) { 

 Call:
                       model <- fit 

 Call:
                       best.ic <- fit.ic 

 Call:
                       best.e <- errortype[i] 

 Call:
                       best.t <- trendtype[j] 

 Call:
                       best.s <- seasontype[k] 

 Call:
                       best.d <- damped[l] 

 Call:
                     } 

 Call:
                   } 

 Call:
                 } 

 Call:
             } 

 Call:
         } 

 Call:
     } 

 Call:
     if (best.ic == Inf) { 

 Call:
         stop("No model able to be fitted") 

 Call:
     } 

 Call:
     model$m <- m 

 Call:
     model$method <- paste("ETS(", best.e, ",", best.t, ifelse(best.d,  

 Call:
         "d", ""), ",", best.s, ")", sep = "") 

 Call:
     model$series <- seriesname 

 Call:
     model$components <- c(best.e, best.t, best.s, best.d) 

 Call:
     model$call <- match.call() 

 Call:
     model$initstate <- model$states[1, ] 

 Call:
     np <- length(model$par) 

 Call:
     model$sigma2 <- sum(model$residuals^2, na.rm = TRUE)/(ny -  

 Call:
         np) 

 Call:
     model$x <- orig.y 

 Call:
     if (!is.null(lambda)) { 

 Call:
         model$fitted <- InvBoxCox(model$fitted, lambda, biasadj,  

 Call:
             var(model$residuals)) 

 Call:
         attr(lambda, "biasadj") <- biasadj 

 Call:
     } 

 Call:
     model$lambda <- lambda 

 Call:
     return(structure(model, class = "ets")) 

 Call:
 })(y = structure(c(-0.902908224493783, -0.902908224493783, -0.902908224493783,  

 Call:
 -0.902908224493783, -0.902908224493783, -1.03251841590065, -1.0843624924634,  

 Call:
 -1.13620656902614, -1.21397268387026, -1.26581676043301, -1.31766083699576,  

 Call:
 -1.42134899012125, -1.473193066684, -1.52503714324675, -1.57688121980949,  

 Call:
 -1.57688121980949, -1.60280325809087, -1.65464733465362, -1.68056937293499,  

 Call:
 -1.68056937293499, -1.68056937293499, -1.65464733465362, -1.70649141121636,  

 Call:
 -1.70649141121636, -1.68056937293499, -1.68056937293499, -1.62872529637224,  

 Call:
 -1.57688121980949, -1.52503714324675, -1.473193066684, -1.52503714324675,  

 Call:
 -0.695531918242795, -0.0993250377712041, -0.0993250377712041,  

 Call:
 -0.0215589229270829, 0.00436311535429002, 0.00436311535429002,  

 Call:
 -0.07340299948983, -0.07340299948983, 0.00436311535429002, 0.108051268479784,  

 Call:
 0.185817383323904, 0.341349613012145, 0.470959804419014, 0.419115727856267,  

 Call:
 0.470959804419014, 0.470959804419014, 0.44503776613764, 0.496881842700387,  

 Call:
 0.574647957544508, 0.548725919263134, 0.548725919263134, 0.496881842700387,  

 Call:
 0.548725919263134, 0.600569995825881, 0.548725919263134, 0.496881842700387,  

 Call:
 0.496881842700387, 0.600569995825881, 0.600569995825881, 0.678336110670002,  

 Call:
 0.704258148951375, 0.678336110670002, 0.730180187232749, 0.704258148951375,  

 Call:
 0.756102225514122, 0.756102225514122, 0.807946302076869, 0.833868340358242,  

 Call:
 0.833868340358242, 0.859790378639615, 0.88571241692099, 0.963478531765109,  

 Call:
 0.989400570046484, 1.01532260832786, 1.01532260832786, 1.0671666848906,  

 Call:
 1.11901076145335, 1.04124464660923, 1.04124464660923, 1.04124464660923,  

 Call:
 1.04124464660923, 0.963478531765109, 0.937556493483736, 0.911634455202363,  

 Call:
 0.937556493483736, 0.911634455202363, 0.911634455202363, 0.88571241692099,  

 Call:
 0.807946302076869, 0.807946302076869, 0.807946302076869, 0.782024263795496,  

 Call:
 0.756102225514122, 0.807946302076869, 0.782024263795496, 0.756102225514122,  

 Call:
 0.730180187232749, 0.730180187232749, 0.704258148951375, 0.678336110670002 

 Call:
 ), .Tsp = c(1, 101, 1), class = "ts")) 

  Smoothing parameters:
    alpha = 0.9999 
    beta  = 0.1805 

  Initial states:
    l = -0.8648 
    b = -0.0349 

  sigma:  0.1115

     AIC     AICc      BIC 
28.96850 29.60008 42.04411 


$userConfig
$userConfig$dataPreparationControl
$userConfig$dataPreparationControl$useNormalization
[1] TRUE

$userConfig$dataPreparationControl$useTimeSeriesFormat
[1] TRUE


$userConfig$buildNeuralNetModelControl
$userConfig$buildNeuralNetModelControl$hidden
[1] 1

$userConfig$buildNeuralNetModelControl$algorithm
[1] "rprop+"

$userConfig$buildNeuralNetModelControl$threshold
[1] 0.01

$userConfig$buildNeuralNetModelControl$stepmax
[1] 1e+05

$userConfig$buildNeuralNetModelControl$linear.output
[1] TRUE

$userConfig$buildNeuralNetModelControl$rep
[1] 1


$userConfig$buildForecastModelControl
list()

$userConfig$postProcessorControl
$userConfig$postProcessorControl$nStandardDeviationseventThreshold
[1] 2

$userConfig$postProcessorControl$eventThreshold
[1] 0.7

$userConfig$postProcessorControl$bedWindowSize
[1] 30



$buildModelAlgo
[1] "UnivariateForecast"

$normalization
$normalization$scaleCenter
      B_CL2_VAL      B_TURB_VAL        B_PH_VAL      B_COND_VAL      B_TEMP_VAL 
      1.5014851       0.3249010       7.1512871     233.1702970      58.3465347 
      B_PRES_OP  B_PLNT_PRES_OP   B_PLNT_PH_VAL B_PLNT_TURB_VAL  B_PLNT_FLOW_OP 
     70.3366337      70.3366337       7.5936634       0.4468416      13.4831683 
 B_PLNT_CL2_VAL 
      3.6883168 

$normalization$scaleSD
      B_CL2_VAL      B_TURB_VAL        B_PH_VAL      B_COND_VAL      B_TEMP_VAL 
     1.15630220      0.03673704      0.05594039      0.76649130      0.55164560 
      B_PRES_OP  B_PLNT_PRES_OP   B_PLNT_PH_VAL B_PLNT_TURB_VAL  B_PLNT_FLOW_OP 
     2.55842619      1.42321627      0.04225453      0.04777776      0.11581823 
 B_PLNT_CL2_VAL 
     0.38577213 


$excludedVariables
$excludedVariables[[1]]
[1] "B_TOC_VAL"


attr(,"class")
[1] "UnivariateForecast"
> 
> ## Set up a more complex event detection model defining some additional configuration
> buildEDModel(x, buildModelAlgo = "ForecastArima",ignoreVarianceWarning = TRUE)
$internal
$internal$isDirectForecast
[1] FALSE

$internal$usedModellingAlgo
function (y, order = c(0, 0, 0), seasonal = c(0, 0, 0), xreg = NULL, 
    include.mean = TRUE, include.drift = FALSE, include.constant, 
    lambda = model$lambda, biasadj = FALSE, method = c("CSS-ML", 
        "ML", "CSS"), model = NULL, x = y, ...) 
{
    series <- deparse(substitute(y))
    origx <- y
    if (!is.null(lambda)) {
        x <- BoxCox(x, lambda)
        lambda <- attr(x, "lambda")
        if (is.null(attr(lambda, "biasadj"))) {
            attr(lambda, "biasadj") <- biasadj
        }
    }
    if (!is.null(xreg)) {
        if (!is.numeric(xreg)) 
            stop("xreg should be a numeric matrix or a numeric vector")
        xreg <- as.matrix(xreg)
        if (is.null(colnames(xreg))) {
            colnames(xreg) <- if (ncol(xreg) == 1) 
                "xreg"
            else paste("xreg", 1:ncol(xreg), sep = "")
        }
    }
    if (!is.list(seasonal)) {
        if (frequency(x) <= 1) {
            seasonal <- list(order = c(0, 0, 0), period = NA)
            if (length(x) <= order[2L]) 
                stop("Not enough data to fit the model")
        }
        else {
            seasonal <- list(order = seasonal, period = frequency(x))
            if (length(x) <= order[2L] + seasonal$order[2L] * 
                seasonal$period) 
                stop("Not enough data to fit the model")
        }
    }
    if (!missing(include.constant)) {
        if (include.constant) {
            include.mean <- TRUE
            if ((order[2] + seasonal$order[2]) == 1) {
                include.drift <- TRUE
            }
        }
        else {
            include.mean <- include.drift <- FALSE
        }
    }
    if ((order[2] + seasonal$order[2]) > 1 & include.drift) {
        warning("No drift term fitted as the order of difference is 2 or more.")
        include.drift <- FALSE
    }
    if (!is.null(model)) {
        tmp <- arima2(x, model, xreg = xreg, method = method)
        xreg <- tmp$xreg
        tmp$fitted <- NULL
        tmp$lambda <- model$lambda
    }
    else {
        if (include.drift) {
            xreg <- `colnames<-`(cbind(drift = 1:length(x), xreg), 
                make.unique(c("drift", if (is.null(colnames(xreg)) && 
                  !is.null(xreg)) rep("", NCOL(xreg)) else colnames(xreg))))
        }
        if (is.null(xreg)) {
            suppressWarnings(tmp <- stats::arima(x = x, order = order, 
                seasonal = seasonal, include.mean = include.mean, 
                method = method, ...))
        }
        else {
            suppressWarnings(tmp <- stats::arima(x = x, order = order, 
                seasonal = seasonal, xreg = xreg, include.mean = include.mean, 
                method = method, ...))
        }
    }
    npar <- length(tmp$coef[tmp$mask]) + 1
    missing <- is.na(tmp$residuals)
    firstnonmiss <- head(which(!missing), 1)
    lastnonmiss <- tail(which(!missing), 1)
    n <- sum(!missing[firstnonmiss:lastnonmiss])
    nstar <- n - tmp$arma[6] - tmp$arma[7] * tmp$arma[5]
    tmp$aicc <- tmp$aic + 2 * npar * (nstar/(nstar - npar - 1) - 
        1)
    tmp$bic <- tmp$aic + npar * (log(nstar) - 2)
    tmp$series <- series
    tmp$xreg <- xreg
    tmp$call <- match.call()
    tmp$lambda <- lambda
    tmp$x <- origx
    if (is.null(model)) {
        tmp$sigma2 <- sum(tmp$residuals^2, na.rm = TRUE)/(nstar - 
            npar + 1)
    }
    out <- structure(tmp, class = c("forecast_ARIMA", "ARIMA", 
        "Arima"))
    out$fitted <- fitted.Arima(out)
    out$series <- series
    return(out)
}
<bytecode: 0x7fd6ab25daa8>
<environment: namespace:forecast>

$internal$postProcessing
function (model, events) 
{
    hist <- events
    hist[1:length(hist)] <- F
    if (!is.null(model$oldModel)) {
        hist <- model$oldModel$eventHistory
    }
    postProcessorControl <- model$userConfig$postProcessorControl
    con <- getDefaultPostControl()
    con[names(postProcessorControl)] <- postProcessorControl
    postProcessorControl <- con
    rm(con)
    nEvents <- length(events)
    eventThreshold <- postProcessorControl$eventThreshold
    BEDWindowSize <- model$userConfig$postProcessorControl$bedWindowSize
    BEDProbList <- NULL
    realEvents <- rep(F, nEvents)
    for (k in 1:nEvents) {
        combinedEventVector <- c(hist, events[1:k])
        combinedEventVector <- tail(combinedEventVector, n = BEDWindowSize)
        r <- length(combinedEventVector[combinedEventVector == 
            T])
        p <- 0
        for (i in 1:r) {
            p = p + factorial(BEDWindowSize)/factorial(BEDWindowSize - 
                i)/factorial(i) * 0.5^BEDWindowSize
        }
        BEDProbList <- c(BEDProbList, p)
        realEvents[k] <- (BEDProbList[(k)] > eventThreshold)
    }
    return(realEvents)
}
<bytecode: 0x7fd6a8280c60>
<environment: 0x7fd6a8184d38>


$modelList
$modelList$model1
Series: structure(c(1.4775677629652, 1.4775677629652, 1.46891950473273,  1.45162298826779, 1.44297473003532, 1.44297473003532, 1.3651404059431,  1.41702995533791, 1.40838169710544, 1.39108518064051, 1.39973343887297,  1.3651404059431, 1.39108518064051, 1.39108518064051, 1.39108518064051,  1.39108518064051, 1.42567821357038, 1.43432647180285, 1.43432647180285,  1.43432647180285, 1.41702995533791, 1.42567821357038, 1.43432647180285,  1.42567821357038, 1.40838169710544, 1.40838169710544, 1.39973343887297,  1.39108518064051, 1.39108518064051, 1.39108518064051, 1.39108518064051,  1.37378866417557, 1.38243692240804, 0.733817554972863, -0.719089828081926,  -0.727738086314395, -0.693145053384519, -0.710441569849457, -0.753682861011801,  -0.710441569849457, -0.76233111924427, -0.719089828081926, -0.710441569849457,  -0.710441569849457, -0.710441569849457, -0.710441569849457, -0.719089828081926,  -0.710441569849457, -0.710441569849457, -0.710441569849457, -0.710441569849457,  -0.719089828081926, -0.710441569849457, -0.710441569849457, -0.719089828081926,  -0.719089828081926, -0.710441569849457, -0.710441569849457, -0.719089828081926,  -0.710441569849457, -0.710441569849457, -0.719089828081926, -0.710441569849457,  -0.710441569849457, -0.710441569849457, -0.719089828081926, -0.710441569849457,  -0.710441569849457, -0.710441569849457, -0.710441569849457, -0.710441569849457,  -0.701793311616988, -0.701793311616988, -0.701793311616988, -0.701793311616988,  -0.701793311616988, -0.701793311616988, -0.701793311616988, -0.701793311616988,  -0.701793311616988, -0.693145053384519, -0.701793311616988, -0.701793311616988,  -0.710441569849457, -0.736386344546863, -0.710441569849457, -0.693145053384519,  -0.693145053384519, -0.68449679515205, -0.68449679515205, -0.68449679515205,  -0.68449679515205, -0.68449679515205, -0.68449679515205, -0.68449679515205,  -0.68449679515205, -0.68449679515205, -0.693145053384519, -0.693145053384519,  -0.701793311616988, -0.710441569849457), .Tsp = c(1, 101, 1), class = "ts") 
ARIMA(0,0,0) with non-zero mean 

Coefficients:
       mean
      0.000
s.e.  0.099

sigma^2 estimated as 1:  log likelihood=-142.81
AIC=289.62   AICc=289.74   BIC=294.85

$modelList$model2
Series: structure(c(-1.14056522349026, -1.19500619115212, -0.432832643885952,  -0.841139901349974, -0.65059651453343, -0.950021836673713, -0.950021836673713,  -1.3311086103068, -1.3311086103068, -1.16778570732119, -1.08612425582839,  -0.623376030702496, 0.32934090338022, 0.247679451887416, 0.302120419549286,  -0.541714579209691, -0.051745870252866, 0.274899935718351, 0.220458968056481,  0.00269509740900344, -0.051745870252866, -0.487273611547822,  -1.05890377199745, -0.813919417519039, -1.60331344861614, -0.950021836673713,  -1.43999054563054, -1.65775441627801, -0.596155546871561, -1.87551828692549,  -1.19500619115212, -1.11334473965932, -1.27666764264493, 0.0843565489018077,  0.111577032732742, 0.683207193182371, -0.106186837914736, 0.38378187104209,  0.138797516563677, 0.547104774027697, 1.22761686980107, 0.655986709351436,  0.492663806365829, -0.323950708562213, 0.73764816084424, 0.356561387211155,  -0.432832643885952, 0.220458968056481, -0.977242320504647, -0.677816998364365,  -0.813919417519039, -0.269509740900344, -0.323950708562213, 0.138797516563677,  1.36371928895574, 1.06429396681546, 1.47260122427948, 1.9625699332363,  2.31643622303845, 1.58148315960322, 1.71758557875789, 1.1731759021392,  1.49982170811041, 1.7992470302507, 1.47260122427948, 1.06429396681546,  1.39093977278667, 1.06429396681546, 0.764868644675175, 0.519884290196762,  1.1731759021392, 0.710427677013305, 1.49982170811041, 1.39093977278667,  0.193238484225547, -0.269509740900344, 0.764868644675175, 0.465443322534894,  0.0299155812399382, 0.683207193182371, 0.846530096167979, 1.58148315960322,  0.547104774027697, 1.71758557875789, -0.460053127716887, -0.487273611547822,  0.438222838703959, 0.00269509740900344, 0.819309612337044, -0.215068773238475,  -0.0789663540838008, -0.759478449857169, -0.514494095378757,  -0.813919417519039, -0.841139901349974, -0.215068773238475, -1.35832909413773,  -1.22222667498306, -1.54887248095428, -1.54887248095428, -1.57609296478521 ), .Tsp = c(1, 101, 1), class = "ts") 
ARIMA(0,0,0) with non-zero mean 

Coefficients:
       mean
      0.000
s.e.  0.099

sigma^2 estimated as 1:  log likelihood=-142.81
AIC=289.62   AICc=289.74   BIC=294.85

$modelList$model3
Series: structure(c(-0.916817576991003, -0.916817576991003, -0.916817576991003,  -0.73805584865877, -0.559294120326553, -0.559294120326553, -0.380532391994336,  -0.380532391994336, -0.201770663662119, -0.201770663662119, -0.201770663662119,  -0.201770663662119, -0.0230089353298859, -0.201770663662119,  -0.0230089353298859, -0.201770663662119, -0.201770663662119,  -0.559294120326553, -0.559294120326553, -0.380532391994336, -0.380532391994336,  -0.201770663662119, -0.0230089353298859, -0.0230089353298859,  0.155752793002331, 0.334514521334548, 0.513276249666765, 0.513276249666765,  0.870799706331215, 0.870799706331215, 0.870799706331215, 0.692037977998998,  0.870799706331215, 0.692037977998998, 0.870799706331215, 0.870799706331215,  0.870799706331215, 1.04956143466343, 1.04956143466343, 1.22832316299565,  1.22832316299565, 1.22832316299565, 1.40708489132788, 1.5858466196601,  1.5858466196601, 1.76460834799232, 1.76460834799232, 1.94337007632453,  1.76460834799232, 1.94337007632453, 1.76460834799232, 1.76460834799232,  1.5858466196601, 1.22832316299565, 0.870799706331215, 0.692037977998998,  0.513276249666765, 0.513276249666765, 0.334514521334548, 0.513276249666765,  0.513276249666765, 0.513276249666765, 0.334514521334548, 0.155752793002331,  -0.0230089353298859, -0.0230089353298859, -0.201770663662119,  -0.201770663662119, -0.380532391994336, -0.380532391994336, -0.380532391994336,  -0.559294120326553, -0.559294120326553, -0.559294120326553, -0.380532391994336,  -0.380532391994336, -0.380532391994336, -0.201770663662119, -0.201770663662119,  -0.380532391994336, -0.201770663662119, -0.201770663662119, -0.201770663662119,  -0.201770663662119, -0.201770663662119, -0.380532391994336, -0.73805584865877,  -1.09557930532322, -1.27434103365544, -1.27434103365544, -1.27434103365544,  -1.45310276198765, -1.63186449031989, -1.98938794698432, -1.98938794698432,  -1.8106262186521, -1.8106262186521, -1.98938794698432, -1.98938794698432,  -1.98938794698432, -1.98938794698432), .Tsp = c(1, 101, 1), class = "ts") 
ARIMA(0,0,0) with non-zero mean 

Coefficients:
       mean
      0.000
s.e.  0.099

sigma^2 estimated as 1:  log likelihood=-142.81
AIC=289.62   AICc=289.74   BIC=294.85

$modelList$model4
Series: structure(c(-0.87450050756237, 0.430145744487852, -1.00496513276738,  -0.091712756332244, -0.222177381537259, 0.0387518688727708, -1.52682363358748,  -0.61357125715234, -1.52682363358748, -0.61357125715234, -1.39635900838247,  -0.744035882357355, -2.04868213440758, -0.87450050756237, -1.78775288399751,  -0.87450050756237, -0.352642006742273, 0.0387518688727708, -0.352642006742273,  -0.222177381537259, -0.091712756332244, -0.483106631947288, 0.169216494077823,  -0.222177381537259, 0.0387518688727708, -0.222177381537259, -0.352642006742273,  -0.352642006742273, -0.352642006742273, 0.0387518688727708, -0.87450050756237,  0.169216494077823, -0.61357125715234, 0.299681119282837, 0.560610369692867,  -0.222177381537259, -0.091712756332244, -1.00496513276738, 0.430145744487852,  -0.222177381537259, -0.222177381537259, 0.0387518688727708, 0.169216494077823,  0.430145744487852, 0.169216494077823, 0.691074994897882, -0.352642006742273,  0.0387518688727708, 0.299681119282837, -0.222177381537259, 0.560610369692867,  0.169216494077823, 1.34339812092299, 0.299681119282837, 1.60432737133306,  0.430145744487852, 1.34339812092299, 1.08246887051296, 1.34339812092299,  0.952004245307948, 0.821539620102933, 0.952004245307948, 0.691074994897882,  1.47386274612804, 0.691074994897882, 1.21293349571798, 1.21293349571798,  1.60432737133306, 1.08246887051296, 1.86525662174309, 1.08246887051296,  2.12618587215316, 0.560610369692867, 1.86525662174309, 0.821539620102933,  1.86525662174309, 0.952004245307948, 1.34339812092299, 0.691074994897882,  1.21293349571798, 0.821539620102933, 0.691074994897882, 0.560610369692867,  -0.091712756332244, 0.169216494077823, -0.352642006742273, 0.821539620102933,  -1.00496513276738, -0.744035882357355, -0.483106631947288, -1.00496513276738,  -0.744035882357355, -1.52682363358748, -1.78775288399751, -1.26589438317745,  -1.6572882587925, -1.1354297579724, -1.26589438317745, -2.57054063522767,  -2.30961138481761, -1.39635900838247), .Tsp = c(1, 101, 1), class = "ts") 
ARIMA(0,0,0) with non-zero mean 

Coefficients:
       mean
      0.000
s.e.  0.099

sigma^2 estimated as 1:  log likelihood=-142.81
AIC=289.62   AICc=289.74   BIC=294.85

$modelList$model5
Series: structure(c(-1.17201088882571, -1.35328669245726, -1.35328669245726,  -1.17201088882571, -1.17201088882571, -1.17201088882571, -0.99073508519418,  -0.809459281562635, -0.446907674299545, -0.446907674299545, -0.265631870668,  -0.265631870668, 0.0969197365950774, 0.0969197365950774, 0.459471343858168,  0.0969197365950774, 0.459471343858168, 0.0969197365950774, 0.459471343858168,  0.278195540226623, 0.459471343858168, 0.0969197365950774, 0.459471343858168,  0.278195540226623, 0.278195540226623, 0.278195540226623, 0.0969197365950774,  0.640747147489713, 0.278195540226623, 0.459471343858168, 0.278195540226623,  0.278195540226623, 0.459471343858168, -0.0843560670364677, 0.0969197365950774,  -0.0843560670364677, 0.0969197365950774, 0.0969197365950774,  -0.265631870668, -0.0843560670364677, -0.265631870668, -0.265631870668,  -0.446907674299545, -0.265631870668, -0.446907674299545, -0.446907674299545,  -0.265631870668, -0.446907674299545, -0.265631870668, -0.446907674299545,  -0.265631870668, -0.265631870668, -0.62818347793109, -0.62818347793109,  -0.99073508519418, -0.809459281562635, -0.99073508519418, -0.62818347793109,  -0.99073508519418, -0.62818347793109, -0.809459281562635, -0.62818347793109,  -0.99073508519418, -0.809459281562635, -1.17201088882571, -0.809459281562635,  -0.809459281562635, -0.809459281562635, -0.99073508519418, -0.99073508519418,  -0.99073508519418, -0.99073508519418, -0.99073508519418, -0.99073508519418,  -0.62818347793109, -0.99073508519418, -0.62818347793109, -0.99073508519418,  -0.446907674299545, -0.62818347793109, -0.0843560670364677, -0.0843560670364677,  0.459471343858168, 0.278195540226623, 0.640747147489713, 0.822022951121245,  1.00329875475279, 1.54712616564743, 1.36585036201588, 1.72840196927896,  1.72840196927896, 1.9096777729105, 1.9096777729105, 1.9096777729105,  2.45350518380514, 2.63478098743667, 2.45350518380514, 2.45350518380514,  2.45350518380514, 2.09095357654205, 2.27222938017359), .Tsp = c(1,  101, 1), class = "ts") 
ARIMA(0,0,0) with non-zero mean 

Coefficients:
       mean
      0.000
s.e.  0.099

sigma^2 estimated as 1:  log likelihood=-142.81
AIC=289.62   AICc=289.74   BIC=294.85

$modelList$model6
Series: structure(c(1.04101746227459, 0.650152169747699, 0.650152169747699,  1.04101746227459, 0.650152169747699, 1.04101746227459, 1.04101746227459,  1.04101746227459, 1.43188275480148, 1.04101746227459, 0.259286877220807,  -0.131578415306085, -0.131578415306085, -0.131578415306085, -0.131578415306085,  -0.522443707832977, -0.522443707832977, -0.522443707832977, -0.913309000359869,  -0.913309000359869, -1.30417429288676, -1.30417429288676, 0.650152169747699,  0.650152169747699, 0.259286877220807, 0.259286877220807, 0.259286877220807,  0.259286877220807, -0.131578415306085, -0.131578415306085, -0.131578415306085,  0.259286877220807, 0.259286877220807, 0.259286877220807, 0.259286877220807,  0.259286877220807, 0.259286877220807, 0.259286877220807, -0.131578415306085,  0.259286877220807, 0.259286877220807, 0.650152169747699, 0.259286877220807,  -0.131578415306085, -0.131578415306085, -0.522443707832977, -1.30417429288676,  -1.69503958541365, -1.69503958541365, -1.69503958541365, -1.69503958541365,  -1.69503958541365, -2.47677017046744, -2.47677017046744, -1.69503958541365,  -2.08590487794054, -0.913309000359869, 0.259286877220807, 1.04101746227459,  1.82274804732838, 1.82274804732838, 1.43188275480148, 1.04101746227459,  1.04101746227459, 0.259286877220807, -0.131578415306085, 0.259286877220807,  0.259286877220807, 0.650152169747699, 0.650152169747699, 1.04101746227459,  -0.131578415306085, 1.04101746227459, 2.60447863238216, 1.43188275480148,  1.43188275480148, 1.04101746227459, 0.259286877220807, -1.30417429288676,  0.259286877220807, 0.259286877220807, 0.259286877220807, 0.259286877220807,  -0.131578415306085, -0.522443707832977, -0.522443707832977, -0.913309000359869,  -1.30417429288676, -1.69503958541365, -1.69503958541365, -1.69503958541365,  -1.69503958541365, 0.259286877220807, 0.650152169747699, 0.650152169747699,  0.259286877220807, 0.259286877220807, 0.259286877220807, 0.259286877220807,  0.259286877220807, 0.259286877220807), .Tsp = c(1, 101, 1), class = "ts") 
ARIMA(0,0,0) with non-zero mean 

Coefficients:
       mean
      0.000
s.e.  0.099

sigma^2 estimated as 1:  log likelihood=-142.81
AIC=289.62   AICc=289.74   BIC=294.85

$modelList$model7
Series: structure(c(1.16873757724396, -0.236530223966045, 0.466103676638959,  0.466103676638959, -0.236530223966045, 0.466103676638959, 1.16873757724396,  0.466103676638959, 1.87137147784897, 0.466103676638959, -0.236530223966045,  -0.236530223966045, -0.236530223966045, -0.236530223966045, -0.236530223966045,  -0.236530223966045, -0.236530223966045, -0.236530223966045, -0.236530223966045,  0.466103676638959, -0.236530223966045, -0.236530223966045, 0.466103676638959,  0.466103676638959, -0.236530223966045, -0.236530223966045, -0.236530223966045,  -0.236530223966045, -0.236530223966045, -0.939164124571048, -0.939164124571048,  -0.236530223966045, -0.236530223966045, -0.236530223966045, -0.236530223966045,  -0.236530223966045, -0.236530223966045, -0.236530223966045, -0.236530223966045,  -0.236530223966045, 0.466103676638959, 0.466103676638959, 0.466103676638959,  0.466103676638959, 0.466103676638959, -0.236530223966045, -0.939164124571048,  -0.939164124571048, -0.939164124571048, -0.939164124571048, -0.939164124571048,  -0.939164124571048, -0.939164124571048, -0.939164124571048, -0.236530223966045,  -0.939164124571048, -0.236530223966045, 0.466103676638959, 1.16873757724396,  1.87137147784897, 1.16873757724396, 1.16873757724396, 1.16873757724396,  0.466103676638959, -0.236530223966045, -0.939164124571048, -0.939164124571048,  -0.236530223966045, -0.236530223966045, -0.236530223966045, 0.466103676638959,  -1.64179802517605, 0.466103676638959, 4.68190708026898, 2.57400537845397,  1.87137147784897, 1.16873757724396, -0.939164124571048, -5.15496752820107,  -0.236530223966045, -0.236530223966045, -0.236530223966045, -0.236530223966045,  -0.236530223966045, -0.236530223966045, -0.236530223966045, -0.236530223966045,  -0.939164124571048, -0.939164124571048, -0.236530223966045, 0.466103676638959,  -0.236530223966045, 0.466103676638959, 0.466103676638959, 0.466103676638959,  0.466103676638959, 0.466103676638959, 0.466103676638959, 0.466103676638959,  -0.236530223966045, -0.236530223966045), .Tsp = c(1, 101, 1), class = "ts") 
ARIMA(0,0,0) with non-zero mean 

Coefficients:
       mean
      0.000
s.e.  0.099

sigma^2 estimated as 1:  log likelihood=-142.81
AIC=289.62   AICc=289.74   BIC=294.85

$modelList$model8
Series: structure(c(2.27991240737132, 2.04325140722279, 2.04325140722279,  2.04325140722279, 1.80659040707428, 1.80659040707428, 1.80659040707428,  1.80659040707428, 1.56992940692578, 1.56992940692578, 1.56992940692578,  1.56992940692578, 1.56992940692578, 1.56992940692578, 1.33326840677727,  1.33326840677727, 1.33326840677727, 1.33326840677727, 1.33326840677727,  1.09660740662875, 1.09660740662875, 0.859946406480239, 0.859946406480239,  0.623285406331733, 0.623285406331733, 0.623285406331733, 0.386624406183227,  0.386624406183227, 0.386624406183227, 0.1499634060347, 0.1499634060347,  0.1499634060347, -0.0866975941138058, -0.0866975941138058, -0.0866975941138058,  -0.0866975941138058, -0.0866975941138058, -0.0866975941138058,  -0.0866975941138058, -0.0866975941138058, -0.0866975941138058,  -0.0866975941138058, -0.0866975941138058, -0.0866975941138058,  -0.0866975941138058, -0.0866975941138058, -0.0866975941138058,  0.1499634060347, 0.1499634060347, 0.1499634060347, 0.1499634060347,  0.1499634060347, 0.386624406183227, 0.386624406183227, 0.1499634060347,  -0.0866975941138058, -0.323358594262312, -0.323358594262312,  -0.323358594262312, -0.323358594262312, -0.323358594262312, -0.323358594262312,  -0.323358594262312, -0.323358594262312, -0.323358594262312, -0.560019594410818,  -0.796680594559345, -0.796680594559345, -1.03334159470785, -1.03334159470785,  -1.03334159470785, -1.27000259485636, -1.27000259485636, -1.27000259485636,  -1.27000259485636, -1.27000259485636, -1.27000259485636, -1.27000259485636,  -1.27000259485636, -1.27000259485636, -1.27000259485636, -1.03334159470785,  -1.03334159470785, -1.03334159470785, -1.03334159470785, -1.03334159470785,  -1.03334159470785, -1.03334159470785, -1.03334159470785, -1.03334159470785,  -1.03334159470785, -1.03334159470785, -1.03334159470785, -0.796680594559345,  -0.796680594559345, -0.796680594559345, -0.560019594410818, -0.796680594559345,  -0.796680594559345, -0.796680594559345, -0.796680594559345), .Tsp = c(1,  101, 1), class = "ts") 
ARIMA(0,0,0) with non-zero mean 

Coefficients:
       mean
      0.000
s.e.  0.099

sigma^2 estimated as 1:  log likelihood=-142.81
AIC=289.62   AICc=289.74   BIC=294.85

$modelList$model9
Series: structure(c(0.128897115165417, 0.00331568141904609, 0.045176159334503,  0.380059982658158, 0.526571655362256, 0.756804283897269, 0.652153089108627,  0.861455478685911, 1.2172695409673, 1.19633930200957, 1.44750216950231,  1.42657193054458, 1.59401384220641, 1.42657193054458, 1.42657193054458,  1.30099049679821, 1.23819977992502, 1.04982762930547, 1.02889739034774,  1.00796715139001, 0.819595000770454, 0.673083328066355, 0.568432133277713,  0.421920460573615, 0.317269265784973, 0.275408787869516, 0.275408787869516,  0.275408787869516, 0.233548309954059, 0.254478548911788, 0.0870366372499599,  6.34517808561076, 0.987036912432282, 0.00331568141904609, -0.143195991285053,  -0.164126230242782, -0.18505646920051, -0.18505646920051, -0.226916947115967,  -0.143195991285053, -0.101335513369596, 0.0242459203767745, 0.170757593080874,  0.296339026827244, 0.254478548911788, 0.107966876207688, 0.0870366372499599,  -0.289707663989152, -0.205986708158238, 0.233548309954059, 0.275408787869516,  0.170757593080874, -0.624591487312807, -0.0594750354541393, 0.0661063982922314,  -0.164126230242782, -0.226916947115967, -0.18505646920051, 0.107966876207688,  0.0661063982922314, 0.0242459203767745, -0.0176145575386824,  -0.352498380862338, 0.0870366372499599, 0.212618070996331, 0.254478548911788,  -0.499010053566437, -0.812963637932363, -1.04319626646738, -1.12691722229829,  -1.29435913396012, -1.33621961187557, -1.18970793917147, -1.2106381781292,  -1.31528937291784, -1.46180104562194, -1.44087080666422, -1.3571498508333,  -0.875754354805548, -1.33621961187557, -1.52459176249513, -1.29435913396012,  -1.18970793917147, -1.08505674438283, -1.16877770021375, -1.0641265054251,  -0.833893876890092, -0.98040554959419, -0.854824115847819, -0.58273100939735,  -0.247847186073695, -0.289707663989152, -0.268777425031424, -0.45714957565098,  -0.101335513369596, -0.0385447964964108, -0.750172921059178,  -0.268777425031424, -0.310637902946881, -0.0385447964964108,  0.233548309954059), .Tsp = c(1, 101, 1), class = "ts") 
ARIMA(0,0,0) with non-zero mean 

Coefficients:
       mean
      0.000
s.e.  0.099

sigma^2 estimated as 1:  log likelihood=-142.81
AIC=289.62   AICc=289.74   BIC=294.85

$modelList$model10
Series: structure(c(-1.58151548125171, 0.145328449628532, -0.718093515811591,  -0.718093515811591, -0.718093515811591, -0.718093515811591, -0.718093515811591,  -0.718093515811591, -1.58151548125171, -0.718093515811591, -0.718093515811591,  0.145328449628532, 0.145328449628532, 0.145328449628532, 0.145328449628532,  0.145328449628532, 0.145328449628532, 0.145328449628532, -0.718093515811591,  0.145328449628532, -0.718093515811591, 0.145328449628532, -0.718093515811591,  -0.718093515811591, 0.145328449628532, 0.145328449628532, 0.145328449628532,  -0.718093515811591, -0.718093515811591, 0.145328449628532, 0.145328449628532,  -0.718093515811591, 0.145328449628532, 0.145328449628532, 0.145328449628532,  -0.718093515811591, -0.718093515811591, 0.145328449628532, 0.145328449628532,  -0.718093515811591, -0.718093515811591, -0.718093515811591, -0.718093515811591,  -0.718093515811591, 0.145328449628532, 1.00875041506866, 0.145328449628532,  1.00875041506866, 1.00875041506866, 1.00875041506866, 1.00875041506866,  1.00875041506866, 1.00875041506866, 1.00875041506866, 1.00875041506866,  1.00875041506866, 1.00875041506866, 0.145328449628532, -0.718093515811591,  -1.58151548125171, -0.718093515811591, -0.718093515811591, -0.718093515811591,  -0.718093515811591, 0.145328449628532, 1.00875041506866, 0.145328449628532,  0.145328449628532, 0.145328449628532, 0.145328449628532, 0.145328449628532,  1.87217238050878, 0.145328449628532, -4.1717813775721, -2.44493744669185,  -1.58151548125171, -0.718093515811591, 1.00875041506866, 5.32586024226929,  1.00875041506866, 0.145328449628532, 0.145328449628532, 0.145328449628532,  1.00875041506866, 0.145328449628532, 0.145328449628532, 0.145328449628532,  1.00875041506866, 1.00875041506866, 1.00875041506866, 0.145328449628532,  0.145328449628532, 0.145328449628532, 0.145328449628532, 0.145328449628532,  0.145328449628532, 0.145328449628532, 1.00875041506866, 0.145328449628532,  0.145328449628532, 0.145328449628532), .Tsp = c(1, 101, 1), class = "ts") 
ARIMA(0,0,0) with non-zero mean 

Coefficients:
       mean
      0.000
s.e.  0.099

sigma^2 estimated as 1:  log likelihood=-142.81
AIC=289.62   AICc=289.74   BIC=294.85

$modelList$model11
Series: structure(c(-0.902908224493783, -0.902908224493783, -0.902908224493783,  -0.902908224493783, -0.902908224493783, -1.03251841590065, -1.0843624924634,  -1.13620656902614, -1.21397268387026, -1.26581676043301, -1.31766083699576,  -1.42134899012125, -1.473193066684, -1.52503714324675, -1.57688121980949,  -1.57688121980949, -1.60280325809087, -1.65464733465362, -1.68056937293499,  -1.68056937293499, -1.68056937293499, -1.65464733465362, -1.70649141121636,  -1.70649141121636, -1.68056937293499, -1.68056937293499, -1.62872529637224,  -1.57688121980949, -1.52503714324675, -1.473193066684, -1.52503714324675,  -0.695531918242795, -0.0993250377712041, -0.0993250377712041,  -0.0215589229270829, 0.00436311535429002, 0.00436311535429002,  -0.07340299948983, -0.07340299948983, 0.00436311535429002, 0.108051268479784,  0.185817383323904, 0.341349613012145, 0.470959804419014, 0.419115727856267,  0.470959804419014, 0.470959804419014, 0.44503776613764, 0.496881842700387,  0.574647957544508, 0.548725919263134, 0.548725919263134, 0.496881842700387,  0.548725919263134, 0.600569995825881, 0.548725919263134, 0.496881842700387,  0.496881842700387, 0.600569995825881, 0.600569995825881, 0.678336110670002,  0.704258148951375, 0.678336110670002, 0.730180187232749, 0.704258148951375,  0.756102225514122, 0.756102225514122, 0.807946302076869, 0.833868340358242,  0.833868340358242, 0.859790378639615, 0.88571241692099, 0.963478531765109,  0.989400570046484, 1.01532260832786, 1.01532260832786, 1.0671666848906,  1.11901076145335, 1.04124464660923, 1.04124464660923, 1.04124464660923,  1.04124464660923, 0.963478531765109, 0.937556493483736, 0.911634455202363,  0.937556493483736, 0.911634455202363, 0.911634455202363, 0.88571241692099,  0.807946302076869, 0.807946302076869, 0.807946302076869, 0.782024263795496,  0.756102225514122, 0.807946302076869, 0.782024263795496, 0.756102225514122,  0.730180187232749, 0.730180187232749, 0.704258148951375, 0.678336110670002 ), .Tsp = c(1, 101, 1), class = "ts") 
ARIMA(0,0,0) with non-zero mean 

Coefficients:
       mean
      0.000
s.e.  0.099

sigma^2 estimated as 1:  log likelihood=-142.81
AIC=289.62   AICc=289.74   BIC=294.85


$userConfig
$userConfig$dataPreparationControl
$userConfig$dataPreparationControl$useNormalization
[1] TRUE

$userConfig$dataPreparationControl$useTimeSeriesFormat
[1] TRUE


$userConfig$buildNeuralNetModelControl
$userConfig$buildNeuralNetModelControl$hidden
[1] 1

$userConfig$buildNeuralNetModelControl$algorithm
[1] "rprop+"

$userConfig$buildNeuralNetModelControl$threshold
[1] 0.01

$userConfig$buildNeuralNetModelControl$stepmax
[1] 1e+05

$userConfig$buildNeuralNetModelControl$linear.output
[1] TRUE

$userConfig$buildNeuralNetModelControl$rep
[1] 1


$userConfig$buildForecastModelControl
list()

$userConfig$postProcessorControl
$userConfig$postProcessorControl$nStandardDeviationseventThreshold
[1] 2

$userConfig$postProcessorControl$eventThreshold
[1] 0.7

$userConfig$postProcessorControl$bedWindowSize
[1] 30



$buildModelAlgo
[1] "UnivariateForecast"

$normalization
$normalization$scaleCenter
      B_CL2_VAL      B_TURB_VAL        B_PH_VAL      B_COND_VAL      B_TEMP_VAL 
      1.5014851       0.3249010       7.1512871     233.1702970      58.3465347 
      B_PRES_OP  B_PLNT_PRES_OP   B_PLNT_PH_VAL B_PLNT_TURB_VAL  B_PLNT_FLOW_OP 
     70.3366337      70.3366337       7.5936634       0.4468416      13.4831683 
 B_PLNT_CL2_VAL 
      3.6883168 

$normalization$scaleSD
      B_CL2_VAL      B_TURB_VAL        B_PH_VAL      B_COND_VAL      B_TEMP_VAL 
     1.15630220      0.03673704      0.05594039      0.76649130      0.55164560 
      B_PRES_OP  B_PLNT_PRES_OP   B_PLNT_PH_VAL B_PLNT_TURB_VAL  B_PLNT_FLOW_OP 
     2.55842619      1.42321627      0.04225453      0.04777776      0.11581823 
 B_PLNT_CL2_VAL 
     0.38577213 


$excludedVariables
$excludedVariables[[1]]
[1] "B_TOC_VAL"


attr(,"class")
[1] "UnivariateForecast"
> 
>  ## Set up a multivariate neuralnetwork model
> buildEDModel(x, buildModelAlgo = "NeuralNetwork",ignoreVarianceWarning = TRUE)
$modelList
$modelList$model1
$call
neuralnet(formula = nn_input, data = model_input, hidden = hidden, 
    threshold = threshold, stepmax = stepmax, rep = rep, startweights = unlist(control))

$response
      B_CL2_VAL
2   1.000000000
3   0.996138996
4   0.988416988
5   0.984555985
6   0.984555985
7   0.949806950
8   0.972972973
9   0.969111969
10  0.961389961
11  0.965250965
12  0.949806950
13  0.961389961
14  0.961389961
15  0.961389961
16  0.961389961
17  0.976833977
18  0.980694981
19  0.980694981
20  0.980694981
21  0.972972973
22  0.976833977
23  0.980694981
24  0.976833977
25  0.969111969
26  0.969111969
27  0.965250965
28  0.961389961
29  0.961389961
30  0.961389961
31  0.961389961
32  0.953667954
33  0.957528958
34  0.667953668
35  0.019305019
36  0.015444015
37  0.030888031
38  0.023166023
39  0.003861004
40  0.023166023
41  0.000000000
42  0.019305019
43  0.023166023
44  0.023166023
45  0.023166023
46  0.023166023
47  0.019305019
48  0.023166023
49  0.023166023
50  0.023166023
51  0.023166023
52  0.019305019
53  0.023166023
54  0.023166023
55  0.019305019
56  0.019305019
57  0.023166023
58  0.023166023
59  0.019305019
60  0.023166023
61  0.023166023
62  0.019305019
63  0.023166023
64  0.023166023
65  0.023166023
66  0.019305019
67  0.023166023
68  0.023166023
69  0.023166023
70  0.023166023
71  0.023166023
72  0.027027027
73  0.027027027
74  0.027027027
75  0.027027027
76  0.027027027
77  0.027027027
78  0.027027027
79  0.027027027
80  0.027027027
81  0.030888031
82  0.027027027
83  0.027027027
84  0.023166023
85  0.011583012
86  0.023166023
87  0.030888031
88  0.030888031
89  0.034749035
90  0.034749035
91  0.034749035
92  0.034749035
93  0.034749035
94  0.034749035
95  0.034749035
96  0.034749035
97  0.034749035
98  0.030888031
99  0.030888031
100 0.027027027
101 0.023166023

$covariate
    B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP B_PLNT_PRES_OP
2   0.16233766 0.27272727 0.63888889 0.00000000 0.61538462      0.5000000
3   0.34415584 0.27272727 0.33333333 0.00000000 0.61538462      0.5714286
4   0.24675325 0.31818182 0.52777778 0.04545455 0.69230769      0.5714286
5   0.29220779 0.36363636 0.50000000 0.04545455 0.61538462      0.5000000
6   0.22077922 0.36363636 0.55555556 0.04545455 0.69230769      0.5714286
7   0.22077922 0.40909091 0.22222222 0.09090909 0.69230769      0.6428571
8   0.12987013 0.40909091 0.41666667 0.13636364 0.69230769      0.5714286
9   0.12987013 0.45454545 0.22222222 0.22727273 0.76923077      0.7142857
10  0.16883117 0.45454545 0.41666667 0.22727273 0.69230769      0.5714286
11  0.18831169 0.45454545 0.25000000 0.27272727 0.53846154      0.5000000
12  0.29870130 0.45454545 0.38888889 0.27272727 0.46153846      0.5000000
13  0.52597403 0.50000000 0.11111111 0.36363636 0.46153846      0.5000000
14  0.50649351 0.45454545 0.36111111 0.36363636 0.46153846      0.5000000
15  0.51948052 0.50000000 0.16666667 0.45454545 0.46153846      0.5000000
16  0.31818182 0.45454545 0.36111111 0.36363636 0.38461538      0.5000000
17  0.43506494 0.45454545 0.47222222 0.45454545 0.38461538      0.5000000
18  0.51298701 0.36363636 0.55555556 0.36363636 0.38461538      0.5000000
19  0.50000000 0.36363636 0.47222222 0.45454545 0.30769231      0.5000000
20  0.44805195 0.40909091 0.50000000 0.40909091 0.30769231      0.5714286
21  0.43506494 0.40909091 0.52777778 0.45454545 0.23076923      0.5000000
22  0.33116883 0.45454545 0.44444444 0.36363636 0.23076923      0.5000000
23  0.19480519 0.50000000 0.58333333 0.45454545 0.61538462      0.5714286
24  0.25324675 0.50000000 0.50000000 0.40909091 0.61538462      0.5714286
25  0.06493506 0.54545455 0.55555556 0.40909091 0.53846154      0.5000000
26  0.22077922 0.59090909 0.50000000 0.40909091 0.53846154      0.5000000
27  0.10389610 0.63636364 0.47222222 0.36363636 0.53846154      0.5000000
28  0.05194805 0.63636364 0.47222222 0.50000000 0.53846154      0.5000000
29  0.30519481 0.72727273 0.47222222 0.40909091 0.46153846      0.5000000
30  0.00000000 0.72727273 0.55555556 0.45454545 0.46153846      0.4285714
31  0.16233766 0.72727273 0.36111111 0.40909091 0.46153846      0.4285714
32  0.18181818 0.68181818 0.58333333 0.40909091 0.53846154      0.5000000
33  0.14285714 0.72727273 0.41666667 0.45454545 0.53846154      0.5000000
34  0.46753247 0.68181818 0.61111111 0.31818182 0.53846154      0.5000000
35  0.47402597 0.72727273 0.66666667 0.36363636 0.53846154      0.5000000
36  0.61038961 0.72727273 0.50000000 0.31818182 0.53846154      0.5000000
37  0.42207792 0.72727273 0.52777778 0.36363636 0.53846154      0.5000000
38  0.53896104 0.77272727 0.33333333 0.36363636 0.53846154      0.5000000
39  0.48051948 0.77272727 0.63888889 0.27272727 0.46153846      0.5000000
40  0.57792208 0.81818182 0.50000000 0.31818182 0.53846154      0.5000000
41  0.74025974 0.81818182 0.50000000 0.27272727 0.53846154      0.5714286
42  0.60389610 0.81818182 0.55555556 0.27272727 0.61538462      0.5714286
43  0.56493506 0.86363636 0.58333333 0.22727273 0.53846154      0.5714286
44  0.37012987 0.90909091 0.63888889 0.27272727 0.46153846      0.5714286
45  0.62337662 0.90909091 0.58333333 0.22727273 0.46153846      0.5714286
46  0.53246753 0.95454545 0.69444444 0.22727273 0.38461538      0.5000000
47  0.34415584 0.95454545 0.47222222 0.27272727 0.23076923      0.4285714
48  0.50000000 1.00000000 0.55555556 0.22727273 0.15384615      0.4285714
49  0.21428571 0.95454545 0.61111111 0.27272727 0.15384615      0.4285714
50  0.28571429 1.00000000 0.50000000 0.22727273 0.15384615      0.4285714
51  0.25324675 0.95454545 0.66666667 0.27272727 0.15384615      0.4285714
52  0.38311688 0.95454545 0.58333333 0.27272727 0.15384615      0.4285714
53  0.37012987 0.90909091 0.83333333 0.18181818 0.00000000      0.4285714
54  0.48051948 0.81818182 0.61111111 0.18181818 0.00000000      0.4285714
55  0.77272727 0.72727273 0.88888889 0.09090909 0.15384615      0.5000000
56  0.70129870 0.68181818 0.63888889 0.13636364 0.07692308      0.4285714
57  0.79870130 0.63636364 0.83333333 0.09090909 0.30769231      0.5000000
58  0.91558442 0.63636364 0.77777778 0.18181818 0.53846154      0.5714286
59  1.00000000 0.59090909 0.83333333 0.09090909 0.69230769      0.6428571
60  0.82467532 0.63636364 0.75000000 0.18181818 0.84615385      0.7142857
61  0.85714286 0.63636364 0.72222222 0.13636364 0.84615385      0.6428571
62  0.72727273 0.63636364 0.75000000 0.18181818 0.76923077      0.6428571
63  0.80519481 0.59090909 0.69444444 0.09090909 0.69230769      0.6428571
64  0.87662338 0.54545455 0.86111111 0.13636364 0.69230769      0.5714286
65  0.79870130 0.50000000 0.69444444 0.04545455 0.53846154      0.5000000
66  0.70129870 0.50000000 0.80555556 0.13636364 0.46153846      0.4285714
67  0.77922078 0.45454545 0.80555556 0.13636364 0.53846154      0.4285714
68  0.70129870 0.45454545 0.88888889 0.13636364 0.53846154      0.5000000
69  0.62987013 0.40909091 0.77777778 0.09090909 0.61538462      0.5000000
70  0.57142857 0.40909091 0.94444444 0.09090909 0.61538462      0.5000000
71  0.72727273 0.40909091 0.77777778 0.09090909 0.69230769      0.5714286
72  0.61688312 0.36363636 1.00000000 0.09090909 0.46153846      0.3571429
73  0.80519481 0.36363636 0.66666667 0.09090909 0.69230769      0.5714286
74  0.77922078 0.36363636 0.94444444 0.09090909 1.00000000      1.0000000
75  0.49350649 0.40909091 0.72222222 0.18181818 0.76923077      0.7857143
76  0.38311688 0.40909091 0.94444444 0.09090909 0.76923077      0.7142857
77  0.62987013 0.40909091 0.75000000 0.18181818 0.69230769      0.6428571
78  0.55844156 0.45454545 0.83333333 0.09090909 0.53846154      0.4285714
79  0.45454545 0.45454545 0.69444444 0.22727273 0.23076923      0.0000000
80  0.61038961 0.40909091 0.80555556 0.18181818 0.53846154      0.5000000
81  0.64935065 0.45454545 0.72222222 0.31818182 0.53846154      0.5000000
82  0.82467532 0.45454545 0.69444444 0.31818182 0.53846154      0.5000000
83  0.57792208 0.45454545 0.66666667 0.45454545 0.53846154      0.5000000
84  0.85714286 0.45454545 0.52777778 0.40909091 0.46153846      0.5000000
85  0.33766234 0.45454545 0.58333333 0.50000000 0.38461538      0.5000000
86  0.33116883 0.40909091 0.47222222 0.54545455 0.38461538      0.5000000
87  0.55194805 0.31818182 0.72222222 0.59090909 0.30769231      0.5000000
88  0.44805195 0.22727273 0.33333333 0.72727273 0.23076923      0.4285714
89  0.64285714 0.18181818 0.38888889 0.68181818 0.15384615      0.4285714
90  0.39610390 0.18181818 0.44444444 0.77272727 0.15384615      0.5000000
91  0.42857143 0.18181818 0.33333333 0.77272727 0.15384615      0.5714286
92  0.26623377 0.13636364 0.38888889 0.81818182 0.15384615      0.5000000
93  0.32467532 0.09090909 0.22222222 0.81818182 0.53846154      0.5714286
94  0.25324675 0.00000000 0.16666667 0.81818182 0.61538462      0.5714286
95  0.24675325 0.00000000 0.27777778 0.95454545 0.61538462      0.5714286
96  0.39610390 0.04545455 0.19444444 1.00000000 0.53846154      0.5714286
97  0.12337662 0.04545455 0.30555556 0.95454545 0.53846154      0.5714286
98  0.15584416 0.00000000 0.27777778 0.95454545 0.53846154      0.5714286
99  0.07792208 0.00000000 0.00000000 0.95454545 0.53846154      0.5714286
100 0.07792208 0.00000000 0.05555556 0.86363636 0.53846154      0.5000000
101 0.07142857 0.00000000 0.25000000 0.90909091 0.53846154      0.5000000
    B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL   past_data
2      0.93333333     0.194148936      0.4545455    0.284403670 1.000000000
3      0.93333333     0.199468085      0.3636364    0.284403670 1.000000000
4      0.93333333     0.242021277      0.3636364    0.284403670 0.996138996
5      0.86666667     0.260638298      0.3636364    0.284403670 0.988416988
6      0.86666667     0.289893617      0.3636364    0.238532110 0.984555985
7      0.86666667     0.276595745      0.3636364    0.220183486 0.984555985
8      0.86666667     0.303191489      0.3636364    0.201834862 0.949806950
9      0.80000000     0.348404255      0.2727273    0.174311927 0.972972973
10     0.80000000     0.345744681      0.3636364    0.155963303 0.969111969
11     0.80000000     0.377659574      0.3636364    0.137614679 0.961389961
12     0.80000000     0.375000000      0.4545455    0.100917431 0.965250965
13     0.80000000     0.396276596      0.4545455    0.082568807 0.949806950
14     0.80000000     0.375000000      0.4545455    0.064220183 0.961389961
15     0.73333333     0.375000000      0.4545455    0.045871560 0.961389961
16     0.73333333     0.359042553      0.4545455    0.045871560 0.961389961
17     0.73333333     0.351063830      0.4545455    0.036697248 0.961389961
18     0.73333333     0.327127660      0.4545455    0.018348624 0.976833977
19     0.73333333     0.324468085      0.3636364    0.009174312 0.980694981
20     0.66666667     0.321808511      0.4545455    0.009174312 0.980694981
21     0.66666667     0.297872340      0.3636364    0.009174312 0.980694981
22     0.60000000     0.279255319      0.4545455    0.018348624 0.972972973
23     0.60000000     0.265957447      0.3636364    0.000000000 0.976833977
24     0.53333333     0.247340426      0.3636364    0.000000000 0.980694981
25     0.53333333     0.234042553      0.4545455    0.009174312 0.976833977
26     0.53333333     0.228723404      0.4545455    0.009174312 0.969111969
27     0.46666667     0.228723404      0.4545455    0.027522936 0.969111969
28     0.46666667     0.228723404      0.3636364    0.045871560 0.965250965
29     0.46666667     0.223404255      0.3636364    0.064220183 0.961389961
30     0.40000000     0.226063830      0.4545455    0.082568807 0.961389961
31     0.40000000     0.204787234      0.4545455    0.064220183 0.961389961
32     0.40000000     1.000000000      0.3636364    0.357798165 0.961389961
33     0.33333333     0.319148936      0.4545455    0.568807339 0.953667954
34     0.33333333     0.194148936      0.4545455    0.568807339 0.957528958
35     0.33333333     0.175531915      0.4545455    0.596330275 0.667953668
36     0.33333333     0.172872340      0.3636364    0.605504587 0.019305019
37     0.33333333     0.170212766      0.3636364    0.605504587 0.015444015
38     0.33333333     0.170212766      0.4545455    0.577981651 0.030888031
39     0.33333333     0.164893617      0.4545455    0.577981651 0.023166023
40     0.33333333     0.175531915      0.3636364    0.605504587 0.003861004
41     0.33333333     0.180851064      0.3636364    0.642201835 0.023166023
42     0.33333333     0.196808511      0.3636364    0.669724771 0.000000000
43     0.33333333     0.215425532      0.3636364    0.724770642 0.019305019
44     0.33333333     0.231382979      0.3636364    0.770642202 0.023166023
45     0.33333333     0.226063830      0.4545455    0.752293578 0.023166023
46     0.33333333     0.207446809      0.5454545    0.770642202 0.023166023
47     0.33333333     0.204787234      0.4545455    0.770642202 0.023166023
48     0.40000000     0.156914894      0.5454545    0.761467890 0.019305019
49     0.40000000     0.167553191      0.5454545    0.779816514 0.023166023
50     0.40000000     0.223404255      0.5454545    0.807339450 0.023166023
51     0.40000000     0.228723404      0.5454545    0.798165138 0.023166023
52     0.40000000     0.215425532      0.5454545    0.798165138 0.023166023
53     0.46666667     0.114361702      0.5454545    0.779816514 0.019305019
54     0.46666667     0.186170213      0.5454545    0.798165138 0.023166023
55     0.40000000     0.202127660      0.5454545    0.816513761 0.023166023
56     0.33333333     0.172872340      0.5454545    0.798165138 0.019305019
57     0.26666667     0.164893617      0.5454545    0.779816514 0.019305019
58     0.26666667     0.170212766      0.4545455    0.779816514 0.023166023
59     0.26666667     0.207446809      0.3636364    0.816513761 0.023166023
60     0.26666667     0.202127660      0.2727273    0.816513761 0.019305019
61     0.26666667     0.196808511      0.3636364    0.844036697 0.023166023
62     0.26666667     0.191489362      0.3636364    0.853211009 0.023166023
63     0.26666667     0.148936170      0.3636364    0.844036697 0.019305019
64     0.26666667     0.204787234      0.3636364    0.862385321 0.023166023
65     0.26666667     0.220744681      0.4545455    0.853211009 0.023166023
66     0.20000000     0.226063830      0.5454545    0.871559633 0.023166023
67     0.13333333     0.130319149      0.4545455    0.871559633 0.019305019
68     0.13333333     0.090425532      0.4545455    0.889908257 0.023166023
69     0.06666667     0.061170213      0.4545455    0.899082569 0.023166023
70     0.06666667     0.050531915      0.4545455    0.899082569 0.023166023
71     0.06666667     0.029255319      0.4545455    0.908256881 0.023166023
72     0.00000000     0.023936170      0.6363636    0.917431193 0.023166023
73     0.00000000     0.042553191      0.4545455    0.944954128 0.027027027
74     0.00000000     0.039893617      0.0000000    0.954128440 0.027027027
75     0.00000000     0.026595745      0.1818182    0.963302752 0.027027027
76     0.00000000     0.007978723      0.2727273    0.963302752 0.027027027
77     0.00000000     0.010638298      0.3636364    0.981651376 0.027027027
78     0.00000000     0.021276596      0.5454545    1.000000000 0.027027027
79     0.00000000     0.082446809      1.0000000    0.972477064 0.027027027
80     0.00000000     0.023936170      0.5454545    0.972477064 0.027027027
81     0.00000000     0.000000000      0.4545455    0.972477064 0.027027027
82     0.06666667     0.029255319      0.4545455    0.972477064 0.030888031
83     0.06666667     0.042553191      0.4545455    0.944954128 0.027027027
84     0.06666667     0.055851064      0.5454545    0.935779817 0.027027027
85     0.06666667     0.045212766      0.4545455    0.926605505 0.023166023
86     0.06666667     0.058510638      0.4545455    0.935779817 0.011583012
87     0.06666667     0.087765957      0.4545455    0.926605505 0.023166023
88     0.06666667     0.069148936      0.5454545    0.926605505 0.030888031
89     0.06666667     0.085106383      0.5454545    0.917431193 0.030888031
90     0.06666667     0.119680851      0.5454545    0.889908257 0.034749035
91     0.06666667     0.162234043      0.4545455    0.889908257 0.034749035
92     0.06666667     0.156914894      0.4545455    0.889908257 0.034749035
93     0.06666667     0.159574468      0.4545455    0.880733945 0.034749035
94     0.13333333     0.135638298      0.4545455    0.871559633 0.034749035
95     0.13333333     0.180851064      0.4545455    0.889908257 0.034749035
96     0.13333333     0.188829787      0.4545455    0.880733945 0.034749035
97     0.20000000     0.098404255      0.4545455    0.871559633 0.034749035
98     0.13333333     0.159574468      0.5454545    0.862385321 0.034749035
99     0.13333333     0.154255319      0.4545455    0.862385321 0.030888031
100    0.13333333     0.188829787      0.4545455    0.853211009 0.030888031
101    0.13333333     0.223404255      0.4545455    0.844036697 0.027027027

$model.list
$model.list$response
[1] "B_CL2_VAL"

$model.list$variables
 [1] "B_TURB_VAL"      "B_PH_VAL"        "B_COND_VAL"      "B_TEMP_VAL"     
 [5] "B_PRES_OP"       "B_PLNT_PRES_OP"  "B_PLNT_PH_VAL"   "B_PLNT_TURB_VAL"
 [9] "B_PLNT_FLOW_OP"  "B_PLNT_CL2_VAL"  "past_data"      


$err.fct
function (x, y) 
{
    1/2 * (y - x)^2
}
<bytecode: 0x7fd6aa25d4a8>
<environment: 0x7fd6aa25fd30>
attr(,"type")
[1] "sse"

$act.fct
function (x) 
{
    1/(1 + exp(-x))
}
<bytecode: 0x7fd6aa25ca88>
<environment: 0x7fd6aa25c190>
attr(,"type")
[1] "logistic"

$linear.output
[1] TRUE

$data
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.00000000 0.61538462
3   0.996138996 0.34415584 0.27272727 0.33333333 0.00000000 0.61538462
4   0.988416988 0.24675325 0.31818182 0.52777778 0.04545455 0.69230769
5   0.984555985 0.29220779 0.36363636 0.50000000 0.04545455 0.61538462
6   0.984555985 0.22077922 0.36363636 0.55555556 0.04545455 0.69230769
7   0.949806950 0.22077922 0.40909091 0.22222222 0.09090909 0.69230769
8   0.972972973 0.12987013 0.40909091 0.41666667 0.13636364 0.69230769
9   0.969111969 0.12987013 0.45454545 0.22222222 0.22727273 0.76923077
10  0.961389961 0.16883117 0.45454545 0.41666667 0.22727273 0.69230769
11  0.965250965 0.18831169 0.45454545 0.25000000 0.27272727 0.53846154
12  0.949806950 0.29870130 0.45454545 0.38888889 0.27272727 0.46153846
13  0.961389961 0.52597403 0.50000000 0.11111111 0.36363636 0.46153846
14  0.961389961 0.50649351 0.45454545 0.36111111 0.36363636 0.46153846
15  0.961389961 0.51948052 0.50000000 0.16666667 0.45454545 0.46153846
16  0.961389961 0.31818182 0.45454545 0.36111111 0.36363636 0.38461538
17  0.976833977 0.43506494 0.45454545 0.47222222 0.45454545 0.38461538
18  0.980694981 0.51298701 0.36363636 0.55555556 0.36363636 0.38461538
19  0.980694981 0.50000000 0.36363636 0.47222222 0.45454545 0.30769231
20  0.980694981 0.44805195 0.40909091 0.50000000 0.40909091 0.30769231
21  0.972972973 0.43506494 0.40909091 0.52777778 0.45454545 0.23076923
22  0.976833977 0.33116883 0.45454545 0.44444444 0.36363636 0.23076923
23  0.980694981 0.19480519 0.50000000 0.58333333 0.45454545 0.61538462
24  0.976833977 0.25324675 0.50000000 0.50000000 0.40909091 0.61538462
25  0.969111969 0.06493506 0.54545455 0.55555556 0.40909091 0.53846154
26  0.969111969 0.22077922 0.59090909 0.50000000 0.40909091 0.53846154
27  0.965250965 0.10389610 0.63636364 0.47222222 0.36363636 0.53846154
28  0.961389961 0.05194805 0.63636364 0.47222222 0.50000000 0.53846154
29  0.961389961 0.30519481 0.72727273 0.47222222 0.40909091 0.46153846
30  0.961389961 0.00000000 0.72727273 0.55555556 0.45454545 0.46153846
31  0.961389961 0.16233766 0.72727273 0.36111111 0.40909091 0.46153846
32  0.953667954 0.18181818 0.68181818 0.58333333 0.40909091 0.53846154
33  0.957528958 0.14285714 0.72727273 0.41666667 0.45454545 0.53846154
34  0.667953668 0.46753247 0.68181818 0.61111111 0.31818182 0.53846154
35  0.019305019 0.47402597 0.72727273 0.66666667 0.36363636 0.53846154
36  0.015444015 0.61038961 0.72727273 0.50000000 0.31818182 0.53846154
37  0.030888031 0.42207792 0.72727273 0.52777778 0.36363636 0.53846154
38  0.023166023 0.53896104 0.77272727 0.33333333 0.36363636 0.53846154
39  0.003861004 0.48051948 0.77272727 0.63888889 0.27272727 0.46153846
40  0.023166023 0.57792208 0.81818182 0.50000000 0.31818182 0.53846154
41  0.000000000 0.74025974 0.81818182 0.50000000 0.27272727 0.53846154
42  0.019305019 0.60389610 0.81818182 0.55555556 0.27272727 0.61538462
43  0.023166023 0.56493506 0.86363636 0.58333333 0.22727273 0.53846154
44  0.023166023 0.37012987 0.90909091 0.63888889 0.27272727 0.46153846
45  0.023166023 0.62337662 0.90909091 0.58333333 0.22727273 0.46153846
46  0.023166023 0.53246753 0.95454545 0.69444444 0.22727273 0.38461538
47  0.019305019 0.34415584 0.95454545 0.47222222 0.27272727 0.23076923
48  0.023166023 0.50000000 1.00000000 0.55555556 0.22727273 0.15384615
49  0.023166023 0.21428571 0.95454545 0.61111111 0.27272727 0.15384615
50  0.023166023 0.28571429 1.00000000 0.50000000 0.22727273 0.15384615
51  0.023166023 0.25324675 0.95454545 0.66666667 0.27272727 0.15384615
52  0.019305019 0.38311688 0.95454545 0.58333333 0.27272727 0.15384615
53  0.023166023 0.37012987 0.90909091 0.83333333 0.18181818 0.00000000
54  0.023166023 0.48051948 0.81818182 0.61111111 0.18181818 0.00000000
55  0.019305019 0.77272727 0.72727273 0.88888889 0.09090909 0.15384615
56  0.019305019 0.70129870 0.68181818 0.63888889 0.13636364 0.07692308
57  0.023166023 0.79870130 0.63636364 0.83333333 0.09090909 0.30769231
58  0.023166023 0.91558442 0.63636364 0.77777778 0.18181818 0.53846154
59  0.019305019 1.00000000 0.59090909 0.83333333 0.09090909 0.69230769
60  0.023166023 0.82467532 0.63636364 0.75000000 0.18181818 0.84615385
61  0.023166023 0.85714286 0.63636364 0.72222222 0.13636364 0.84615385
62  0.019305019 0.72727273 0.63636364 0.75000000 0.18181818 0.76923077
63  0.023166023 0.80519481 0.59090909 0.69444444 0.09090909 0.69230769
64  0.023166023 0.87662338 0.54545455 0.86111111 0.13636364 0.69230769
65  0.023166023 0.79870130 0.50000000 0.69444444 0.04545455 0.53846154
66  0.019305019 0.70129870 0.50000000 0.80555556 0.13636364 0.46153846
67  0.023166023 0.77922078 0.45454545 0.80555556 0.13636364 0.53846154
68  0.023166023 0.70129870 0.45454545 0.88888889 0.13636364 0.53846154
69  0.023166023 0.62987013 0.40909091 0.77777778 0.09090909 0.61538462
70  0.023166023 0.57142857 0.40909091 0.94444444 0.09090909 0.61538462
71  0.023166023 0.72727273 0.40909091 0.77777778 0.09090909 0.69230769
72  0.027027027 0.61688312 0.36363636 1.00000000 0.09090909 0.46153846
73  0.027027027 0.80519481 0.36363636 0.66666667 0.09090909 0.69230769
74  0.027027027 0.77922078 0.36363636 0.94444444 0.09090909 1.00000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.18181818 0.76923077
76  0.027027027 0.38311688 0.40909091 0.94444444 0.09090909 0.76923077
77  0.027027027 0.62987013 0.40909091 0.75000000 0.18181818 0.69230769
78  0.027027027 0.55844156 0.45454545 0.83333333 0.09090909 0.53846154
79  0.027027027 0.45454545 0.45454545 0.69444444 0.22727273 0.23076923
80  0.027027027 0.61038961 0.40909091 0.80555556 0.18181818 0.53846154
81  0.030888031 0.64935065 0.45454545 0.72222222 0.31818182 0.53846154
82  0.027027027 0.82467532 0.45454545 0.69444444 0.31818182 0.53846154
83  0.027027027 0.57792208 0.45454545 0.66666667 0.45454545 0.53846154
84  0.023166023 0.85714286 0.45454545 0.52777778 0.40909091 0.46153846
85  0.011583012 0.33766234 0.45454545 0.58333333 0.50000000 0.38461538
86  0.023166023 0.33116883 0.40909091 0.47222222 0.54545455 0.38461538
87  0.030888031 0.55194805 0.31818182 0.72222222 0.59090909 0.30769231
88  0.030888031 0.44805195 0.22727273 0.33333333 0.72727273 0.23076923
89  0.034749035 0.64285714 0.18181818 0.38888889 0.68181818 0.15384615
90  0.034749035 0.39610390 0.18181818 0.44444444 0.77272727 0.15384615
91  0.034749035 0.42857143 0.18181818 0.33333333 0.77272727 0.15384615
92  0.034749035 0.26623377 0.13636364 0.38888889 0.81818182 0.15384615
93  0.034749035 0.32467532 0.09090909 0.22222222 0.81818182 0.53846154
94  0.034749035 0.25324675 0.00000000 0.16666667 0.81818182 0.61538462
95  0.034749035 0.24675325 0.00000000 0.27777778 0.95454545 0.61538462
96  0.034749035 0.39610390 0.04545455 0.19444444 1.00000000 0.53846154
97  0.034749035 0.12337662 0.04545455 0.30555556 0.95454545 0.53846154
98  0.030888031 0.15584416 0.00000000 0.27777778 0.95454545 0.53846154
99  0.030888031 0.07792208 0.00000000 0.00000000 0.95454545 0.53846154
100 0.027027027 0.07792208 0.00000000 0.05555556 0.86363636 0.53846154
101 0.023166023 0.07142857 0.00000000 0.25000000 0.90909091 0.53846154
    B_PLNT_PRES_OP B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL
2        0.5000000    0.93333333     0.194148936      0.4545455    0.284403670
3        0.5714286    0.93333333     0.199468085      0.3636364    0.284403670
4        0.5714286    0.93333333     0.242021277      0.3636364    0.284403670
5        0.5000000    0.86666667     0.260638298      0.3636364    0.284403670
6        0.5714286    0.86666667     0.289893617      0.3636364    0.238532110
7        0.6428571    0.86666667     0.276595745      0.3636364    0.220183486
8        0.5714286    0.86666667     0.303191489      0.3636364    0.201834862
9        0.7142857    0.80000000     0.348404255      0.2727273    0.174311927
10       0.5714286    0.80000000     0.345744681      0.3636364    0.155963303
11       0.5000000    0.80000000     0.377659574      0.3636364    0.137614679
12       0.5000000    0.80000000     0.375000000      0.4545455    0.100917431
13       0.5000000    0.80000000     0.396276596      0.4545455    0.082568807
14       0.5000000    0.80000000     0.375000000      0.4545455    0.064220183
15       0.5000000    0.73333333     0.375000000      0.4545455    0.045871560
16       0.5000000    0.73333333     0.359042553      0.4545455    0.045871560
17       0.5000000    0.73333333     0.351063830      0.4545455    0.036697248
18       0.5000000    0.73333333     0.327127660      0.4545455    0.018348624
19       0.5000000    0.73333333     0.324468085      0.3636364    0.009174312
20       0.5714286    0.66666667     0.321808511      0.4545455    0.009174312
21       0.5000000    0.66666667     0.297872340      0.3636364    0.009174312
22       0.5000000    0.60000000     0.279255319      0.4545455    0.018348624
23       0.5714286    0.60000000     0.265957447      0.3636364    0.000000000
24       0.5714286    0.53333333     0.247340426      0.3636364    0.000000000
25       0.5000000    0.53333333     0.234042553      0.4545455    0.009174312
26       0.5000000    0.53333333     0.228723404      0.4545455    0.009174312
27       0.5000000    0.46666667     0.228723404      0.4545455    0.027522936
28       0.5000000    0.46666667     0.228723404      0.3636364    0.045871560
29       0.5000000    0.46666667     0.223404255      0.3636364    0.064220183
30       0.4285714    0.40000000     0.226063830      0.4545455    0.082568807
31       0.4285714    0.40000000     0.204787234      0.4545455    0.064220183
32       0.5000000    0.40000000     1.000000000      0.3636364    0.357798165
33       0.5000000    0.33333333     0.319148936      0.4545455    0.568807339
34       0.5000000    0.33333333     0.194148936      0.4545455    0.568807339
35       0.5000000    0.33333333     0.175531915      0.4545455    0.596330275
36       0.5000000    0.33333333     0.172872340      0.3636364    0.605504587
37       0.5000000    0.33333333     0.170212766      0.3636364    0.605504587
38       0.5000000    0.33333333     0.170212766      0.4545455    0.577981651
39       0.5000000    0.33333333     0.164893617      0.4545455    0.577981651
40       0.5000000    0.33333333     0.175531915      0.3636364    0.605504587
41       0.5714286    0.33333333     0.180851064      0.3636364    0.642201835
42       0.5714286    0.33333333     0.196808511      0.3636364    0.669724771
43       0.5714286    0.33333333     0.215425532      0.3636364    0.724770642
44       0.5714286    0.33333333     0.231382979      0.3636364    0.770642202
45       0.5714286    0.33333333     0.226063830      0.4545455    0.752293578
46       0.5000000    0.33333333     0.207446809      0.5454545    0.770642202
47       0.4285714    0.33333333     0.204787234      0.4545455    0.770642202
48       0.4285714    0.40000000     0.156914894      0.5454545    0.761467890
49       0.4285714    0.40000000     0.167553191      0.5454545    0.779816514
50       0.4285714    0.40000000     0.223404255      0.5454545    0.807339450
51       0.4285714    0.40000000     0.228723404      0.5454545    0.798165138
52       0.4285714    0.40000000     0.215425532      0.5454545    0.798165138
53       0.4285714    0.46666667     0.114361702      0.5454545    0.779816514
54       0.4285714    0.46666667     0.186170213      0.5454545    0.798165138
55       0.5000000    0.40000000     0.202127660      0.5454545    0.816513761
56       0.4285714    0.33333333     0.172872340      0.5454545    0.798165138
57       0.5000000    0.26666667     0.164893617      0.5454545    0.779816514
58       0.5714286    0.26666667     0.170212766      0.4545455    0.779816514
59       0.6428571    0.26666667     0.207446809      0.3636364    0.816513761
60       0.7142857    0.26666667     0.202127660      0.2727273    0.816513761
61       0.6428571    0.26666667     0.196808511      0.3636364    0.844036697
62       0.6428571    0.26666667     0.191489362      0.3636364    0.853211009
63       0.6428571    0.26666667     0.148936170      0.3636364    0.844036697
64       0.5714286    0.26666667     0.204787234      0.3636364    0.862385321
65       0.5000000    0.26666667     0.220744681      0.4545455    0.853211009
66       0.4285714    0.20000000     0.226063830      0.5454545    0.871559633
67       0.4285714    0.13333333     0.130319149      0.4545455    0.871559633
68       0.5000000    0.13333333     0.090425532      0.4545455    0.889908257
69       0.5000000    0.06666667     0.061170213      0.4545455    0.899082569
70       0.5000000    0.06666667     0.050531915      0.4545455    0.899082569
71       0.5714286    0.06666667     0.029255319      0.4545455    0.908256881
72       0.3571429    0.00000000     0.023936170      0.6363636    0.917431193
73       0.5714286    0.00000000     0.042553191      0.4545455    0.944954128
74       1.0000000    0.00000000     0.039893617      0.0000000    0.954128440
75       0.7857143    0.00000000     0.026595745      0.1818182    0.963302752
76       0.7142857    0.00000000     0.007978723      0.2727273    0.963302752
77       0.6428571    0.00000000     0.010638298      0.3636364    0.981651376
78       0.4285714    0.00000000     0.021276596      0.5454545    1.000000000
79       0.0000000    0.00000000     0.082446809      1.0000000    0.972477064
80       0.5000000    0.00000000     0.023936170      0.5454545    0.972477064
81       0.5000000    0.00000000     0.000000000      0.4545455    0.972477064
82       0.5000000    0.06666667     0.029255319      0.4545455    0.972477064
83       0.5000000    0.06666667     0.042553191      0.4545455    0.944954128
84       0.5000000    0.06666667     0.055851064      0.5454545    0.935779817
85       0.5000000    0.06666667     0.045212766      0.4545455    0.926605505
86       0.5000000    0.06666667     0.058510638      0.4545455    0.935779817
87       0.5000000    0.06666667     0.087765957      0.4545455    0.926605505
88       0.4285714    0.06666667     0.069148936      0.5454545    0.926605505
89       0.4285714    0.06666667     0.085106383      0.5454545    0.917431193
90       0.5000000    0.06666667     0.119680851      0.5454545    0.889908257
91       0.5714286    0.06666667     0.162234043      0.4545455    0.889908257
92       0.5000000    0.06666667     0.156914894      0.4545455    0.889908257
93       0.5714286    0.06666667     0.159574468      0.4545455    0.880733945
94       0.5714286    0.13333333     0.135638298      0.4545455    0.871559633
95       0.5714286    0.13333333     0.180851064      0.4545455    0.889908257
96       0.5714286    0.13333333     0.188829787      0.4545455    0.880733945
97       0.5714286    0.20000000     0.098404255      0.4545455    0.871559633
98       0.5714286    0.13333333     0.159574468      0.5454545    0.862385321
99       0.5714286    0.13333333     0.154255319      0.4545455    0.862385321
100      0.5000000    0.13333333     0.188829787      0.4545455    0.853211009
101      0.5000000    0.13333333     0.223404255      0.4545455    0.844036697
      past_data
2   1.000000000
3   1.000000000
4   0.996138996
5   0.988416988
6   0.984555985
7   0.984555985
8   0.949806950
9   0.972972973
10  0.969111969
11  0.961389961
12  0.965250965
13  0.949806950
14  0.961389961
15  0.961389961
16  0.961389961
17  0.961389961
18  0.976833977
19  0.980694981
20  0.980694981
21  0.980694981
22  0.972972973
23  0.976833977
24  0.980694981
25  0.976833977
26  0.969111969
27  0.969111969
28  0.965250965
29  0.961389961
30  0.961389961
31  0.961389961
32  0.961389961
33  0.953667954
34  0.957528958
35  0.667953668
36  0.019305019
37  0.015444015
38  0.030888031
39  0.023166023
40  0.003861004
41  0.023166023
42  0.000000000
43  0.019305019
44  0.023166023
45  0.023166023
46  0.023166023
47  0.023166023
48  0.019305019
49  0.023166023
50  0.023166023
51  0.023166023
52  0.023166023
53  0.019305019
54  0.023166023
55  0.023166023
56  0.019305019
57  0.019305019
58  0.023166023
59  0.023166023
60  0.019305019
61  0.023166023
62  0.023166023
63  0.019305019
64  0.023166023
65  0.023166023
66  0.023166023
67  0.019305019
68  0.023166023
69  0.023166023
70  0.023166023
71  0.023166023
72  0.023166023
73  0.027027027
74  0.027027027
75  0.027027027
76  0.027027027
77  0.027027027
78  0.027027027
79  0.027027027
80  0.027027027
81  0.027027027
82  0.030888031
83  0.027027027
84  0.027027027
85  0.023166023
86  0.011583012
87  0.023166023
88  0.030888031
89  0.030888031
90  0.034749035
91  0.034749035
92  0.034749035
93  0.034749035
94  0.034749035
95  0.034749035
96  0.034749035
97  0.034749035
98  0.034749035
99  0.030888031
100 0.030888031
101 0.027027027

$exclude
NULL

$net.result
$net.result[[1]]
          [,1]
2   0.97695893
3   0.97604556
4   0.97466378
5   0.97358355
6   0.97451498
7   0.97713243
8   0.97636567
9   0.97747910
10  0.97592189
11  0.97792085
12  0.97487108
13  0.96706983
14  0.96279115
15  0.96663316
16  0.97508979
17  0.96486923
18  0.96392500
19  0.96970290
20  0.96846222
21  0.97084294
22  0.97495374
23  0.97283651
24  0.97256808
25  0.97693831
26  0.97136751
27  0.97531739
28  0.97581311
29  0.95627071
30  0.97484834
31  0.97293272
32  0.96582716
33  0.93489228
34  0.66403830
35  0.06482115
36  0.02366150
37  0.02369731
38  0.02369084
39  0.02367294
40  0.02365551
41  0.02364523
42  0.02364690
43  0.02364882
44  0.02366114
45  0.02364473
46  0.02364564
47  0.02369724
48  0.02365418
49  0.02372001
50  0.02370351
51  0.02369438
52  0.02367072
53  0.02366302
54  0.02367476
55  0.02364174
56  0.02365163
57  0.02364219
58  0.02364011
59  0.02363946
60  0.02364008
61  0.02364004
62  0.02364126
63  0.02364128
64  0.02364017
65  0.02364514
66  0.02364693
67  0.02364377
68  0.02364383
69  0.02365004
70  0.02364847
71  0.02364338
72  0.02364815
73  0.02364320
74  0.02363974
75  0.02365121
76  0.02365362
77  0.02364473
78  0.02364936
79  0.02371012
80  0.02364709
81  0.02364504
82  0.02364140
83  0.02364973
84  0.02364229
85  0.02370803
86  0.02373506
87  0.02366032
88  0.02382455
89  0.02370958
90  0.02388098
91  0.02391022
92  0.02442548
93  0.02421785
94  0.02497436
95  0.02447582
96  0.02403661
97  0.02510207
98  0.02520718
99  0.02945895
100 0.03057494
101 0.02759694


$weights
$weights[[1]]
$weights[[1]][[1]]
             [,1]
 [1,]  -1.0492030
 [2,]   6.0344945
 [3,]   3.6584630
 [4,]   2.9422199
 [5,]   1.3125998
 [6,]   1.2847934
 [7,]   2.0813457
 [8,]  -0.1414557
 [9,]  -1.2507101
[10,]   0.8636024
[11,]   3.1408159
[12,] -11.2896426

$weights[[1]][[2]]
           [,1]
[1,]  0.9800254
[2,] -0.9563865



$generalized.weights
$generalized.weights[[1]]
             [,1]          [,2]          [,3]          [,4]          [,5]
2   -0.8194103756 -4.967744e-01 -3.995174e-01 -1.782350e-01 -1.744592e-01
3   -1.0229058153 -6.201452e-01 -4.987350e-01 -2.224985e-01 -2.177850e-01
4   -1.3028541190 -7.898663e-01 -6.352286e-01 -2.833918e-01 -2.773883e-01
5   -1.5012959525 -9.101733e-01 -7.319822e-01 -3.265561e-01 -3.196382e-01
6   -1.3311896132 -8.070449e-01 -6.490440e-01 -2.895552e-01 -2.834212e-01
7   -0.7789151329 -4.722238e-01 -3.797733e-01 -1.694266e-01 -1.658374e-01
8   -0.9533787032 -5.779939e-01 -4.648359e-01 -2.073752e-01 -2.029821e-01
9   -0.6961362945 -4.220385e-01 -3.394130e-01 -1.514209e-01 -1.482131e-01
10  -1.0492714947 -6.361297e-01 -5.115901e-01 -2.282335e-01 -2.233985e-01
11  -0.5868809272 -3.558015e-01 -2.861437e-01 -1.276561e-01 -1.249518e-01
12  -1.2628190637 -7.655947e-01 -6.157088e-01 -2.746835e-01 -2.688645e-01
13  -2.4217045093 -1.468179e+00 -1.180743e+00 -5.267598e-01 -5.156008e-01
14  -2.8507340569 -1.728281e+00 -1.389924e+00 -6.200806e-01 -6.069447e-01
15  -2.4705399848 -1.497786e+00 -1.204554e+00 -5.373823e-01 -5.259982e-01
16  -1.2198598341 -7.395503e-01 -5.947633e-01 -2.653392e-01 -2.597182e-01
17  -2.6554351416 -1.609880e+00 -1.294702e+00 -5.775999e-01 -5.653639e-01
18  -2.7469686772 -1.665373e+00 -1.339331e+00 -5.975100e-01 -5.848522e-01
19  -2.0973543194 -1.271539e+00 -1.022601e+00 -4.562084e-01 -4.465439e-01
20  -2.2569409166 -1.368289e+00 -1.100410e+00 -4.909210e-01 -4.805212e-01
21  -1.9387226061 -1.175367e+00 -9.452570e-01 -4.217034e-01 -4.127700e-01
22  -1.2466706545 -7.558046e-01 -6.078354e-01 -2.711710e-01 -2.654264e-01
23  -1.6292900248 -9.877708e-01 -7.943879e-01 -3.543968e-01 -3.468892e-01
24  -1.6735771590 -1.014620e+00 -8.159809e-01 -3.640300e-01 -3.563183e-01
25  -0.8241819595 -4.996672e-01 -4.018439e-01 -1.792729e-01 -1.754751e-01
26  -1.8614824125 -1.128539e+00 -9.075972e-01 -4.049024e-01 -3.963249e-01
27  -1.1743417048 -7.119545e-01 -5.725702e-01 -2.554382e-01 -2.500270e-01
28  -1.0722395371 -6.500542e-01 -5.227885e-01 -2.332294e-01 -2.282886e-01
29  -3.3428210024 -2.026613e+00 -1.629849e+00 -7.271174e-01 -7.117140e-01
30  -1.2672430653 -7.682768e-01 -6.178658e-01 -2.756458e-01 -2.698064e-01
31  -1.6132033327 -9.780181e-01 -7.865446e-01 -3.508977e-01 -3.434642e-01
32  -2.5573973007 -1.550444e+00 -1.246902e+00 -5.562751e-01 -5.444909e-01
33  -4.2633167796 -2.584672e+00 -2.078652e+00 -9.273401e-01 -9.076951e-01
34  -5.7232775856 -3.469785e+00 -2.790481e+00 -1.244905e+00 -1.218533e+00
35  -3.9230570782 -2.378386e+00 -1.912753e+00 -8.533281e-01 -8.352510e-01
36  -0.0059169702 -3.587213e-03 -2.884919e-03 -1.287036e-03 -1.259772e-03
37  -0.0152462334 -9.243157e-03 -7.433559e-03 -3.316301e-03 -3.246048e-03
38  -0.0135634528 -8.222957e-03 -6.613091e-03 -2.950270e-03 -2.887770e-03
39  -0.0089007317 -5.396143e-03 -4.339702e-03 -1.936053e-03 -1.895039e-03
40  -0.0043509363 -2.637792e-03 -2.121373e-03 -9.463988e-04 -9.263500e-04
41  -0.0016678692 -1.011160e-03 -8.131978e-04 -3.627884e-04 -3.551030e-04
42  -0.0021044427 -1.275836e-03 -1.026057e-03 -4.577502e-04 -4.480531e-04
43  -0.0026061960 -1.580028e-03 -1.270695e-03 -5.668896e-04 -5.548805e-04
44  -0.0058228986 -3.530181e-03 -2.839053e-03 -1.266574e-03 -1.239743e-03
45  -0.0015370751 -9.318647e-04 -7.494270e-04 -3.343386e-04 -3.272559e-04
46  -0.0017741113 -1.075570e-03 -8.649980e-04 -3.858978e-04 -3.777229e-04
47  -0.0152275269 -9.231816e-03 -7.424438e-03 -3.312233e-03 -3.242065e-03
48  -0.0040060899 -2.428726e-03 -1.953237e-03 -8.713891e-04 -8.529294e-04
49  -0.0211480175 -1.282116e-02 -1.031107e-02 -4.600035e-03 -4.502586e-03
50  -0.0168595396 -1.022124e-02 -8.220154e-03 -3.667222e-03 -3.589534e-03
51  -0.0144828438 -8.780346e-03 -7.061356e-03 -3.150252e-03 -3.083516e-03
52  -0.0083214902 -5.044973e-03 -4.057283e-03 -1.810058e-03 -1.771714e-03
53  -0.0063112955 -3.826276e-03 -3.077179e-03 -1.372808e-03 -1.343727e-03
54  -0.0093733673 -5.682683e-03 -4.570144e-03 -2.038858e-03 -1.995667e-03
55  -0.0007536544 -4.569093e-04 -3.674570e-04 -1.639320e-04 -1.604592e-04
56  -0.0033383878 -2.023926e-03 -1.627687e-03 -7.261531e-04 -7.107702e-04
57  -0.0008737530 -5.297201e-04 -4.260131e-04 -1.900554e-04 -1.860292e-04
58  -0.0003287442 -1.993040e-04 -1.602848e-04 -7.150717e-05 -6.999235e-05
59  -0.0001594225 -9.665125e-05 -7.772915e-05 -3.467697e-05 -3.394236e-05
60  -0.0003208681 -1.945290e-04 -1.564447e-04 -6.979399e-05 -6.831546e-05
61  -0.0003101789 -1.880486e-04 -1.512330e-04 -6.746891e-05 -6.603963e-05
62  -0.0006281430 -3.808170e-04 -3.062617e-04 -1.366312e-04 -1.337368e-04
63  -0.0006342595 -3.845252e-04 -3.092440e-04 -1.379617e-04 -1.350391e-04
64  -0.0003445406 -2.088806e-04 -1.679866e-04 -7.494313e-05 -7.335551e-05
65  -0.0016438550 -9.966009e-04 -8.014893e-04 -3.575650e-04 -3.499902e-04
66  -0.0021108330 -1.279710e-03 -1.029172e-03 -4.591402e-04 -4.494137e-04
67  -0.0012842870 -7.786098e-04 -6.261758e-04 -2.793531e-04 -2.734352e-04
68  -0.0013003496 -7.883479e-04 -6.340075e-04 -2.828470e-04 -2.768551e-04
69  -0.0029229828 -1.772083e-03 -1.425150e-03 -6.357959e-04 -6.223270e-04
70  -0.0025134653 -1.523809e-03 -1.225483e-03 -5.467192e-04 -5.351374e-04
71  -0.0011839885 -7.178030e-04 -5.772736e-04 -2.575366e-04 -2.520809e-04
72  -0.0024299522 -1.473179e-03 -1.184764e-03 -5.285538e-04 -5.173568e-04
73  -0.0011358883 -6.886418e-04 -5.538216e-04 -2.470740e-04 -2.418399e-04
74  -0.0002322597 -1.408094e-04 -1.132421e-04 -5.052022e-05 -4.944999e-05
75  -0.0032283743 -1.957229e-03 -1.574049e-03 -7.022235e-04 -6.873474e-04
76  -0.0038589453 -2.339518e-03 -1.881494e-03 -8.393828e-04 -8.216011e-04
77  -0.0015360352 -9.312342e-04 -7.489199e-04 -3.341124e-04 -3.270345e-04
78  -0.0027461718 -1.664890e-03 -1.338943e-03 -5.973366e-04 -5.846825e-04
79  -0.0185769015 -1.126240e-02 -9.057483e-03 -4.040775e-03 -3.955175e-03
80  -0.0021524878 -1.304964e-03 -1.049482e-03 -4.682008e-04 -4.582823e-04
81  -0.0016161965 -9.798327e-04 -7.880039e-04 -3.515488e-04 -3.441015e-04
82  -0.0006660273 -4.037846e-04 -3.247329e-04 -1.448717e-04 -1.418027e-04
83  -0.0028418914 -1.722921e-03 -1.385612e-03 -6.181572e-04 -6.050620e-04
84  -0.0008993425 -5.452340e-04 -4.384897e-04 -1.956215e-04 -1.914774e-04
85  -0.0180354593 -1.093415e-02 -8.793493e-03 -3.923003e-03 -3.839897e-03
86  -0.0250518864 -1.518792e-02 -1.221447e-02 -5.449189e-03 -5.333752e-03
87  -0.0056083896 -3.400133e-03 -2.734465e-03 -1.219915e-03 -1.194072e-03
88  -0.0481734391 -2.920555e-02 -2.348778e-02 -1.047850e-02 -1.025652e-02
89  -0.0184362911 -1.117716e-02 -8.988926e-03 -4.010190e-03 -3.925238e-03
90  -0.0626642426 -3.799072e-02 -3.055301e-02 -1.363048e-02 -1.334173e-02
91  -0.0701466211 -4.252698e-02 -3.420117e-02 -1.525802e-02 -1.493479e-02
92  -0.1990449542 -1.206727e-01 -9.704774e-02 -4.329549e-02 -4.237830e-02
93  -0.1477630944 -8.958262e-02 -7.204440e-02 -3.214085e-02 -3.145998e-02
94  -0.3304977894 -2.003671e-01 -1.611398e-01 -7.188860e-02 -7.036569e-02
95  -0.2113457910 -1.281302e-01 -1.030452e-01 -4.597112e-02 -4.499725e-02
96  -0.1022753047 -6.200526e-02 -4.986606e-02 -2.224653e-02 -2.177525e-02
97  -0.3602608957 -2.184112e-01 -1.756513e-01 -7.836255e-02 -7.670250e-02
98  -0.3845278104 -2.331232e-01 -1.874830e-01 -8.364100e-02 -8.186913e-02
99  -1.2209244616 -7.401957e-01 -5.952824e-01 -2.655707e-01 -2.599448e-01
100 -1.4018910585 -8.499082e-01 -6.835157e-01 -3.049339e-01 -2.984741e-01
101 -0.8863752863 -5.373725e-01 -4.321673e-01 -1.928009e-01 -1.887166e-01
             [,6]         [,7]         [,8]          [,9]         [,10]
2   -2.826212e-01 1.920795e-02 1.698311e-01 -1.172666e-01 -4.264843e-01
3   -3.528084e-01 2.397812e-02 2.120076e-01 -1.463890e-01 -5.323990e-01
4   -4.493649e-01 3.054044e-02 2.700297e-01 -1.864527e-01 -6.781057e-01
5   -5.178090e-01 3.519215e-02 3.111588e-01 -2.148519e-01 -7.813901e-01
6   -4.591380e-01 3.120465e-02 2.759025e-01 -1.905078e-01 -6.928536e-01
7   -2.686541e-01 1.825869e-02 1.614380e-01 -1.114713e-01 -4.054075e-01
8   -3.288280e-01 2.234832e-02 1.975974e-01 -1.364390e-01 -4.962117e-01
9   -2.401030e-01 1.631826e-02 1.442813e-01 -9.962474e-02 -3.623230e-01
10  -3.619022e-01 2.459616e-02 2.174721e-01 -1.501623e-01 -5.461217e-01
11  -2.024199e-01 1.375718e-02 1.216370e-01 -8.398910e-02 -3.054581e-01
12  -4.355564e-01 2.960197e-02 2.617320e-01 -1.807233e-01 -6.572683e-01
13  -8.352653e-01 5.676761e-02 5.019228e-01 -3.465725e-01 -1.260442e+00
14  -9.832411e-01 6.682457e-02 5.908435e-01 -4.079713e-01 -1.483742e+00
15  -8.521091e-01 5.791237e-02 5.120444e-01 -3.535614e-01 -1.285859e+00
16  -4.207395e-01 2.859495e-02 2.528283e-01 -1.745753e-01 -6.349091e-01
17  -9.158809e-01 6.224653e-02 5.503658e-01 -3.800219e-01 -1.382093e+00
18  -9.474516e-01 6.439218e-02 5.693371e-01 -3.931214e-01 -1.429734e+00
19  -7.233944e-01 4.916446e-02 4.346979e-01 -3.001544e-01 -1.091625e+00
20  -7.784371e-01 5.290536e-02 4.677739e-01 -3.229930e-01 -1.174686e+00
21  -6.686810e-01 4.544594e-02 4.018199e-01 -2.774525e-01 -1.009061e+00
22  -4.299867e-01 2.922343e-02 2.583851e-01 -1.784123e-01 -6.488635e-01
23  -5.619552e-01 3.819248e-02 3.376869e-01 -2.331693e-01 -8.480081e-01
24  -5.772302e-01 3.923062e-02 3.468658e-01 -2.395073e-01 -8.710585e-01
25  -2.842670e-01 1.931980e-02 1.708201e-01 -1.179495e-01 -4.289678e-01
26  -6.420402e-01 4.363534e-02 3.858111e-01 -2.663986e-01 -9.688589e-01
27  -4.050399e-01 2.752795e-02 2.433942e-01 -1.680612e-01 -6.112179e-01
28  -3.698240e-01 2.513456e-02 2.222325e-01 -1.534492e-01 -5.580761e-01
29  -1.152966e+00 7.835967e-02 6.928335e-01 -4.783944e-01 -1.739862e+00
30  -4.370823e-01 2.970567e-02 2.626490e-01 -1.813564e-01 -6.595709e-01
31  -5.564068e-01 3.781539e-02 3.343527e-01 -2.308671e-01 -8.396353e-01
32  -8.820669e-01 5.994841e-02 5.300465e-01 -3.659916e-01 -1.331067e+00
33  -1.470452e+00 9.993717e-02 8.836156e-01 -6.101274e-01 -2.218959e+00
34  -1.974004e+00 1.341604e-01 1.186207e+00 -8.190638e-01 -2.978835e+00
35  -1.353094e+00 9.196108e-02 8.130933e-01 -5.614325e-01 -2.041861e+00
36  -2.040811e-03 1.387008e-04 1.226352e-03 -8.467834e-04 -3.079647e-03
37  -5.258548e-03 3.573897e-04 3.159936e-03 -2.181903e-03 -7.935315e-03
38  -4.678144e-03 3.179433e-04 2.811163e-03 -1.941079e-03 -7.059466e-03
39  -3.069934e-03 2.086436e-04 1.844767e-03 -1.273792e-03 -4.632627e-03
40  -1.500673e-03 1.019911e-04 9.017756e-04 -6.226667e-04 -2.264563e-03
41  -5.752615e-04 3.909682e-05 3.456828e-04 -2.386904e-04 -8.680876e-04
42  -7.258392e-04 4.933062e-05 4.361671e-04 -3.011688e-04 -1.095314e-03
43  -8.988979e-04 6.109231e-05 5.401605e-04 -3.729752e-04 -1.356465e-03
44  -2.008365e-03 1.364956e-04 1.206855e-03 -8.333207e-04 -3.030685e-03
45  -5.301495e-04 3.603085e-05 3.185744e-04 -2.199723e-04 -8.000123e-04
46  -6.119053e-04 4.158726e-05 3.677025e-04 -2.538948e-04 -9.233842e-04
47  -5.252096e-03 3.569512e-04 3.156059e-03 -2.179226e-03 -7.925578e-03
48  -1.381733e-03 9.390747e-05 8.303027e-04 -5.733154e-04 -2.085078e-03
49  -7.294121e-03 4.957345e-04 4.383141e-03 -3.026513e-03 -1.100706e-02
50  -5.814991e-03 3.952075e-04 3.494310e-03 -2.412785e-03 -8.775004e-03
51  -4.995249e-03 3.394949e-04 3.001716e-03 -2.072654e-03 -7.537988e-03
52  -2.870149e-03 1.950655e-04 1.724713e-03 -1.190897e-03 -4.331145e-03
53  -2.176817e-03 1.479442e-04 1.308080e-03 -9.032156e-04 -3.284884e-03
54  -3.232950e-03 2.197228e-04 1.942725e-03 -1.341432e-03 -4.878623e-03
55  -2.599415e-04 1.766655e-05 1.562025e-04 -1.078562e-04 -3.922598e-04
56  -1.151437e-03 7.825574e-05 6.919147e-04 -4.777599e-04 -1.737554e-03
57  -3.013644e-04 2.048180e-05 1.810942e-04 -1.250436e-04 -4.547684e-04
58  -1.133865e-04 7.706153e-06 6.813557e-05 -4.704691e-05 -1.711038e-04
59  -5.498611e-05 3.737052e-06 3.304193e-05 -2.281511e-05 -8.297577e-05
60  -1.106700e-04 7.521527e-06 6.650317e-05 -4.591975e-05 -1.670045e-04
61  -1.069832e-04 7.270959e-06 6.428772e-05 -4.439000e-05 -1.614410e-04
62  -2.166516e-04 1.472441e-05 1.301890e-04 -8.989416e-05 -3.269340e-04
63  -2.187612e-04 1.486779e-05 1.314567e-04 -9.076950e-05 -3.301175e-04
64  -1.188348e-04 8.076437e-06 7.140952e-05 -4.930754e-05 -1.793255e-04
65  -5.669788e-04 3.853390e-05 3.407056e-04 -2.352537e-04 -8.555888e-04
66  -7.280432e-04 4.948041e-05 4.374915e-04 -3.020834e-04 -1.098640e-03
67  -4.429609e-04 3.010520e-05 2.661815e-04 -1.837956e-04 -6.684419e-04
68  -4.485010e-04 3.048173e-05 2.695106e-04 -1.860943e-04 -6.768021e-04
69  -1.008160e-03 6.851816e-05 6.058178e-04 -4.183109e-04 -1.521345e-03
70  -8.669144e-04 5.891859e-05 5.209411e-04 -3.597045e-04 -1.308201e-03
71  -4.083671e-04 2.775409e-05 2.453936e-04 -1.694417e-04 -6.162388e-04
72  -8.381100e-04 5.696094e-05 5.036322e-04 -3.477528e-04 -1.264734e-03
73  -3.917770e-04 2.662656e-05 2.354244e-04 -1.625581e-04 -5.912038e-04
74  -8.010823e-05 5.444440e-06 4.813817e-05 -3.323891e-05 -1.208858e-04
75  -1.113492e-03 7.567690e-05 6.691133e-04 -4.620158e-04 -1.680295e-03
76  -1.330981e-03 9.045823e-05 7.998055e-04 -5.522574e-04 -2.008492e-03
77  -5.297909e-04 3.600648e-05 3.183588e-04 -2.198235e-04 -7.994711e-04
78  -9.471767e-04 6.437350e-05 5.691719e-04 -3.930073e-04 -1.429319e-03
79  -6.407323e-03 4.354645e-04 3.850251e-03 -2.658558e-03 -9.668851e-03
80  -7.424103e-04 5.045685e-05 4.461249e-04 -3.080446e-04 -1.120321e-03
81  -5.574391e-04 3.788555e-05 3.349731e-04 -2.312955e-04 -8.411932e-04
82  -2.297182e-04 1.561246e-05 1.380409e-04 -9.531581e-05 -3.466519e-04
83  -9.801912e-04 6.661728e-05 5.890108e-04 -4.067058e-04 -1.479139e-03
84  -3.101905e-04 2.108165e-05 1.863978e-04 -1.287058e-04 -4.680872e-04
85  -6.220575e-03 4.227724e-04 3.738032e-03 -2.581072e-03 -9.387043e-03
86  -8.640597e-03 5.872458e-04 5.192257e-03 -3.585200e-03 -1.303893e-02
87  -1.934379e-03 1.314673e-04 1.162396e-03 -8.026221e-04 -2.919038e-03
88  -1.661541e-02 1.129242e-03 9.984433e-03 -6.894148e-03 -2.507317e-02
89  -6.358825e-03 4.321684e-04 3.821108e-03 -2.638436e-03 -9.595666e-03
90  -2.161340e-02 1.468924e-03 1.298780e-02 -8.967941e-03 -3.261530e-02
91  -2.419413e-02 1.644319e-03 1.453860e-02 -1.003875e-02 -3.650971e-02
92  -6.865220e-02 4.665848e-03 4.125408e-02 -2.848552e-02 -1.035983e-01
93  -5.096468e-02 3.463741e-03 3.062540e-02 -2.114652e-02 -7.690730e-02
94  -1.139913e-01 7.747258e-03 6.849901e-02 -4.729786e-02 -1.720165e-01
95  -7.289486e-02 4.954194e-03 4.380356e-02 -3.024590e-02 -1.100006e-01
96  -3.527557e-02 2.397454e-03 2.119759e-02 -1.463672e-02 -5.323195e-02
97  -1.242569e-01 8.444940e-03 7.466772e-02 -5.155729e-02 -1.875075e-01
98  -1.326267e-01 9.013785e-03 7.969728e-02 -5.503015e-02 -2.001379e-01
99  -4.211067e-01 2.861991e-02 2.530490e-01 -1.747277e-01 -6.354632e-01
100 -4.835235e-01 3.286198e-02 2.905561e-01 -2.006260e-01 -7.296521e-01
101 -3.057180e-01 2.077768e-02 1.837103e-01 -1.268500e-01 -4.613380e-01
           [,11]
2   1.532995e+00
3   1.913705e+00
4   2.437446e+00
5   2.808702e+00
6   2.490458e+00
7   1.457234e+00
8   1.783630e+00
9   1.302368e+00
10  1.963031e+00
11  1.097967e+00
12  2.362547e+00
13  4.530649e+00
14  5.333300e+00
15  4.622013e+00
16  2.282176e+00
17  4.967925e+00
18  5.139170e+00
19  3.923838e+00
20  4.222401e+00
21  3.627062e+00
22  2.332336e+00
23  3.048160e+00
24  3.131014e+00
25  1.541922e+00
26  3.482557e+00
27  2.197019e+00
28  2.006001e+00
29  6.253921e+00
30  2.370823e+00
31  3.018064e+00
32  4.784510e+00
33  7.976032e+00
34  1.070740e+01
35  7.339457e+00
36  1.106977e-02
37  2.852344e-02
38  2.537520e-02
39  1.665195e-02
40  8.139955e-03
41  3.120335e-03
42  3.937100e-03
43  4.875805e-03
44  1.089378e-02
45  2.875639e-03
46  3.319099e-03
47  2.848844e-02
48  7.494799e-03
49  3.956480e-02
50  3.154169e-02
51  2.709525e-02
52  1.556827e-02
53  1.180750e-02
54  1.753618e-02
55  1.409975e-03
56  6.245627e-03
57  1.634662e-03
58  6.150316e-04
59  2.982559e-04
60  6.002966e-04
61  5.802986e-04
62  1.175162e-03
63  1.186605e-03
64  6.445842e-04
65  3.075408e-03
66  3.949055e-03
67  2.402710e-03
68  2.432761e-03
69  5.468466e-03
70  4.702320e-03
71  2.215066e-03
72  4.546079e-03
73  2.125078e-03
74  4.345233e-04
75  6.039809e-03
76  7.219513e-03
77  2.873694e-03
78  5.137679e-03
79  3.475462e-02
80  4.026985e-03
81  3.023663e-03
82  1.246038e-03
83  5.316756e-03
84  1.682536e-03
85  3.374166e-02
86  4.686836e-02
87  1.049246e-02
88  9.012535e-02
89  3.449156e-02
90  1.172355e-01
91  1.312339e-01
92  3.723835e-01
93  2.764428e-01
94  6.183123e-01
95  3.953966e-01
96  1.913419e-01
97  6.739946e-01
98  7.193944e-01
99  2.284168e+00
100 2.622730e+00
101 1.658276e+00


$startweights
$startweights[[1]]
$startweights[[1]][[1]]
            [,1]
 [1,] -0.6264538
 [2,]  0.1836433
 [3,] -0.8356286
 [4,]  1.5952808
 [5,]  0.3295078
 [6,] -0.8204684
 [7,]  0.4874291
 [8,]  0.7383247
 [9,]  0.5757814
[10,] -0.3053884
[11,]  1.5117812
[12,]  0.3898432

$startweights[[1]][[2]]
           [,1]
[1,] -0.6212406
[2,] -2.2146999



$result.matrix
                                     [,1]
error                        5.187390e-03
reached.threshold            9.404479e-03
steps                        1.797000e+03
Intercept.to.1layhid1       -1.049203e+00
B_TURB_VAL.to.1layhid1       6.034495e+00
B_PH_VAL.to.1layhid1         3.658463e+00
B_COND_VAL.to.1layhid1       2.942220e+00
B_TEMP_VAL.to.1layhid1       1.312600e+00
B_PRES_OP.to.1layhid1        1.284793e+00
B_PLNT_PRES_OP.to.1layhid1   2.081346e+00
B_PLNT_PH_VAL.to.1layhid1   -1.414557e-01
B_PLNT_TURB_VAL.to.1layhid1 -1.250710e+00
B_PLNT_FLOW_OP.to.1layhid1   8.636024e-01
B_PLNT_CL2_VAL.to.1layhid1   3.140816e+00
past_data.to.1layhid1       -1.128964e+01
Intercept.to.B_CL2_VAL       9.800254e-01
1layhid1.to.B_CL2_VAL       -9.563865e-01

attr(,"class")
[1] "nn"

$modelList$model2
$call
neuralnet(formula = nn_input, data = model_input, hidden = hidden, 
    threshold = threshold, stepmax = stepmax, rep = rep, startweights = unlist(control))

$response
    B_TURB_VAL
2   0.16233766
3   0.34415584
4   0.24675325
5   0.29220779
6   0.22077922
7   0.22077922
8   0.12987013
9   0.12987013
10  0.16883117
11  0.18831169
12  0.29870130
13  0.52597403
14  0.50649351
15  0.51948052
16  0.31818182
17  0.43506494
18  0.51298701
19  0.50000000
20  0.44805195
21  0.43506494
22  0.33116883
23  0.19480519
24  0.25324675
25  0.06493506
26  0.22077922
27  0.10389610
28  0.05194805
29  0.30519481
30  0.00000000
31  0.16233766
32  0.18181818
33  0.14285714
34  0.46753247
35  0.47402597
36  0.61038961
37  0.42207792
38  0.53896104
39  0.48051948
40  0.57792208
41  0.74025974
42  0.60389610
43  0.56493506
44  0.37012987
45  0.62337662
46  0.53246753
47  0.34415584
48  0.50000000
49  0.21428571
50  0.28571429
51  0.25324675
52  0.38311688
53  0.37012987
54  0.48051948
55  0.77272727
56  0.70129870
57  0.79870130
58  0.91558442
59  1.00000000
60  0.82467532
61  0.85714286
62  0.72727273
63  0.80519481
64  0.87662338
65  0.79870130
66  0.70129870
67  0.77922078
68  0.70129870
69  0.62987013
70  0.57142857
71  0.72727273
72  0.61688312
73  0.80519481
74  0.77922078
75  0.49350649
76  0.38311688
77  0.62987013
78  0.55844156
79  0.45454545
80  0.61038961
81  0.64935065
82  0.82467532
83  0.57792208
84  0.85714286
85  0.33766234
86  0.33116883
87  0.55194805
88  0.44805195
89  0.64285714
90  0.39610390
91  0.42857143
92  0.26623377
93  0.32467532
94  0.25324675
95  0.24675325
96  0.39610390
97  0.12337662
98  0.15584416
99  0.07792208
100 0.07792208
101 0.07142857

$covariate
      B_CL2_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP B_PLNT_PRES_OP
2   1.000000000 0.27272727 0.63888889 0.00000000 0.61538462      0.5000000
3   0.996138996 0.27272727 0.33333333 0.00000000 0.61538462      0.5714286
4   0.988416988 0.31818182 0.52777778 0.04545455 0.69230769      0.5714286
5   0.984555985 0.36363636 0.50000000 0.04545455 0.61538462      0.5000000
6   0.984555985 0.36363636 0.55555556 0.04545455 0.69230769      0.5714286
7   0.949806950 0.40909091 0.22222222 0.09090909 0.69230769      0.6428571
8   0.972972973 0.40909091 0.41666667 0.13636364 0.69230769      0.5714286
9   0.969111969 0.45454545 0.22222222 0.22727273 0.76923077      0.7142857
10  0.961389961 0.45454545 0.41666667 0.22727273 0.69230769      0.5714286
11  0.965250965 0.45454545 0.25000000 0.27272727 0.53846154      0.5000000
12  0.949806950 0.45454545 0.38888889 0.27272727 0.46153846      0.5000000
13  0.961389961 0.50000000 0.11111111 0.36363636 0.46153846      0.5000000
14  0.961389961 0.45454545 0.36111111 0.36363636 0.46153846      0.5000000
15  0.961389961 0.50000000 0.16666667 0.45454545 0.46153846      0.5000000
16  0.961389961 0.45454545 0.36111111 0.36363636 0.38461538      0.5000000
17  0.976833977 0.45454545 0.47222222 0.45454545 0.38461538      0.5000000
18  0.980694981 0.36363636 0.55555556 0.36363636 0.38461538      0.5000000
19  0.980694981 0.36363636 0.47222222 0.45454545 0.30769231      0.5000000
20  0.980694981 0.40909091 0.50000000 0.40909091 0.30769231      0.5714286
21  0.972972973 0.40909091 0.52777778 0.45454545 0.23076923      0.5000000
22  0.976833977 0.45454545 0.44444444 0.36363636 0.23076923      0.5000000
23  0.980694981 0.50000000 0.58333333 0.45454545 0.61538462      0.5714286
24  0.976833977 0.50000000 0.50000000 0.40909091 0.61538462      0.5714286
25  0.969111969 0.54545455 0.55555556 0.40909091 0.53846154      0.5000000
26  0.969111969 0.59090909 0.50000000 0.40909091 0.53846154      0.5000000
27  0.965250965 0.63636364 0.47222222 0.36363636 0.53846154      0.5000000
28  0.961389961 0.63636364 0.47222222 0.50000000 0.53846154      0.5000000
29  0.961389961 0.72727273 0.47222222 0.40909091 0.46153846      0.5000000
30  0.961389961 0.72727273 0.55555556 0.45454545 0.46153846      0.4285714
31  0.961389961 0.72727273 0.36111111 0.40909091 0.46153846      0.4285714
32  0.953667954 0.68181818 0.58333333 0.40909091 0.53846154      0.5000000
33  0.957528958 0.72727273 0.41666667 0.45454545 0.53846154      0.5000000
34  0.667953668 0.68181818 0.61111111 0.31818182 0.53846154      0.5000000
35  0.019305019 0.72727273 0.66666667 0.36363636 0.53846154      0.5000000
36  0.015444015 0.72727273 0.50000000 0.31818182 0.53846154      0.5000000
37  0.030888031 0.72727273 0.52777778 0.36363636 0.53846154      0.5000000
38  0.023166023 0.77272727 0.33333333 0.36363636 0.53846154      0.5000000
39  0.003861004 0.77272727 0.63888889 0.27272727 0.46153846      0.5000000
40  0.023166023 0.81818182 0.50000000 0.31818182 0.53846154      0.5000000
41  0.000000000 0.81818182 0.50000000 0.27272727 0.53846154      0.5714286
42  0.019305019 0.81818182 0.55555556 0.27272727 0.61538462      0.5714286
43  0.023166023 0.86363636 0.58333333 0.22727273 0.53846154      0.5714286
44  0.023166023 0.90909091 0.63888889 0.27272727 0.46153846      0.5714286
45  0.023166023 0.90909091 0.58333333 0.22727273 0.46153846      0.5714286
46  0.023166023 0.95454545 0.69444444 0.22727273 0.38461538      0.5000000
47  0.019305019 0.95454545 0.47222222 0.27272727 0.23076923      0.4285714
48  0.023166023 1.00000000 0.55555556 0.22727273 0.15384615      0.4285714
49  0.023166023 0.95454545 0.61111111 0.27272727 0.15384615      0.4285714
50  0.023166023 1.00000000 0.50000000 0.22727273 0.15384615      0.4285714
51  0.023166023 0.95454545 0.66666667 0.27272727 0.15384615      0.4285714
52  0.019305019 0.95454545 0.58333333 0.27272727 0.15384615      0.4285714
53  0.023166023 0.90909091 0.83333333 0.18181818 0.00000000      0.4285714
54  0.023166023 0.81818182 0.61111111 0.18181818 0.00000000      0.4285714
55  0.019305019 0.72727273 0.88888889 0.09090909 0.15384615      0.5000000
56  0.019305019 0.68181818 0.63888889 0.13636364 0.07692308      0.4285714
57  0.023166023 0.63636364 0.83333333 0.09090909 0.30769231      0.5000000
58  0.023166023 0.63636364 0.77777778 0.18181818 0.53846154      0.5714286
59  0.019305019 0.59090909 0.83333333 0.09090909 0.69230769      0.6428571
60  0.023166023 0.63636364 0.75000000 0.18181818 0.84615385      0.7142857
61  0.023166023 0.63636364 0.72222222 0.13636364 0.84615385      0.6428571
62  0.019305019 0.63636364 0.75000000 0.18181818 0.76923077      0.6428571
63  0.023166023 0.59090909 0.69444444 0.09090909 0.69230769      0.6428571
64  0.023166023 0.54545455 0.86111111 0.13636364 0.69230769      0.5714286
65  0.023166023 0.50000000 0.69444444 0.04545455 0.53846154      0.5000000
66  0.019305019 0.50000000 0.80555556 0.13636364 0.46153846      0.4285714
67  0.023166023 0.45454545 0.80555556 0.13636364 0.53846154      0.4285714
68  0.023166023 0.45454545 0.88888889 0.13636364 0.53846154      0.5000000
69  0.023166023 0.40909091 0.77777778 0.09090909 0.61538462      0.5000000
70  0.023166023 0.40909091 0.94444444 0.09090909 0.61538462      0.5000000
71  0.023166023 0.40909091 0.77777778 0.09090909 0.69230769      0.5714286
72  0.027027027 0.36363636 1.00000000 0.09090909 0.46153846      0.3571429
73  0.027027027 0.36363636 0.66666667 0.09090909 0.69230769      0.5714286
74  0.027027027 0.36363636 0.94444444 0.09090909 1.00000000      1.0000000
75  0.027027027 0.40909091 0.72222222 0.18181818 0.76923077      0.7857143
76  0.027027027 0.40909091 0.94444444 0.09090909 0.76923077      0.7142857
77  0.027027027 0.40909091 0.75000000 0.18181818 0.69230769      0.6428571
78  0.027027027 0.45454545 0.83333333 0.09090909 0.53846154      0.4285714
79  0.027027027 0.45454545 0.69444444 0.22727273 0.23076923      0.0000000
80  0.027027027 0.40909091 0.80555556 0.18181818 0.53846154      0.5000000
81  0.030888031 0.45454545 0.72222222 0.31818182 0.53846154      0.5000000
82  0.027027027 0.45454545 0.69444444 0.31818182 0.53846154      0.5000000
83  0.027027027 0.45454545 0.66666667 0.45454545 0.53846154      0.5000000
84  0.023166023 0.45454545 0.52777778 0.40909091 0.46153846      0.5000000
85  0.011583012 0.45454545 0.58333333 0.50000000 0.38461538      0.5000000
86  0.023166023 0.40909091 0.47222222 0.54545455 0.38461538      0.5000000
87  0.030888031 0.31818182 0.72222222 0.59090909 0.30769231      0.5000000
88  0.030888031 0.22727273 0.33333333 0.72727273 0.23076923      0.4285714
89  0.034749035 0.18181818 0.38888889 0.68181818 0.15384615      0.4285714
90  0.034749035 0.18181818 0.44444444 0.77272727 0.15384615      0.5000000
91  0.034749035 0.18181818 0.33333333 0.77272727 0.15384615      0.5714286
92  0.034749035 0.13636364 0.38888889 0.81818182 0.15384615      0.5000000
93  0.034749035 0.09090909 0.22222222 0.81818182 0.53846154      0.5714286
94  0.034749035 0.00000000 0.16666667 0.81818182 0.61538462      0.5714286
95  0.034749035 0.00000000 0.27777778 0.95454545 0.61538462      0.5714286
96  0.034749035 0.04545455 0.19444444 1.00000000 0.53846154      0.5714286
97  0.034749035 0.04545455 0.30555556 0.95454545 0.53846154      0.5714286
98  0.030888031 0.00000000 0.27777778 0.95454545 0.53846154      0.5714286
99  0.030888031 0.00000000 0.00000000 0.95454545 0.53846154      0.5714286
100 0.027027027 0.00000000 0.05555556 0.86363636 0.53846154      0.5000000
101 0.023166023 0.00000000 0.25000000 0.90909091 0.53846154      0.5000000
    B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL  past_data
2      0.93333333     0.194148936      0.4545455    0.284403670 0.17532468
3      0.93333333     0.199468085      0.3636364    0.284403670 0.16233766
4      0.93333333     0.242021277      0.3636364    0.284403670 0.34415584
5      0.86666667     0.260638298      0.3636364    0.284403670 0.24675325
6      0.86666667     0.289893617      0.3636364    0.238532110 0.29220779
7      0.86666667     0.276595745      0.3636364    0.220183486 0.22077922
8      0.86666667     0.303191489      0.3636364    0.201834862 0.22077922
9      0.80000000     0.348404255      0.2727273    0.174311927 0.12987013
10     0.80000000     0.345744681      0.3636364    0.155963303 0.12987013
11     0.80000000     0.377659574      0.3636364    0.137614679 0.16883117
12     0.80000000     0.375000000      0.4545455    0.100917431 0.18831169
13     0.80000000     0.396276596      0.4545455    0.082568807 0.29870130
14     0.80000000     0.375000000      0.4545455    0.064220183 0.52597403
15     0.73333333     0.375000000      0.4545455    0.045871560 0.50649351
16     0.73333333     0.359042553      0.4545455    0.045871560 0.51948052
17     0.73333333     0.351063830      0.4545455    0.036697248 0.31818182
18     0.73333333     0.327127660      0.4545455    0.018348624 0.43506494
19     0.73333333     0.324468085      0.3636364    0.009174312 0.51298701
20     0.66666667     0.321808511      0.4545455    0.009174312 0.50000000
21     0.66666667     0.297872340      0.3636364    0.009174312 0.44805195
22     0.60000000     0.279255319      0.4545455    0.018348624 0.43506494
23     0.60000000     0.265957447      0.3636364    0.000000000 0.33116883
24     0.53333333     0.247340426      0.3636364    0.000000000 0.19480519
25     0.53333333     0.234042553      0.4545455    0.009174312 0.25324675
26     0.53333333     0.228723404      0.4545455    0.009174312 0.06493506
27     0.46666667     0.228723404      0.4545455    0.027522936 0.22077922
28     0.46666667     0.228723404      0.3636364    0.045871560 0.10389610
29     0.46666667     0.223404255      0.3636364    0.064220183 0.05194805
30     0.40000000     0.226063830      0.4545455    0.082568807 0.30519481
31     0.40000000     0.204787234      0.4545455    0.064220183 0.00000000
32     0.40000000     1.000000000      0.3636364    0.357798165 0.16233766
33     0.33333333     0.319148936      0.4545455    0.568807339 0.18181818
34     0.33333333     0.194148936      0.4545455    0.568807339 0.14285714
35     0.33333333     0.175531915      0.4545455    0.596330275 0.46753247
36     0.33333333     0.172872340      0.3636364    0.605504587 0.47402597
37     0.33333333     0.170212766      0.3636364    0.605504587 0.61038961
38     0.33333333     0.170212766      0.4545455    0.577981651 0.42207792
39     0.33333333     0.164893617      0.4545455    0.577981651 0.53896104
40     0.33333333     0.175531915      0.3636364    0.605504587 0.48051948
41     0.33333333     0.180851064      0.3636364    0.642201835 0.57792208
42     0.33333333     0.196808511      0.3636364    0.669724771 0.74025974
43     0.33333333     0.215425532      0.3636364    0.724770642 0.60389610
44     0.33333333     0.231382979      0.3636364    0.770642202 0.56493506
45     0.33333333     0.226063830      0.4545455    0.752293578 0.37012987
46     0.33333333     0.207446809      0.5454545    0.770642202 0.62337662
47     0.33333333     0.204787234      0.4545455    0.770642202 0.53246753
48     0.40000000     0.156914894      0.5454545    0.761467890 0.34415584
49     0.40000000     0.167553191      0.5454545    0.779816514 0.50000000
50     0.40000000     0.223404255      0.5454545    0.807339450 0.21428571
51     0.40000000     0.228723404      0.5454545    0.798165138 0.28571429
52     0.40000000     0.215425532      0.5454545    0.798165138 0.25324675
53     0.46666667     0.114361702      0.5454545    0.779816514 0.38311688
54     0.46666667     0.186170213      0.5454545    0.798165138 0.37012987
55     0.40000000     0.202127660      0.5454545    0.816513761 0.48051948
56     0.33333333     0.172872340      0.5454545    0.798165138 0.77272727
57     0.26666667     0.164893617      0.5454545    0.779816514 0.70129870
58     0.26666667     0.170212766      0.4545455    0.779816514 0.79870130
59     0.26666667     0.207446809      0.3636364    0.816513761 0.91558442
60     0.26666667     0.202127660      0.2727273    0.816513761 1.00000000
61     0.26666667     0.196808511      0.3636364    0.844036697 0.82467532
62     0.26666667     0.191489362      0.3636364    0.853211009 0.85714286
63     0.26666667     0.148936170      0.3636364    0.844036697 0.72727273
64     0.26666667     0.204787234      0.3636364    0.862385321 0.80519481
65     0.26666667     0.220744681      0.4545455    0.853211009 0.87662338
66     0.20000000     0.226063830      0.5454545    0.871559633 0.79870130
67     0.13333333     0.130319149      0.4545455    0.871559633 0.70129870
68     0.13333333     0.090425532      0.4545455    0.889908257 0.77922078
69     0.06666667     0.061170213      0.4545455    0.899082569 0.70129870
70     0.06666667     0.050531915      0.4545455    0.899082569 0.62987013
71     0.06666667     0.029255319      0.4545455    0.908256881 0.57142857
72     0.00000000     0.023936170      0.6363636    0.917431193 0.72727273
73     0.00000000     0.042553191      0.4545455    0.944954128 0.61688312
74     0.00000000     0.039893617      0.0000000    0.954128440 0.80519481
75     0.00000000     0.026595745      0.1818182    0.963302752 0.77922078
76     0.00000000     0.007978723      0.2727273    0.963302752 0.49350649
77     0.00000000     0.010638298      0.3636364    0.981651376 0.38311688
78     0.00000000     0.021276596      0.5454545    1.000000000 0.62987013
79     0.00000000     0.082446809      1.0000000    0.972477064 0.55844156
80     0.00000000     0.023936170      0.5454545    0.972477064 0.45454545
81     0.00000000     0.000000000      0.4545455    0.972477064 0.61038961
82     0.06666667     0.029255319      0.4545455    0.972477064 0.64935065
83     0.06666667     0.042553191      0.4545455    0.944954128 0.82467532
84     0.06666667     0.055851064      0.5454545    0.935779817 0.57792208
85     0.06666667     0.045212766      0.4545455    0.926605505 0.85714286
86     0.06666667     0.058510638      0.4545455    0.935779817 0.33766234
87     0.06666667     0.087765957      0.4545455    0.926605505 0.33116883
88     0.06666667     0.069148936      0.5454545    0.926605505 0.55194805
89     0.06666667     0.085106383      0.5454545    0.917431193 0.44805195
90     0.06666667     0.119680851      0.5454545    0.889908257 0.64285714
91     0.06666667     0.162234043      0.4545455    0.889908257 0.39610390
92     0.06666667     0.156914894      0.4545455    0.889908257 0.42857143
93     0.06666667     0.159574468      0.4545455    0.880733945 0.26623377
94     0.13333333     0.135638298      0.4545455    0.871559633 0.32467532
95     0.13333333     0.180851064      0.4545455    0.889908257 0.25324675
96     0.13333333     0.188829787      0.4545455    0.880733945 0.24675325
97     0.20000000     0.098404255      0.4545455    0.871559633 0.39610390
98     0.13333333     0.159574468      0.5454545    0.862385321 0.12337662
99     0.13333333     0.154255319      0.4545455    0.862385321 0.15584416
100    0.13333333     0.188829787      0.4545455    0.853211009 0.07792208
101    0.13333333     0.223404255      0.4545455    0.844036697 0.07792208

$model.list
$model.list$response
[1] "B_TURB_VAL"

$model.list$variables
 [1] "B_CL2_VAL"       "B_PH_VAL"        "B_COND_VAL"      "B_TEMP_VAL"     
 [5] "B_PRES_OP"       "B_PLNT_PRES_OP"  "B_PLNT_PH_VAL"   "B_PLNT_TURB_VAL"
 [9] "B_PLNT_FLOW_OP"  "B_PLNT_CL2_VAL"  "past_data"      


$err.fct
function (x, y) 
{
    1/2 * (y - x)^2
}
<bytecode: 0x7fd6aa25d4a8>
<environment: 0x7fd6abf02c58>
attr(,"type")
[1] "sse"

$act.fct
function (x) 
{
    1/(1 + exp(-x))
}
<bytecode: 0x7fd6aa25ca88>
<environment: 0x7fd6abf030f0>
attr(,"type")
[1] "logistic"

$linear.output
[1] TRUE

$data
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.00000000 0.61538462
3   0.996138996 0.34415584 0.27272727 0.33333333 0.00000000 0.61538462
4   0.988416988 0.24675325 0.31818182 0.52777778 0.04545455 0.69230769
5   0.984555985 0.29220779 0.36363636 0.50000000 0.04545455 0.61538462
6   0.984555985 0.22077922 0.36363636 0.55555556 0.04545455 0.69230769
7   0.949806950 0.22077922 0.40909091 0.22222222 0.09090909 0.69230769
8   0.972972973 0.12987013 0.40909091 0.41666667 0.13636364 0.69230769
9   0.969111969 0.12987013 0.45454545 0.22222222 0.22727273 0.76923077
10  0.961389961 0.16883117 0.45454545 0.41666667 0.22727273 0.69230769
11  0.965250965 0.18831169 0.45454545 0.25000000 0.27272727 0.53846154
12  0.949806950 0.29870130 0.45454545 0.38888889 0.27272727 0.46153846
13  0.961389961 0.52597403 0.50000000 0.11111111 0.36363636 0.46153846
14  0.961389961 0.50649351 0.45454545 0.36111111 0.36363636 0.46153846
15  0.961389961 0.51948052 0.50000000 0.16666667 0.45454545 0.46153846
16  0.961389961 0.31818182 0.45454545 0.36111111 0.36363636 0.38461538
17  0.976833977 0.43506494 0.45454545 0.47222222 0.45454545 0.38461538
18  0.980694981 0.51298701 0.36363636 0.55555556 0.36363636 0.38461538
19  0.980694981 0.50000000 0.36363636 0.47222222 0.45454545 0.30769231
20  0.980694981 0.44805195 0.40909091 0.50000000 0.40909091 0.30769231
21  0.972972973 0.43506494 0.40909091 0.52777778 0.45454545 0.23076923
22  0.976833977 0.33116883 0.45454545 0.44444444 0.36363636 0.23076923
23  0.980694981 0.19480519 0.50000000 0.58333333 0.45454545 0.61538462
24  0.976833977 0.25324675 0.50000000 0.50000000 0.40909091 0.61538462
25  0.969111969 0.06493506 0.54545455 0.55555556 0.40909091 0.53846154
26  0.969111969 0.22077922 0.59090909 0.50000000 0.40909091 0.53846154
27  0.965250965 0.10389610 0.63636364 0.47222222 0.36363636 0.53846154
28  0.961389961 0.05194805 0.63636364 0.47222222 0.50000000 0.53846154
29  0.961389961 0.30519481 0.72727273 0.47222222 0.40909091 0.46153846
30  0.961389961 0.00000000 0.72727273 0.55555556 0.45454545 0.46153846
31  0.961389961 0.16233766 0.72727273 0.36111111 0.40909091 0.46153846
32  0.953667954 0.18181818 0.68181818 0.58333333 0.40909091 0.53846154
33  0.957528958 0.14285714 0.72727273 0.41666667 0.45454545 0.53846154
34  0.667953668 0.46753247 0.68181818 0.61111111 0.31818182 0.53846154
35  0.019305019 0.47402597 0.72727273 0.66666667 0.36363636 0.53846154
36  0.015444015 0.61038961 0.72727273 0.50000000 0.31818182 0.53846154
37  0.030888031 0.42207792 0.72727273 0.52777778 0.36363636 0.53846154
38  0.023166023 0.53896104 0.77272727 0.33333333 0.36363636 0.53846154
39  0.003861004 0.48051948 0.77272727 0.63888889 0.27272727 0.46153846
40  0.023166023 0.57792208 0.81818182 0.50000000 0.31818182 0.53846154
41  0.000000000 0.74025974 0.81818182 0.50000000 0.27272727 0.53846154
42  0.019305019 0.60389610 0.81818182 0.55555556 0.27272727 0.61538462
43  0.023166023 0.56493506 0.86363636 0.58333333 0.22727273 0.53846154
44  0.023166023 0.37012987 0.90909091 0.63888889 0.27272727 0.46153846
45  0.023166023 0.62337662 0.90909091 0.58333333 0.22727273 0.46153846
46  0.023166023 0.53246753 0.95454545 0.69444444 0.22727273 0.38461538
47  0.019305019 0.34415584 0.95454545 0.47222222 0.27272727 0.23076923
48  0.023166023 0.50000000 1.00000000 0.55555556 0.22727273 0.15384615
49  0.023166023 0.21428571 0.95454545 0.61111111 0.27272727 0.15384615
50  0.023166023 0.28571429 1.00000000 0.50000000 0.22727273 0.15384615
51  0.023166023 0.25324675 0.95454545 0.66666667 0.27272727 0.15384615
52  0.019305019 0.38311688 0.95454545 0.58333333 0.27272727 0.15384615
53  0.023166023 0.37012987 0.90909091 0.83333333 0.18181818 0.00000000
54  0.023166023 0.48051948 0.81818182 0.61111111 0.18181818 0.00000000
55  0.019305019 0.77272727 0.72727273 0.88888889 0.09090909 0.15384615
56  0.019305019 0.70129870 0.68181818 0.63888889 0.13636364 0.07692308
57  0.023166023 0.79870130 0.63636364 0.83333333 0.09090909 0.30769231
58  0.023166023 0.91558442 0.63636364 0.77777778 0.18181818 0.53846154
59  0.019305019 1.00000000 0.59090909 0.83333333 0.09090909 0.69230769
60  0.023166023 0.82467532 0.63636364 0.75000000 0.18181818 0.84615385
61  0.023166023 0.85714286 0.63636364 0.72222222 0.13636364 0.84615385
62  0.019305019 0.72727273 0.63636364 0.75000000 0.18181818 0.76923077
63  0.023166023 0.80519481 0.59090909 0.69444444 0.09090909 0.69230769
64  0.023166023 0.87662338 0.54545455 0.86111111 0.13636364 0.69230769
65  0.023166023 0.79870130 0.50000000 0.69444444 0.04545455 0.53846154
66  0.019305019 0.70129870 0.50000000 0.80555556 0.13636364 0.46153846
67  0.023166023 0.77922078 0.45454545 0.80555556 0.13636364 0.53846154
68  0.023166023 0.70129870 0.45454545 0.88888889 0.13636364 0.53846154
69  0.023166023 0.62987013 0.40909091 0.77777778 0.09090909 0.61538462
70  0.023166023 0.57142857 0.40909091 0.94444444 0.09090909 0.61538462
71  0.023166023 0.72727273 0.40909091 0.77777778 0.09090909 0.69230769
72  0.027027027 0.61688312 0.36363636 1.00000000 0.09090909 0.46153846
73  0.027027027 0.80519481 0.36363636 0.66666667 0.09090909 0.69230769
74  0.027027027 0.77922078 0.36363636 0.94444444 0.09090909 1.00000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.18181818 0.76923077
76  0.027027027 0.38311688 0.40909091 0.94444444 0.09090909 0.76923077
77  0.027027027 0.62987013 0.40909091 0.75000000 0.18181818 0.69230769
78  0.027027027 0.55844156 0.45454545 0.83333333 0.09090909 0.53846154
79  0.027027027 0.45454545 0.45454545 0.69444444 0.22727273 0.23076923
80  0.027027027 0.61038961 0.40909091 0.80555556 0.18181818 0.53846154
81  0.030888031 0.64935065 0.45454545 0.72222222 0.31818182 0.53846154
82  0.027027027 0.82467532 0.45454545 0.69444444 0.31818182 0.53846154
83  0.027027027 0.57792208 0.45454545 0.66666667 0.45454545 0.53846154
84  0.023166023 0.85714286 0.45454545 0.52777778 0.40909091 0.46153846
85  0.011583012 0.33766234 0.45454545 0.58333333 0.50000000 0.38461538
86  0.023166023 0.33116883 0.40909091 0.47222222 0.54545455 0.38461538
87  0.030888031 0.55194805 0.31818182 0.72222222 0.59090909 0.30769231
88  0.030888031 0.44805195 0.22727273 0.33333333 0.72727273 0.23076923
89  0.034749035 0.64285714 0.18181818 0.38888889 0.68181818 0.15384615
90  0.034749035 0.39610390 0.18181818 0.44444444 0.77272727 0.15384615
91  0.034749035 0.42857143 0.18181818 0.33333333 0.77272727 0.15384615
92  0.034749035 0.26623377 0.13636364 0.38888889 0.81818182 0.15384615
93  0.034749035 0.32467532 0.09090909 0.22222222 0.81818182 0.53846154
94  0.034749035 0.25324675 0.00000000 0.16666667 0.81818182 0.61538462
95  0.034749035 0.24675325 0.00000000 0.27777778 0.95454545 0.61538462
96  0.034749035 0.39610390 0.04545455 0.19444444 1.00000000 0.53846154
97  0.034749035 0.12337662 0.04545455 0.30555556 0.95454545 0.53846154
98  0.030888031 0.15584416 0.00000000 0.27777778 0.95454545 0.53846154
99  0.030888031 0.07792208 0.00000000 0.00000000 0.95454545 0.53846154
100 0.027027027 0.07792208 0.00000000 0.05555556 0.86363636 0.53846154
101 0.023166023 0.07142857 0.00000000 0.25000000 0.90909091 0.53846154
    B_PLNT_PRES_OP B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL
2        0.5000000    0.93333333     0.194148936      0.4545455    0.284403670
3        0.5714286    0.93333333     0.199468085      0.3636364    0.284403670
4        0.5714286    0.93333333     0.242021277      0.3636364    0.284403670
5        0.5000000    0.86666667     0.260638298      0.3636364    0.284403670
6        0.5714286    0.86666667     0.289893617      0.3636364    0.238532110
7        0.6428571    0.86666667     0.276595745      0.3636364    0.220183486
8        0.5714286    0.86666667     0.303191489      0.3636364    0.201834862
9        0.7142857    0.80000000     0.348404255      0.2727273    0.174311927
10       0.5714286    0.80000000     0.345744681      0.3636364    0.155963303
11       0.5000000    0.80000000     0.377659574      0.3636364    0.137614679
12       0.5000000    0.80000000     0.375000000      0.4545455    0.100917431
13       0.5000000    0.80000000     0.396276596      0.4545455    0.082568807
14       0.5000000    0.80000000     0.375000000      0.4545455    0.064220183
15       0.5000000    0.73333333     0.375000000      0.4545455    0.045871560
16       0.5000000    0.73333333     0.359042553      0.4545455    0.045871560
17       0.5000000    0.73333333     0.351063830      0.4545455    0.036697248
18       0.5000000    0.73333333     0.327127660      0.4545455    0.018348624
19       0.5000000    0.73333333     0.324468085      0.3636364    0.009174312
20       0.5714286    0.66666667     0.321808511      0.4545455    0.009174312
21       0.5000000    0.66666667     0.297872340      0.3636364    0.009174312
22       0.5000000    0.60000000     0.279255319      0.4545455    0.018348624
23       0.5714286    0.60000000     0.265957447      0.3636364    0.000000000
24       0.5714286    0.53333333     0.247340426      0.3636364    0.000000000
25       0.5000000    0.53333333     0.234042553      0.4545455    0.009174312
26       0.5000000    0.53333333     0.228723404      0.4545455    0.009174312
27       0.5000000    0.46666667     0.228723404      0.4545455    0.027522936
28       0.5000000    0.46666667     0.228723404      0.3636364    0.045871560
29       0.5000000    0.46666667     0.223404255      0.3636364    0.064220183
30       0.4285714    0.40000000     0.226063830      0.4545455    0.082568807
31       0.4285714    0.40000000     0.204787234      0.4545455    0.064220183
32       0.5000000    0.40000000     1.000000000      0.3636364    0.357798165
33       0.5000000    0.33333333     0.319148936      0.4545455    0.568807339
34       0.5000000    0.33333333     0.194148936      0.4545455    0.568807339
35       0.5000000    0.33333333     0.175531915      0.4545455    0.596330275
36       0.5000000    0.33333333     0.172872340      0.3636364    0.605504587
37       0.5000000    0.33333333     0.170212766      0.3636364    0.605504587
38       0.5000000    0.33333333     0.170212766      0.4545455    0.577981651
39       0.5000000    0.33333333     0.164893617      0.4545455    0.577981651
40       0.5000000    0.33333333     0.175531915      0.3636364    0.605504587
41       0.5714286    0.33333333     0.180851064      0.3636364    0.642201835
42       0.5714286    0.33333333     0.196808511      0.3636364    0.669724771
43       0.5714286    0.33333333     0.215425532      0.3636364    0.724770642
44       0.5714286    0.33333333     0.231382979      0.3636364    0.770642202
45       0.5714286    0.33333333     0.226063830      0.4545455    0.752293578
46       0.5000000    0.33333333     0.207446809      0.5454545    0.770642202
47       0.4285714    0.33333333     0.204787234      0.4545455    0.770642202
48       0.4285714    0.40000000     0.156914894      0.5454545    0.761467890
49       0.4285714    0.40000000     0.167553191      0.5454545    0.779816514
50       0.4285714    0.40000000     0.223404255      0.5454545    0.807339450
51       0.4285714    0.40000000     0.228723404      0.5454545    0.798165138
52       0.4285714    0.40000000     0.215425532      0.5454545    0.798165138
53       0.4285714    0.46666667     0.114361702      0.5454545    0.779816514
54       0.4285714    0.46666667     0.186170213      0.5454545    0.798165138
55       0.5000000    0.40000000     0.202127660      0.5454545    0.816513761
56       0.4285714    0.33333333     0.172872340      0.5454545    0.798165138
57       0.5000000    0.26666667     0.164893617      0.5454545    0.779816514
58       0.5714286    0.26666667     0.170212766      0.4545455    0.779816514
59       0.6428571    0.26666667     0.207446809      0.3636364    0.816513761
60       0.7142857    0.26666667     0.202127660      0.2727273    0.816513761
61       0.6428571    0.26666667     0.196808511      0.3636364    0.844036697
62       0.6428571    0.26666667     0.191489362      0.3636364    0.853211009
63       0.6428571    0.26666667     0.148936170      0.3636364    0.844036697
64       0.5714286    0.26666667     0.204787234      0.3636364    0.862385321
65       0.5000000    0.26666667     0.220744681      0.4545455    0.853211009
66       0.4285714    0.20000000     0.226063830      0.5454545    0.871559633
67       0.4285714    0.13333333     0.130319149      0.4545455    0.871559633
68       0.5000000    0.13333333     0.090425532      0.4545455    0.889908257
69       0.5000000    0.06666667     0.061170213      0.4545455    0.899082569
70       0.5000000    0.06666667     0.050531915      0.4545455    0.899082569
71       0.5714286    0.06666667     0.029255319      0.4545455    0.908256881
72       0.3571429    0.00000000     0.023936170      0.6363636    0.917431193
73       0.5714286    0.00000000     0.042553191      0.4545455    0.944954128
74       1.0000000    0.00000000     0.039893617      0.0000000    0.954128440
75       0.7857143    0.00000000     0.026595745      0.1818182    0.963302752
76       0.7142857    0.00000000     0.007978723      0.2727273    0.963302752
77       0.6428571    0.00000000     0.010638298      0.3636364    0.981651376
78       0.4285714    0.00000000     0.021276596      0.5454545    1.000000000
79       0.0000000    0.00000000     0.082446809      1.0000000    0.972477064
80       0.5000000    0.00000000     0.023936170      0.5454545    0.972477064
81       0.5000000    0.00000000     0.000000000      0.4545455    0.972477064
82       0.5000000    0.06666667     0.029255319      0.4545455    0.972477064
83       0.5000000    0.06666667     0.042553191      0.4545455    0.944954128
84       0.5000000    0.06666667     0.055851064      0.5454545    0.935779817
85       0.5000000    0.06666667     0.045212766      0.4545455    0.926605505
86       0.5000000    0.06666667     0.058510638      0.4545455    0.935779817
87       0.5000000    0.06666667     0.087765957      0.4545455    0.926605505
88       0.4285714    0.06666667     0.069148936      0.5454545    0.926605505
89       0.4285714    0.06666667     0.085106383      0.5454545    0.917431193
90       0.5000000    0.06666667     0.119680851      0.5454545    0.889908257
91       0.5714286    0.06666667     0.162234043      0.4545455    0.889908257
92       0.5000000    0.06666667     0.156914894      0.4545455    0.889908257
93       0.5714286    0.06666667     0.159574468      0.4545455    0.880733945
94       0.5714286    0.13333333     0.135638298      0.4545455    0.871559633
95       0.5714286    0.13333333     0.180851064      0.4545455    0.889908257
96       0.5714286    0.13333333     0.188829787      0.4545455    0.880733945
97       0.5714286    0.20000000     0.098404255      0.4545455    0.871559633
98       0.5714286    0.13333333     0.159574468      0.5454545    0.862385321
99       0.5714286    0.13333333     0.154255319      0.4545455    0.862385321
100      0.5000000    0.13333333     0.188829787      0.4545455    0.853211009
101      0.5000000    0.13333333     0.223404255      0.4545455    0.844036697
     past_data
2   0.17532468
3   0.16233766
4   0.34415584
5   0.24675325
6   0.29220779
7   0.22077922
8   0.22077922
9   0.12987013
10  0.12987013
11  0.16883117
12  0.18831169
13  0.29870130
14  0.52597403
15  0.50649351
16  0.51948052
17  0.31818182
18  0.43506494
19  0.51298701
20  0.50000000
21  0.44805195
22  0.43506494
23  0.33116883
24  0.19480519
25  0.25324675
26  0.06493506
27  0.22077922
28  0.10389610
29  0.05194805
30  0.30519481
31  0.00000000
32  0.16233766
33  0.18181818
34  0.14285714
35  0.46753247
36  0.47402597
37  0.61038961
38  0.42207792
39  0.53896104
40  0.48051948
41  0.57792208
42  0.74025974
43  0.60389610
44  0.56493506
45  0.37012987
46  0.62337662
47  0.53246753
48  0.34415584
49  0.50000000
50  0.21428571
51  0.28571429
52  0.25324675
53  0.38311688
54  0.37012987
55  0.48051948
56  0.77272727
57  0.70129870
58  0.79870130
59  0.91558442
60  1.00000000
61  0.82467532
62  0.85714286
63  0.72727273
64  0.80519481
65  0.87662338
66  0.79870130
67  0.70129870
68  0.77922078
69  0.70129870
70  0.62987013
71  0.57142857
72  0.72727273
73  0.61688312
74  0.80519481
75  0.77922078
76  0.49350649
77  0.38311688
78  0.62987013
79  0.55844156
80  0.45454545
81  0.61038961
82  0.64935065
83  0.82467532
84  0.57792208
85  0.85714286
86  0.33766234
87  0.33116883
88  0.55194805
89  0.44805195
90  0.64285714
91  0.39610390
92  0.42857143
93  0.26623377
94  0.32467532
95  0.25324675
96  0.24675325
97  0.39610390
98  0.12337662
99  0.15584416
100 0.07792208
101 0.07792208

$exclude
NULL

$net.result
$net.result[[1]]
         [,1]
2   0.2422276
3   0.2621796
4   0.3168339
5   0.2502557
6   0.3187190
7   0.3308687
8   0.2622602
9   0.2477339
10  0.2132767
11  0.2164769
12  0.2687006
13  0.3055690
14  0.4227404
15  0.3927965
16  0.4445479
17  0.2735928
18  0.3886358
19  0.3671993
20  0.4697362
21  0.3347069
22  0.4146286
23  0.2544045
24  0.2232763
25  0.2409017
26  0.1607446
27  0.2410759
28  0.1246642
29  0.1241293
30  0.1968319
31  0.1170239
32  0.2473571
33  0.1120416
34  0.1668139
35  0.4860747
36  0.4842637
37  0.5350382
38  0.4828207
39  0.5891735
40  0.4670048
41  0.5922729
42  0.6603073
43  0.5876832
44  0.5242286
45  0.4811934
46  0.6105759
47  0.4855822
48  0.4034514
49  0.4753291
50  0.3367613
51  0.3540060
52  0.3404702
53  0.4308578
54  0.4771638
55  0.6235855
56  0.7633038
57  0.7663501
58  0.7598261
59  0.8303347
60  0.8193252
61  0.7545498
62  0.7544845
63  0.7409047
64  0.7273831
65  0.8266788
66  0.7687891
67  0.6732397
68  0.7297887
69  0.7204800
70  0.6671065
71  0.6717113
72  0.7326109
73  0.7159263
74  0.7940368
75  0.7349839
76  0.5966235
77  0.5013456
78  0.6457640
79  0.5557521
80  0.5617440
81  0.5325407
82  0.5546510
83  0.6052316
84  0.5529959
85  0.6396569
86  0.3233219
87  0.3121407
88  0.4244003
89  0.4061568
90  0.5370526
91  0.4117314
92  0.3673263
93  0.2997308
94  0.3276590
95  0.2306376
96  0.2203466
97  0.2715022
98  0.2147212
99  0.2157081
100 0.1920610
101 0.1751694


$weights
$weights[[1]]
$weights[[1]][[1]]
            [,1]
 [1,]  0.4437539
 [2,]  1.4219423
 [3,]  0.8262573
 [4,]  0.3605602
 [5,]  2.0659098
 [6,]  0.5078360
 [7,] -2.4749546
 [8,]  0.8407874
 [9,] -1.1606788
[10,] -1.8298247
[11,]  1.3842188
[12,] -2.3993266

$weights[[1]][[2]]
          [,1]
[1,]  1.011418
[2,] -1.025975



$generalized.weights
$generalized.weights[[1]]
         [,1]       [,2]       [,3]      [,4]       [,5]     [,6]       [,7]
2   -1.491369 -0.8665998 -0.3781647 -2.166779 -0.5326313 2.595796 -0.8818393
3   -1.485532 -0.8632076 -0.3766845 -2.158298 -0.5305464 2.585635 -0.8783875
4   -1.473847 -0.8564179 -0.3737216 -2.141321 -0.5263733 2.565297 -0.8714784
5   -1.488894 -0.8651613 -0.3775370 -2.163182 -0.5317472 2.591487 -0.8803756
6   -1.473531 -0.8562343 -0.3736415 -2.140862 -0.5262605 2.564747 -0.8712916
7   -1.471608 -0.8551169 -0.3731538 -2.138068 -0.5255737 2.561400 -0.8701545
8   -1.485510 -0.8631951 -0.3766790 -2.158266 -0.5305387 2.585597 -0.8783748
9   -1.489652 -0.8656019 -0.3777293 -2.164284 -0.5320180 2.592807 -0.8808239
10  -1.502025 -0.8727913 -0.3808666 -2.182260 -0.5364368 2.614342 -0.8881397
11  -1.500694 -0.8720179 -0.3805291 -2.180326 -0.5359614 2.612025 -0.8873527
12  -1.483837 -0.8622228 -0.3762547 -2.155835 -0.5299412 2.582685 -0.8773854
13  -1.475840 -0.8575760 -0.3742269 -2.144217 -0.5270851 2.568766 -0.8726568
14  -1.462024 -0.8495478 -0.3707236 -2.124144 -0.5221508 2.544718 -0.8644875
15  -1.464332 -0.8508890 -0.3713089 -2.127497 -0.5229751 2.548736 -0.8658523
16  -1.460748 -0.8488064 -0.3704001 -2.122290 -0.5216951 2.542498 -0.8637330
17  -1.482627 -0.8615197 -0.3759479 -2.154077 -0.5295090 2.580579 -0.8766699
18  -1.464708 -0.8511076 -0.3714043 -2.128044 -0.5231095 2.549391 -0.8660747
19  -1.466884 -0.8523718 -0.3719559 -2.131204 -0.5238865 2.553177 -0.8673611
20  -1.459660 -0.8481740 -0.3701241 -2.120709 -0.5213064 2.540603 -0.8630895
21  -1.471039 -0.8547864 -0.3730096 -2.137242 -0.5253705 2.560410 -0.8698182
22  -1.462583 -0.8498726 -0.3708654 -2.124956 -0.5223504 2.545691 -0.8648180
23  -1.487683 -0.8644579 -0.3772301 -2.161424 -0.5313149 2.589380 -0.8796598
24  -1.498003 -0.8704542 -0.3798467 -2.176416 -0.5350003 2.607341 -0.8857615
25  -1.491796 -0.8668477 -0.3782729 -2.167399 -0.5327837 2.596538 -0.8820916
26  -1.532014 -0.8902175 -0.3884710 -2.225831 -0.5471473 2.666540 -0.9058724
27  -1.491740 -0.8668150 -0.3782586 -2.167317 -0.5327636 2.596440 -0.8820583
28  -1.567965 -0.9111078 -0.3975870 -2.278063 -0.5599869 2.729114 -0.9271300
29  -1.568659 -0.9115111 -0.3977630 -2.279072 -0.5602348 2.730322 -0.9275404
30  -1.509600 -0.8771933 -0.3827875 -2.193266 -0.5391423 2.627527 -0.8926191
31  -1.578493 -0.9172252 -0.4002565 -2.293359 -0.5637468 2.747438 -0.9333550
32  -1.489767 -0.8656686 -0.3777584 -2.164451 -0.5320590 2.593006 -0.8808918
33  -1.586145 -0.9216715 -0.4021968 -2.304476 -0.5664796 2.760756 -0.9378795
34  -1.527535 -0.8876147 -0.3873352 -2.219323 -0.5455476 2.658743 -0.9032238
35  -1.459162 -0.8478849 -0.3699980 -2.119986 -0.5211287 2.539737 -0.8627953
36  -1.459209 -0.8479124 -0.3700100 -2.120054 -0.5211456 2.539820 -0.8628233
37  -1.458610 -0.8475642 -0.3698580 -2.119184 -0.5209316 2.538777 -0.8624690
38  -1.459249 -0.8479351 -0.3700199 -2.120111 -0.5211596 2.539888 -0.8628464
39  -1.459656 -0.8481719 -0.3701232 -2.120703 -0.5213051 2.540597 -0.8630873
40  -1.459759 -0.8482315 -0.3701492 -2.120852 -0.5213418 2.540776 -0.8631480
41  -1.459772 -0.8482392 -0.3701526 -2.120872 -0.5213465 2.540799 -0.8631558
42  -1.464109 -0.8507591 -0.3712522 -2.127172 -0.5228953 2.548347 -0.8657201
43  -1.459603 -0.8481408 -0.3701096 -2.120626 -0.5212860 2.540504 -0.8630557
44  -1.458612 -0.8475653 -0.3698585 -2.119187 -0.5209323 2.538780 -0.8624701
45  -1.459294 -0.8479616 -0.3700314 -2.120177 -0.5211759 2.539967 -0.8628733
46  -1.460590 -0.8487145 -0.3703600 -2.122060 -0.5216386 2.542222 -0.8636395
47  -1.459175 -0.8478923 -0.3700012 -2.120004 -0.5211333 2.539759 -0.8628028
48  -1.463432 -0.8503662 -0.3710808 -2.126190 -0.5226538 2.547170 -0.8653203
49  -1.459471 -0.8480646 -0.3700764 -2.120435 -0.5212392 2.540276 -0.8629782
50  -1.470742 -0.8546137 -0.3729343 -2.136810 -0.5252644 2.559893 -0.8696425
51  -1.468437 -0.8532741 -0.3723497 -2.133460 -0.5244410 2.555880 -0.8682793
52  -1.470218 -0.8543093 -0.3728014 -2.136049 -0.5250773 2.558981 -0.8693327
53  -1.461511 -0.8492499 -0.3705936 -2.123399 -0.5219677 2.543826 -0.8641843
54  -1.459414 -0.8480311 -0.3700617 -2.120351 -0.5212186 2.540175 -0.8629440
55  -1.461318 -0.8491373 -0.3705445 -2.123117 -0.5218985 2.543489 -0.8640697
56  -1.480505 -0.8602866 -0.3754098 -2.150994 -0.5287511 2.576885 -0.8754151
57  -1.481283 -0.8607388 -0.3756071 -2.152125 -0.5290290 2.578240 -0.8758752
58  -1.479645 -0.8597870 -0.3751918 -2.149745 -0.5284440 2.575389 -0.8749067
59  -1.505145 -0.8746042 -0.3816577 -2.186793 -0.5375510 2.619772 -0.8899845
60  -1.499709 -0.8714455 -0.3802793 -2.178895 -0.5356096 2.610310 -0.8867702
61  -1.478396 -0.8590611 -0.3748750 -2.147930 -0.5279979 2.573214 -0.8741681
62  -1.478381 -0.8590524 -0.3748712 -2.147908 -0.5279925 2.573188 -0.8741592
63  -1.475449 -0.8573489 -0.3741278 -2.143649 -0.5269455 2.568086 -0.8724257
64  -1.472888 -0.8558605 -0.3734783 -2.139927 -0.5260307 2.563627 -0.8709111
65  -1.503257 -0.8735075 -0.3811791 -2.184051 -0.5368770 2.616487 -0.8888685
66  -1.481923 -0.8611109 -0.3757695 -2.153055 -0.5292577 2.579354 -0.8762539
67  -1.465385 -0.8515011 -0.3715760 -2.129027 -0.5233513 2.550569 -0.8664751
68  -1.473320 -0.8561114 -0.3735878 -2.140555 -0.5261849 2.564379 -0.8711665
69  -1.471702 -0.8551715 -0.3731777 -2.138205 -0.5256073 2.561564 -0.8702101
70  -1.464759 -0.8511370 -0.3714171 -2.128117 -0.5231276 2.549479 -0.8661046
71  -1.465226 -0.8514083 -0.3715355 -2.128795 -0.5232943 2.550291 -0.8663806
72  -1.473839 -0.8564132 -0.3737195 -2.141309 -0.5263704 2.565283 -0.8714736
73  -1.470961 -0.8547412 -0.3729899 -2.137129 -0.5253428 2.560275 -0.8697722
74  -1.489591 -0.8655666 -0.3777139 -2.164196 -0.5319963 2.592701 -0.8807879
75  -1.474287 -0.8566733 -0.3738330 -2.141960 -0.5265303 2.566062 -0.8717383
76  -1.459945 -0.8483400 -0.3701965 -2.121124 -0.5214084 2.541100 -0.8632584
77  -1.458840 -0.8476978 -0.3699163 -2.119518 -0.5210137 2.539177 -0.8626049
78  -1.462864 -0.8500360 -0.3709367 -2.125364 -0.5224508 2.546181 -0.8649842
79  -1.458799 -0.8476737 -0.3699058 -2.119458 -0.5209990 2.539105 -0.8625804
80  -1.458901 -0.8477333 -0.3699318 -2.119607 -0.5210356 2.539283 -0.8626410
81  -1.458605 -0.8475609 -0.3698566 -2.119176 -0.5209296 2.538767 -0.8624656
82  -1.458782 -0.8476642 -0.3699016 -2.119434 -0.5209931 2.539076 -0.8625707
83  -1.460327 -0.8485616 -0.3702933 -2.121678 -0.5215447 2.541764 -0.8634839
84  -1.458759 -0.8476506 -0.3698957 -2.119400 -0.5209847 2.539036 -0.8625569
85  -1.462398 -0.8497649 -0.3708184 -2.124686 -0.5222843 2.545369 -0.8647084
86  -1.472780 -0.8557979 -0.3734510 -2.139771 -0.5259922 2.563440 -0.8708474
87  -1.474655 -0.8568874 -0.3739265 -2.142495 -0.5266619 2.566703 -0.8719561
88  -1.461915 -0.8494847 -0.3706961 -2.123986 -0.5221120 2.544529 -0.8644233
89  -1.463218 -0.8502417 -0.3710264 -2.125879 -0.5225773 2.546797 -0.8651936
90  -1.458617 -0.8475684 -0.3698598 -2.119194 -0.5209342 2.538789 -0.8624732
91  -1.462794 -0.8499953 -0.3709189 -2.125263 -0.5224259 2.546059 -0.8649429
92  -1.466870 -0.8523636 -0.3719524 -2.131184 -0.5238814 2.553153 -0.8673527
93  -1.476948 -0.8582198 -0.3745079 -2.145826 -0.5274808 2.570694 -0.8733120
94  -1.472098 -0.8554014 -0.3732780 -2.138779 -0.5257485 2.562252 -0.8704440
95  -1.495284 -0.8688741 -0.3791572 -2.172466 -0.5340292 2.602608 -0.8841537
96  -1.499140 -0.8711151 -0.3801351 -2.178069 -0.5354065 2.609321 -0.8864340
97  -1.483138 -0.8618166 -0.3760774 -2.154819 -0.5296914 2.581468 -0.8769720
98  -1.501419 -0.8724391 -0.3807129 -2.181379 -0.5362203 2.613287 -0.8877814
99  -1.501010 -0.8722015 -0.3806092 -2.180785 -0.5360742 2.612575 -0.8875395
100 -1.512057 -0.8786211 -0.3834105 -2.196836 -0.5400199 2.631804 -0.8940720
101 -1.521895 -0.8843377 -0.3859052 -2.211130 -0.5435335 2.648927 -0.8998892
        [,8]     [,9]     [,10]    [,11]
2   1.217350 1.919167 -1.451804 2.516475
3   1.212584 1.911655 -1.446121 2.506625
4   1.203047 1.896618 -1.434746 2.486908
5   1.215329 1.915981 -1.449394 2.512298
6   1.202789 1.896212 -1.434439 2.486375
7   1.201219 1.893737 -1.432567 2.483130
8   1.212567 1.911627 -1.446100 2.506588
9   1.215948 1.916957 -1.450132 2.513577
10  1.226047 1.932879 -1.462177 2.534454
11  1.224961 1.931166 -1.460881 2.532208
12  1.211201 1.909474 -1.444471 2.503765
13  1.204673 1.899183 -1.436687 2.490271
14  1.193396 1.881404 -1.423237 2.466959
15  1.195280 1.884374 -1.425484 2.470853
16  1.192355 1.879762 -1.421995 2.464806
17  1.210213 1.907917 -1.443293 2.501723
18  1.195587 1.884858 -1.425850 2.471488
19  1.197363 1.887658 -1.427968 2.475159
20  1.191466 1.878361 -1.420936 2.462969
21  1.200755 1.893005 -1.432013 2.482171
22  1.193852 1.882123 -1.423781 2.467902
23  1.214341 1.914424 -1.448216 2.510255
24  1.222764 1.927703 -1.458261 2.527668
25  1.217698 1.919716 -1.452219 2.517195
26  1.250526 1.971471 -1.491371 2.585057
27  1.217652 1.919643 -1.452165 2.517100
28  1.279872 2.017734 -1.526368 2.645719
29  1.280438 2.018627 -1.527043 2.646891
30  1.232231 1.942627 -1.469551 2.547237
31  1.288465 2.031282 -1.536616 2.663484
32  1.216042 1.917105 -1.450244 2.513771
33  1.294711 2.041128 -1.544065 2.676395
34  1.246870 1.965706 -1.487010 2.577499
35  1.191060 1.877721 -1.420451 2.462130
36  1.191099 1.877782 -1.420497 2.462210
37  1.190609 1.877011 -1.419914 2.461198
38  1.191131 1.877832 -1.420535 2.462276
39  1.191463 1.878356 -1.420932 2.462963
40  1.191547 1.878489 -1.421032 2.463136
41  1.191558 1.878506 -1.421045 2.463159
42  1.195098 1.884086 -1.425266 2.470476
43  1.191419 1.878288 -1.420880 2.462873
44  1.190611 1.877013 -1.419916 2.461202
45  1.191168 1.877891 -1.420580 2.462352
46  1.192225 1.879558 -1.421841 2.464539
47  1.191070 1.877737 -1.420464 2.462151
48  1.194546 1.883216 -1.424608 2.469335
49  1.191312 1.878119 -1.420752 2.462652
50  1.200512 1.892623 -1.431724 2.481669
51  1.198630 1.889656 -1.429480 2.477779
52  1.200085 1.891948 -1.431214 2.480785
53  1.192977 1.880744 -1.422738 2.466094
54  1.191265 1.878045 -1.420696 2.462554
55  1.192819 1.880495 -1.422549 2.465767
56  1.208481 1.905186 -1.441228 2.498143
57  1.209116 1.906187 -1.441985 2.499455
58  1.207779 1.904079 -1.440391 2.496692
59  1.228594 1.936893 -1.465214 2.539719
60  1.224157 1.929898 -1.459922 2.530546
61  1.206760 1.902472 -1.439175 2.494584
62  1.206747 1.902452 -1.439160 2.494559
63  1.204354 1.898680 -1.436306 2.489612
64  1.202264 1.895384 -1.433813 2.485290
65  1.227053 1.934465 -1.463376 2.536534
66  1.209639 1.907011 -1.442609 2.500536
67  1.196140 1.885729 -1.426509 2.472631
68  1.202616 1.895939 -1.434233 2.486018
69  1.201296 1.893858 -1.432658 2.483289
70  1.195628 1.884923 -1.425899 2.471573
71  1.196009 1.885524 -1.426354 2.472361
72  1.203040 1.896608 -1.434739 2.486895
73  1.200691 1.892905 -1.431937 2.482039
74  1.215898 1.916879 -1.450073 2.513475
75  1.203405 1.897184 -1.435174 2.487650
76  1.191699 1.878729 -1.421214 2.463451
77  1.190797 1.877307 -1.420138 2.461586
78  1.194082 1.882485 -1.424055 2.468376
79  1.190763 1.877253 -1.420097 2.461517
80  1.190847 1.877385 -1.420197 2.461690
81  1.190605 1.877003 -1.419908 2.461189
82  1.190750 1.877232 -1.420081 2.461489
83  1.192011 1.879220 -1.421585 2.464095
84  1.190731 1.877202 -1.420059 2.461449
85  1.193701 1.881885 -1.423601 2.467589
86  1.202176 1.895245 -1.433708 2.485108
87  1.203706 1.897658 -1.435533 2.488272
88  1.193307 1.881264 -1.423131 2.466775
89  1.194371 1.882940 -1.424400 2.468974
90  1.190615 1.877020 -1.419921 2.461211
91  1.194025 1.882395 -1.423987 2.468258
92  1.197351 1.887639 -1.427954 2.475135
93  1.205578 1.900609 -1.437765 2.492141
94  1.201619 1.894367 -1.433043 2.483957
95  1.220544 1.924204 -1.455614 2.523079
96  1.223692 1.929166 -1.459368 2.529587
97  1.210630 1.908574 -1.443791 2.502585
98  1.225552 1.932099 -1.461587 2.533432
99  1.225219 1.931572 -1.461188 2.532741
100 1.234236 1.945789 -1.471943 2.551383
101 1.242267 1.958449 -1.481520 2.567983


$startweights
$startweights[[1]]
$startweights[[1]][[1]]
             [,1]
 [1,]  1.12493092
 [2,] -0.04493361
 [3,] -0.01619026
 [4,]  0.94383621
 [5,]  0.82122120
 [6,]  0.59390132
 [7,]  0.91897737
 [8,]  0.78213630
 [9,]  0.07456498
[10,] -1.98935170
[11,]  0.61982575
[12,] -0.05612874

$startweights[[1]][[2]]
           [,1]
[1,] -0.1557955
[2,] -1.4707524



$result.matrix
                                     [,1]
error                         0.779848611
reached.threshold             0.009621687
steps                       964.000000000
Intercept.to.1layhid1         0.443753932
B_CL2_VAL.to.1layhid1         1.421942347
B_PH_VAL.to.1layhid1          0.826257317
B_COND_VAL.to.1layhid1        0.360560171
B_TEMP_VAL.to.1layhid1        2.065909823
B_PRES_OP.to.1layhid1         0.507835951
B_PLNT_PRES_OP.to.1layhid1   -2.474954559
B_PLNT_PH_VAL.to.1layhid1     0.840787403
B_PLNT_TURB_VAL.to.1layhid1  -1.160678811
B_PLNT_FLOW_OP.to.1layhid1   -1.829824671
B_PLNT_CL2_VAL.to.1layhid1    1.384218803
past_data.to.1layhid1        -2.399326557
Intercept.to.B_TURB_VAL       1.011417906
1layhid1.to.B_TURB_VAL       -1.025974619

attr(,"class")
[1] "nn"

$modelList$model3
$call
neuralnet(formula = nn_input, data = model_input, hidden = hidden, 
    threshold = threshold, stepmax = stepmax, rep = rep, startweights = unlist(control))

$response
      B_PH_VAL
2   0.27272727
3   0.27272727
4   0.31818182
5   0.36363636
6   0.36363636
7   0.40909091
8   0.40909091
9   0.45454545
10  0.45454545
11  0.45454545
12  0.45454545
13  0.50000000
14  0.45454545
15  0.50000000
16  0.45454545
17  0.45454545
18  0.36363636
19  0.36363636
20  0.40909091
21  0.40909091
22  0.45454545
23  0.50000000
24  0.50000000
25  0.54545455
26  0.59090909
27  0.63636364
28  0.63636364
29  0.72727273
30  0.72727273
31  0.72727273
32  0.68181818
33  0.72727273
34  0.68181818
35  0.72727273
36  0.72727273
37  0.72727273
38  0.77272727
39  0.77272727
40  0.81818182
41  0.81818182
42  0.81818182
43  0.86363636
44  0.90909091
45  0.90909091
46  0.95454545
47  0.95454545
48  1.00000000
49  0.95454545
50  1.00000000
51  0.95454545
52  0.95454545
53  0.90909091
54  0.81818182
55  0.72727273
56  0.68181818
57  0.63636364
58  0.63636364
59  0.59090909
60  0.63636364
61  0.63636364
62  0.63636364
63  0.59090909
64  0.54545455
65  0.50000000
66  0.50000000
67  0.45454545
68  0.45454545
69  0.40909091
70  0.40909091
71  0.40909091
72  0.36363636
73  0.36363636
74  0.36363636
75  0.40909091
76  0.40909091
77  0.40909091
78  0.45454545
79  0.45454545
80  0.40909091
81  0.45454545
82  0.45454545
83  0.45454545
84  0.45454545
85  0.45454545
86  0.40909091
87  0.31818182
88  0.22727273
89  0.18181818
90  0.18181818
91  0.18181818
92  0.13636364
93  0.09090909
94  0.00000000
95  0.00000000
96  0.04545455
97  0.04545455
98  0.00000000
99  0.00000000
100 0.00000000
101 0.00000000

$covariate
      B_CL2_VAL B_TURB_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP B_PLNT_PRES_OP
2   1.000000000 0.16233766 0.63888889 0.00000000 0.61538462      0.5000000
3   0.996138996 0.34415584 0.33333333 0.00000000 0.61538462      0.5714286
4   0.988416988 0.24675325 0.52777778 0.04545455 0.69230769      0.5714286
5   0.984555985 0.29220779 0.50000000 0.04545455 0.61538462      0.5000000
6   0.984555985 0.22077922 0.55555556 0.04545455 0.69230769      0.5714286
7   0.949806950 0.22077922 0.22222222 0.09090909 0.69230769      0.6428571
8   0.972972973 0.12987013 0.41666667 0.13636364 0.69230769      0.5714286
9   0.969111969 0.12987013 0.22222222 0.22727273 0.76923077      0.7142857
10  0.961389961 0.16883117 0.41666667 0.22727273 0.69230769      0.5714286
11  0.965250965 0.18831169 0.25000000 0.27272727 0.53846154      0.5000000
12  0.949806950 0.29870130 0.38888889 0.27272727 0.46153846      0.5000000
13  0.961389961 0.52597403 0.11111111 0.36363636 0.46153846      0.5000000
14  0.961389961 0.50649351 0.36111111 0.36363636 0.46153846      0.5000000
15  0.961389961 0.51948052 0.16666667 0.45454545 0.46153846      0.5000000
16  0.961389961 0.31818182 0.36111111 0.36363636 0.38461538      0.5000000
17  0.976833977 0.43506494 0.47222222 0.45454545 0.38461538      0.5000000
18  0.980694981 0.51298701 0.55555556 0.36363636 0.38461538      0.5000000
19  0.980694981 0.50000000 0.47222222 0.45454545 0.30769231      0.5000000
20  0.980694981 0.44805195 0.50000000 0.40909091 0.30769231      0.5714286
21  0.972972973 0.43506494 0.52777778 0.45454545 0.23076923      0.5000000
22  0.976833977 0.33116883 0.44444444 0.36363636 0.23076923      0.5000000
23  0.980694981 0.19480519 0.58333333 0.45454545 0.61538462      0.5714286
24  0.976833977 0.25324675 0.50000000 0.40909091 0.61538462      0.5714286
25  0.969111969 0.06493506 0.55555556 0.40909091 0.53846154      0.5000000
26  0.969111969 0.22077922 0.50000000 0.40909091 0.53846154      0.5000000
27  0.965250965 0.10389610 0.47222222 0.36363636 0.53846154      0.5000000
28  0.961389961 0.05194805 0.47222222 0.50000000 0.53846154      0.5000000
29  0.961389961 0.30519481 0.47222222 0.40909091 0.46153846      0.5000000
30  0.961389961 0.00000000 0.55555556 0.45454545 0.46153846      0.4285714
31  0.961389961 0.16233766 0.36111111 0.40909091 0.46153846      0.4285714
32  0.953667954 0.18181818 0.58333333 0.40909091 0.53846154      0.5000000
33  0.957528958 0.14285714 0.41666667 0.45454545 0.53846154      0.5000000
34  0.667953668 0.46753247 0.61111111 0.31818182 0.53846154      0.5000000
35  0.019305019 0.47402597 0.66666667 0.36363636 0.53846154      0.5000000
36  0.015444015 0.61038961 0.50000000 0.31818182 0.53846154      0.5000000
37  0.030888031 0.42207792 0.52777778 0.36363636 0.53846154      0.5000000
38  0.023166023 0.53896104 0.33333333 0.36363636 0.53846154      0.5000000
39  0.003861004 0.48051948 0.63888889 0.27272727 0.46153846      0.5000000
40  0.023166023 0.57792208 0.50000000 0.31818182 0.53846154      0.5000000
41  0.000000000 0.74025974 0.50000000 0.27272727 0.53846154      0.5714286
42  0.019305019 0.60389610 0.55555556 0.27272727 0.61538462      0.5714286
43  0.023166023 0.56493506 0.58333333 0.22727273 0.53846154      0.5714286
44  0.023166023 0.37012987 0.63888889 0.27272727 0.46153846      0.5714286
45  0.023166023 0.62337662 0.58333333 0.22727273 0.46153846      0.5714286
46  0.023166023 0.53246753 0.69444444 0.22727273 0.38461538      0.5000000
47  0.019305019 0.34415584 0.47222222 0.27272727 0.23076923      0.4285714
48  0.023166023 0.50000000 0.55555556 0.22727273 0.15384615      0.4285714
49  0.023166023 0.21428571 0.61111111 0.27272727 0.15384615      0.4285714
50  0.023166023 0.28571429 0.50000000 0.22727273 0.15384615      0.4285714
51  0.023166023 0.25324675 0.66666667 0.27272727 0.15384615      0.4285714
52  0.019305019 0.38311688 0.58333333 0.27272727 0.15384615      0.4285714
53  0.023166023 0.37012987 0.83333333 0.18181818 0.00000000      0.4285714
54  0.023166023 0.48051948 0.61111111 0.18181818 0.00000000      0.4285714
55  0.019305019 0.77272727 0.88888889 0.09090909 0.15384615      0.5000000
56  0.019305019 0.70129870 0.63888889 0.13636364 0.07692308      0.4285714
57  0.023166023 0.79870130 0.83333333 0.09090909 0.30769231      0.5000000
58  0.023166023 0.91558442 0.77777778 0.18181818 0.53846154      0.5714286
59  0.019305019 1.00000000 0.83333333 0.09090909 0.69230769      0.6428571
60  0.023166023 0.82467532 0.75000000 0.18181818 0.84615385      0.7142857
61  0.023166023 0.85714286 0.72222222 0.13636364 0.84615385      0.6428571
62  0.019305019 0.72727273 0.75000000 0.18181818 0.76923077      0.6428571
63  0.023166023 0.80519481 0.69444444 0.09090909 0.69230769      0.6428571
64  0.023166023 0.87662338 0.86111111 0.13636364 0.69230769      0.5714286
65  0.023166023 0.79870130 0.69444444 0.04545455 0.53846154      0.5000000
66  0.019305019 0.70129870 0.80555556 0.13636364 0.46153846      0.4285714
67  0.023166023 0.77922078 0.80555556 0.13636364 0.53846154      0.4285714
68  0.023166023 0.70129870 0.88888889 0.13636364 0.53846154      0.5000000
69  0.023166023 0.62987013 0.77777778 0.09090909 0.61538462      0.5000000
70  0.023166023 0.57142857 0.94444444 0.09090909 0.61538462      0.5000000
71  0.023166023 0.72727273 0.77777778 0.09090909 0.69230769      0.5714286
72  0.027027027 0.61688312 1.00000000 0.09090909 0.46153846      0.3571429
73  0.027027027 0.80519481 0.66666667 0.09090909 0.69230769      0.5714286
74  0.027027027 0.77922078 0.94444444 0.09090909 1.00000000      1.0000000
75  0.027027027 0.49350649 0.72222222 0.18181818 0.76923077      0.7857143
76  0.027027027 0.38311688 0.94444444 0.09090909 0.76923077      0.7142857
77  0.027027027 0.62987013 0.75000000 0.18181818 0.69230769      0.6428571
78  0.027027027 0.55844156 0.83333333 0.09090909 0.53846154      0.4285714
79  0.027027027 0.45454545 0.69444444 0.22727273 0.23076923      0.0000000
80  0.027027027 0.61038961 0.80555556 0.18181818 0.53846154      0.5000000
81  0.030888031 0.64935065 0.72222222 0.31818182 0.53846154      0.5000000
82  0.027027027 0.82467532 0.69444444 0.31818182 0.53846154      0.5000000
83  0.027027027 0.57792208 0.66666667 0.45454545 0.53846154      0.5000000
84  0.023166023 0.85714286 0.52777778 0.40909091 0.46153846      0.5000000
85  0.011583012 0.33766234 0.58333333 0.50000000 0.38461538      0.5000000
86  0.023166023 0.33116883 0.47222222 0.54545455 0.38461538      0.5000000
87  0.030888031 0.55194805 0.72222222 0.59090909 0.30769231      0.5000000
88  0.030888031 0.44805195 0.33333333 0.72727273 0.23076923      0.4285714
89  0.034749035 0.64285714 0.38888889 0.68181818 0.15384615      0.4285714
90  0.034749035 0.39610390 0.44444444 0.77272727 0.15384615      0.5000000
91  0.034749035 0.42857143 0.33333333 0.77272727 0.15384615      0.5714286
92  0.034749035 0.26623377 0.38888889 0.81818182 0.15384615      0.5000000
93  0.034749035 0.32467532 0.22222222 0.81818182 0.53846154      0.5714286
94  0.034749035 0.25324675 0.16666667 0.81818182 0.61538462      0.5714286
95  0.034749035 0.24675325 0.27777778 0.95454545 0.61538462      0.5714286
96  0.034749035 0.39610390 0.19444444 1.00000000 0.53846154      0.5714286
97  0.034749035 0.12337662 0.30555556 0.95454545 0.53846154      0.5714286
98  0.030888031 0.15584416 0.27777778 0.95454545 0.53846154      0.5714286
99  0.030888031 0.07792208 0.00000000 0.95454545 0.53846154      0.5714286
100 0.027027027 0.07792208 0.05555556 0.86363636 0.53846154      0.5000000
101 0.023166023 0.07142857 0.25000000 0.90909091 0.53846154      0.5000000
    B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL  past_data
2      0.93333333     0.194148936      0.4545455    0.284403670 0.27272727
3      0.93333333     0.199468085      0.3636364    0.284403670 0.27272727
4      0.93333333     0.242021277      0.3636364    0.284403670 0.27272727
5      0.86666667     0.260638298      0.3636364    0.284403670 0.31818182
6      0.86666667     0.289893617      0.3636364    0.238532110 0.36363636
7      0.86666667     0.276595745      0.3636364    0.220183486 0.36363636
8      0.86666667     0.303191489      0.3636364    0.201834862 0.40909091
9      0.80000000     0.348404255      0.2727273    0.174311927 0.40909091
10     0.80000000     0.345744681      0.3636364    0.155963303 0.45454545
11     0.80000000     0.377659574      0.3636364    0.137614679 0.45454545
12     0.80000000     0.375000000      0.4545455    0.100917431 0.45454545
13     0.80000000     0.396276596      0.4545455    0.082568807 0.45454545
14     0.80000000     0.375000000      0.4545455    0.064220183 0.50000000
15     0.73333333     0.375000000      0.4545455    0.045871560 0.45454545
16     0.73333333     0.359042553      0.4545455    0.045871560 0.50000000
17     0.73333333     0.351063830      0.4545455    0.036697248 0.45454545
18     0.73333333     0.327127660      0.4545455    0.018348624 0.45454545
19     0.73333333     0.324468085      0.3636364    0.009174312 0.36363636
20     0.66666667     0.321808511      0.4545455    0.009174312 0.36363636
21     0.66666667     0.297872340      0.3636364    0.009174312 0.40909091
22     0.60000000     0.279255319      0.4545455    0.018348624 0.40909091
23     0.60000000     0.265957447      0.3636364    0.000000000 0.45454545
24     0.53333333     0.247340426      0.3636364    0.000000000 0.50000000
25     0.53333333     0.234042553      0.4545455    0.009174312 0.50000000
26     0.53333333     0.228723404      0.4545455    0.009174312 0.54545455
27     0.46666667     0.228723404      0.4545455    0.027522936 0.59090909
28     0.46666667     0.228723404      0.3636364    0.045871560 0.63636364
29     0.46666667     0.223404255      0.3636364    0.064220183 0.63636364
30     0.40000000     0.226063830      0.4545455    0.082568807 0.72727273
31     0.40000000     0.204787234      0.4545455    0.064220183 0.72727273
32     0.40000000     1.000000000      0.3636364    0.357798165 0.72727273
33     0.33333333     0.319148936      0.4545455    0.568807339 0.68181818
34     0.33333333     0.194148936      0.4545455    0.568807339 0.72727273
35     0.33333333     0.175531915      0.4545455    0.596330275 0.68181818
36     0.33333333     0.172872340      0.3636364    0.605504587 0.72727273
37     0.33333333     0.170212766      0.3636364    0.605504587 0.72727273
38     0.33333333     0.170212766      0.4545455    0.577981651 0.72727273
39     0.33333333     0.164893617      0.4545455    0.577981651 0.77272727
40     0.33333333     0.175531915      0.3636364    0.605504587 0.77272727
41     0.33333333     0.180851064      0.3636364    0.642201835 0.81818182
42     0.33333333     0.196808511      0.3636364    0.669724771 0.81818182
43     0.33333333     0.215425532      0.3636364    0.724770642 0.81818182
44     0.33333333     0.231382979      0.3636364    0.770642202 0.86363636
45     0.33333333     0.226063830      0.4545455    0.752293578 0.90909091
46     0.33333333     0.207446809      0.5454545    0.770642202 0.90909091
47     0.33333333     0.204787234      0.4545455    0.770642202 0.95454545
48     0.40000000     0.156914894      0.5454545    0.761467890 0.95454545
49     0.40000000     0.167553191      0.5454545    0.779816514 1.00000000
50     0.40000000     0.223404255      0.5454545    0.807339450 0.95454545
51     0.40000000     0.228723404      0.5454545    0.798165138 1.00000000
52     0.40000000     0.215425532      0.5454545    0.798165138 0.95454545
53     0.46666667     0.114361702      0.5454545    0.779816514 0.95454545
54     0.46666667     0.186170213      0.5454545    0.798165138 0.90909091
55     0.40000000     0.202127660      0.5454545    0.816513761 0.81818182
56     0.33333333     0.172872340      0.5454545    0.798165138 0.72727273
57     0.26666667     0.164893617      0.5454545    0.779816514 0.68181818
58     0.26666667     0.170212766      0.4545455    0.779816514 0.63636364
59     0.26666667     0.207446809      0.3636364    0.816513761 0.63636364
60     0.26666667     0.202127660      0.2727273    0.816513761 0.59090909
61     0.26666667     0.196808511      0.3636364    0.844036697 0.63636364
62     0.26666667     0.191489362      0.3636364    0.853211009 0.63636364
63     0.26666667     0.148936170      0.3636364    0.844036697 0.63636364
64     0.26666667     0.204787234      0.3636364    0.862385321 0.59090909
65     0.26666667     0.220744681      0.4545455    0.853211009 0.54545455
66     0.20000000     0.226063830      0.5454545    0.871559633 0.50000000
67     0.13333333     0.130319149      0.4545455    0.871559633 0.50000000
68     0.13333333     0.090425532      0.4545455    0.889908257 0.45454545
69     0.06666667     0.061170213      0.4545455    0.899082569 0.45454545
70     0.06666667     0.050531915      0.4545455    0.899082569 0.40909091
71     0.06666667     0.029255319      0.4545455    0.908256881 0.40909091
72     0.00000000     0.023936170      0.6363636    0.917431193 0.40909091
73     0.00000000     0.042553191      0.4545455    0.944954128 0.36363636
74     0.00000000     0.039893617      0.0000000    0.954128440 0.36363636
75     0.00000000     0.026595745      0.1818182    0.963302752 0.36363636
76     0.00000000     0.007978723      0.2727273    0.963302752 0.40909091
77     0.00000000     0.010638298      0.3636364    0.981651376 0.40909091
78     0.00000000     0.021276596      0.5454545    1.000000000 0.40909091
79     0.00000000     0.082446809      1.0000000    0.972477064 0.45454545
80     0.00000000     0.023936170      0.5454545    0.972477064 0.45454545
81     0.00000000     0.000000000      0.4545455    0.972477064 0.40909091
82     0.06666667     0.029255319      0.4545455    0.972477064 0.45454545
83     0.06666667     0.042553191      0.4545455    0.944954128 0.45454545
84     0.06666667     0.055851064      0.5454545    0.935779817 0.45454545
85     0.06666667     0.045212766      0.4545455    0.926605505 0.45454545
86     0.06666667     0.058510638      0.4545455    0.935779817 0.45454545
87     0.06666667     0.087765957      0.4545455    0.926605505 0.40909091
88     0.06666667     0.069148936      0.5454545    0.926605505 0.31818182
89     0.06666667     0.085106383      0.5454545    0.917431193 0.22727273
90     0.06666667     0.119680851      0.5454545    0.889908257 0.18181818
91     0.06666667     0.162234043      0.4545455    0.889908257 0.18181818
92     0.06666667     0.156914894      0.4545455    0.889908257 0.18181818
93     0.06666667     0.159574468      0.4545455    0.880733945 0.13636364
94     0.13333333     0.135638298      0.4545455    0.871559633 0.09090909
95     0.13333333     0.180851064      0.4545455    0.889908257 0.00000000
96     0.13333333     0.188829787      0.4545455    0.880733945 0.00000000
97     0.20000000     0.098404255      0.4545455    0.871559633 0.04545455
98     0.13333333     0.159574468      0.5454545    0.862385321 0.04545455
99     0.13333333     0.154255319      0.4545455    0.862385321 0.00000000
100    0.13333333     0.188829787      0.4545455    0.853211009 0.00000000
101    0.13333333     0.223404255      0.4545455    0.844036697 0.00000000

$model.list
$model.list$response
[1] "B_PH_VAL"

$model.list$variables
 [1] "B_CL2_VAL"       "B_TURB_VAL"      "B_COND_VAL"      "B_TEMP_VAL"     
 [5] "B_PRES_OP"       "B_PLNT_PRES_OP"  "B_PLNT_PH_VAL"   "B_PLNT_TURB_VAL"
 [9] "B_PLNT_FLOW_OP"  "B_PLNT_CL2_VAL"  "past_data"      


$err.fct
function (x, y) 
{
    1/2 * (y - x)^2
}
<bytecode: 0x7fd6aa25d4a8>
<environment: 0x7fd6ab2fca78>
attr(,"type")
[1] "sse"

$act.fct
function (x) 
{
    1/(1 + exp(-x))
}
<bytecode: 0x7fd6aa25ca88>
<environment: 0x7fd6ab2fc5e0>
attr(,"type")
[1] "logistic"

$linear.output
[1] TRUE

$data
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.00000000 0.61538462
3   0.996138996 0.34415584 0.27272727 0.33333333 0.00000000 0.61538462
4   0.988416988 0.24675325 0.31818182 0.52777778 0.04545455 0.69230769
5   0.984555985 0.29220779 0.36363636 0.50000000 0.04545455 0.61538462
6   0.984555985 0.22077922 0.36363636 0.55555556 0.04545455 0.69230769
7   0.949806950 0.22077922 0.40909091 0.22222222 0.09090909 0.69230769
8   0.972972973 0.12987013 0.40909091 0.41666667 0.13636364 0.69230769
9   0.969111969 0.12987013 0.45454545 0.22222222 0.22727273 0.76923077
10  0.961389961 0.16883117 0.45454545 0.41666667 0.22727273 0.69230769
11  0.965250965 0.18831169 0.45454545 0.25000000 0.27272727 0.53846154
12  0.949806950 0.29870130 0.45454545 0.38888889 0.27272727 0.46153846
13  0.961389961 0.52597403 0.50000000 0.11111111 0.36363636 0.46153846
14  0.961389961 0.50649351 0.45454545 0.36111111 0.36363636 0.46153846
15  0.961389961 0.51948052 0.50000000 0.16666667 0.45454545 0.46153846
16  0.961389961 0.31818182 0.45454545 0.36111111 0.36363636 0.38461538
17  0.976833977 0.43506494 0.45454545 0.47222222 0.45454545 0.38461538
18  0.980694981 0.51298701 0.36363636 0.55555556 0.36363636 0.38461538
19  0.980694981 0.50000000 0.36363636 0.47222222 0.45454545 0.30769231
20  0.980694981 0.44805195 0.40909091 0.50000000 0.40909091 0.30769231
21  0.972972973 0.43506494 0.40909091 0.52777778 0.45454545 0.23076923
22  0.976833977 0.33116883 0.45454545 0.44444444 0.36363636 0.23076923
23  0.980694981 0.19480519 0.50000000 0.58333333 0.45454545 0.61538462
24  0.976833977 0.25324675 0.50000000 0.50000000 0.40909091 0.61538462
25  0.969111969 0.06493506 0.54545455 0.55555556 0.40909091 0.53846154
26  0.969111969 0.22077922 0.59090909 0.50000000 0.40909091 0.53846154
27  0.965250965 0.10389610 0.63636364 0.47222222 0.36363636 0.53846154
28  0.961389961 0.05194805 0.63636364 0.47222222 0.50000000 0.53846154
29  0.961389961 0.30519481 0.72727273 0.47222222 0.40909091 0.46153846
30  0.961389961 0.00000000 0.72727273 0.55555556 0.45454545 0.46153846
31  0.961389961 0.16233766 0.72727273 0.36111111 0.40909091 0.46153846
32  0.953667954 0.18181818 0.68181818 0.58333333 0.40909091 0.53846154
33  0.957528958 0.14285714 0.72727273 0.41666667 0.45454545 0.53846154
34  0.667953668 0.46753247 0.68181818 0.61111111 0.31818182 0.53846154
35  0.019305019 0.47402597 0.72727273 0.66666667 0.36363636 0.53846154
36  0.015444015 0.61038961 0.72727273 0.50000000 0.31818182 0.53846154
37  0.030888031 0.42207792 0.72727273 0.52777778 0.36363636 0.53846154
38  0.023166023 0.53896104 0.77272727 0.33333333 0.36363636 0.53846154
39  0.003861004 0.48051948 0.77272727 0.63888889 0.27272727 0.46153846
40  0.023166023 0.57792208 0.81818182 0.50000000 0.31818182 0.53846154
41  0.000000000 0.74025974 0.81818182 0.50000000 0.27272727 0.53846154
42  0.019305019 0.60389610 0.81818182 0.55555556 0.27272727 0.61538462
43  0.023166023 0.56493506 0.86363636 0.58333333 0.22727273 0.53846154
44  0.023166023 0.37012987 0.90909091 0.63888889 0.27272727 0.46153846
45  0.023166023 0.62337662 0.90909091 0.58333333 0.22727273 0.46153846
46  0.023166023 0.53246753 0.95454545 0.69444444 0.22727273 0.38461538
47  0.019305019 0.34415584 0.95454545 0.47222222 0.27272727 0.23076923
48  0.023166023 0.50000000 1.00000000 0.55555556 0.22727273 0.15384615
49  0.023166023 0.21428571 0.95454545 0.61111111 0.27272727 0.15384615
50  0.023166023 0.28571429 1.00000000 0.50000000 0.22727273 0.15384615
51  0.023166023 0.25324675 0.95454545 0.66666667 0.27272727 0.15384615
52  0.019305019 0.38311688 0.95454545 0.58333333 0.27272727 0.15384615
53  0.023166023 0.37012987 0.90909091 0.83333333 0.18181818 0.00000000
54  0.023166023 0.48051948 0.81818182 0.61111111 0.18181818 0.00000000
55  0.019305019 0.77272727 0.72727273 0.88888889 0.09090909 0.15384615
56  0.019305019 0.70129870 0.68181818 0.63888889 0.13636364 0.07692308
57  0.023166023 0.79870130 0.63636364 0.83333333 0.09090909 0.30769231
58  0.023166023 0.91558442 0.63636364 0.77777778 0.18181818 0.53846154
59  0.019305019 1.00000000 0.59090909 0.83333333 0.09090909 0.69230769
60  0.023166023 0.82467532 0.63636364 0.75000000 0.18181818 0.84615385
61  0.023166023 0.85714286 0.63636364 0.72222222 0.13636364 0.84615385
62  0.019305019 0.72727273 0.63636364 0.75000000 0.18181818 0.76923077
63  0.023166023 0.80519481 0.59090909 0.69444444 0.09090909 0.69230769
64  0.023166023 0.87662338 0.54545455 0.86111111 0.13636364 0.69230769
65  0.023166023 0.79870130 0.50000000 0.69444444 0.04545455 0.53846154
66  0.019305019 0.70129870 0.50000000 0.80555556 0.13636364 0.46153846
67  0.023166023 0.77922078 0.45454545 0.80555556 0.13636364 0.53846154
68  0.023166023 0.70129870 0.45454545 0.88888889 0.13636364 0.53846154
69  0.023166023 0.62987013 0.40909091 0.77777778 0.09090909 0.61538462
70  0.023166023 0.57142857 0.40909091 0.94444444 0.09090909 0.61538462
71  0.023166023 0.72727273 0.40909091 0.77777778 0.09090909 0.69230769
72  0.027027027 0.61688312 0.36363636 1.00000000 0.09090909 0.46153846
73  0.027027027 0.80519481 0.36363636 0.66666667 0.09090909 0.69230769
74  0.027027027 0.77922078 0.36363636 0.94444444 0.09090909 1.00000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.18181818 0.76923077
76  0.027027027 0.38311688 0.40909091 0.94444444 0.09090909 0.76923077
77  0.027027027 0.62987013 0.40909091 0.75000000 0.18181818 0.69230769
78  0.027027027 0.55844156 0.45454545 0.83333333 0.09090909 0.53846154
79  0.027027027 0.45454545 0.45454545 0.69444444 0.22727273 0.23076923
80  0.027027027 0.61038961 0.40909091 0.80555556 0.18181818 0.53846154
81  0.030888031 0.64935065 0.45454545 0.72222222 0.31818182 0.53846154
82  0.027027027 0.82467532 0.45454545 0.69444444 0.31818182 0.53846154
83  0.027027027 0.57792208 0.45454545 0.66666667 0.45454545 0.53846154
84  0.023166023 0.85714286 0.45454545 0.52777778 0.40909091 0.46153846
85  0.011583012 0.33766234 0.45454545 0.58333333 0.50000000 0.38461538
86  0.023166023 0.33116883 0.40909091 0.47222222 0.54545455 0.38461538
87  0.030888031 0.55194805 0.31818182 0.72222222 0.59090909 0.30769231
88  0.030888031 0.44805195 0.22727273 0.33333333 0.72727273 0.23076923
89  0.034749035 0.64285714 0.18181818 0.38888889 0.68181818 0.15384615
90  0.034749035 0.39610390 0.18181818 0.44444444 0.77272727 0.15384615
91  0.034749035 0.42857143 0.18181818 0.33333333 0.77272727 0.15384615
92  0.034749035 0.26623377 0.13636364 0.38888889 0.81818182 0.15384615
93  0.034749035 0.32467532 0.09090909 0.22222222 0.81818182 0.53846154
94  0.034749035 0.25324675 0.00000000 0.16666667 0.81818182 0.61538462
95  0.034749035 0.24675325 0.00000000 0.27777778 0.95454545 0.61538462
96  0.034749035 0.39610390 0.04545455 0.19444444 1.00000000 0.53846154
97  0.034749035 0.12337662 0.04545455 0.30555556 0.95454545 0.53846154
98  0.030888031 0.15584416 0.00000000 0.27777778 0.95454545 0.53846154
99  0.030888031 0.07792208 0.00000000 0.00000000 0.95454545 0.53846154
100 0.027027027 0.07792208 0.00000000 0.05555556 0.86363636 0.53846154
101 0.023166023 0.07142857 0.00000000 0.25000000 0.90909091 0.53846154
    B_PLNT_PRES_OP B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL
2        0.5000000    0.93333333     0.194148936      0.4545455    0.284403670
3        0.5714286    0.93333333     0.199468085      0.3636364    0.284403670
4        0.5714286    0.93333333     0.242021277      0.3636364    0.284403670
5        0.5000000    0.86666667     0.260638298      0.3636364    0.284403670
6        0.5714286    0.86666667     0.289893617      0.3636364    0.238532110
7        0.6428571    0.86666667     0.276595745      0.3636364    0.220183486
8        0.5714286    0.86666667     0.303191489      0.3636364    0.201834862
9        0.7142857    0.80000000     0.348404255      0.2727273    0.174311927
10       0.5714286    0.80000000     0.345744681      0.3636364    0.155963303
11       0.5000000    0.80000000     0.377659574      0.3636364    0.137614679
12       0.5000000    0.80000000     0.375000000      0.4545455    0.100917431
13       0.5000000    0.80000000     0.396276596      0.4545455    0.082568807
14       0.5000000    0.80000000     0.375000000      0.4545455    0.064220183
15       0.5000000    0.73333333     0.375000000      0.4545455    0.045871560
16       0.5000000    0.73333333     0.359042553      0.4545455    0.045871560
17       0.5000000    0.73333333     0.351063830      0.4545455    0.036697248
18       0.5000000    0.73333333     0.327127660      0.4545455    0.018348624
19       0.5000000    0.73333333     0.324468085      0.3636364    0.009174312
20       0.5714286    0.66666667     0.321808511      0.4545455    0.009174312
21       0.5000000    0.66666667     0.297872340      0.3636364    0.009174312
22       0.5000000    0.60000000     0.279255319      0.4545455    0.018348624
23       0.5714286    0.60000000     0.265957447      0.3636364    0.000000000
24       0.5714286    0.53333333     0.247340426      0.3636364    0.000000000
25       0.5000000    0.53333333     0.234042553      0.4545455    0.009174312
26       0.5000000    0.53333333     0.228723404      0.4545455    0.009174312
27       0.5000000    0.46666667     0.228723404      0.4545455    0.027522936
28       0.5000000    0.46666667     0.228723404      0.3636364    0.045871560
29       0.5000000    0.46666667     0.223404255      0.3636364    0.064220183
30       0.4285714    0.40000000     0.226063830      0.4545455    0.082568807
31       0.4285714    0.40000000     0.204787234      0.4545455    0.064220183
32       0.5000000    0.40000000     1.000000000      0.3636364    0.357798165
33       0.5000000    0.33333333     0.319148936      0.4545455    0.568807339
34       0.5000000    0.33333333     0.194148936      0.4545455    0.568807339
35       0.5000000    0.33333333     0.175531915      0.4545455    0.596330275
36       0.5000000    0.33333333     0.172872340      0.3636364    0.605504587
37       0.5000000    0.33333333     0.170212766      0.3636364    0.605504587
38       0.5000000    0.33333333     0.170212766      0.4545455    0.577981651
39       0.5000000    0.33333333     0.164893617      0.4545455    0.577981651
40       0.5000000    0.33333333     0.175531915      0.3636364    0.605504587
41       0.5714286    0.33333333     0.180851064      0.3636364    0.642201835
42       0.5714286    0.33333333     0.196808511      0.3636364    0.669724771
43       0.5714286    0.33333333     0.215425532      0.3636364    0.724770642
44       0.5714286    0.33333333     0.231382979      0.3636364    0.770642202
45       0.5714286    0.33333333     0.226063830      0.4545455    0.752293578
46       0.5000000    0.33333333     0.207446809      0.5454545    0.770642202
47       0.4285714    0.33333333     0.204787234      0.4545455    0.770642202
48       0.4285714    0.40000000     0.156914894      0.5454545    0.761467890
49       0.4285714    0.40000000     0.167553191      0.5454545    0.779816514
50       0.4285714    0.40000000     0.223404255      0.5454545    0.807339450
51       0.4285714    0.40000000     0.228723404      0.5454545    0.798165138
52       0.4285714    0.40000000     0.215425532      0.5454545    0.798165138
53       0.4285714    0.46666667     0.114361702      0.5454545    0.779816514
54       0.4285714    0.46666667     0.186170213      0.5454545    0.798165138
55       0.5000000    0.40000000     0.202127660      0.5454545    0.816513761
56       0.4285714    0.33333333     0.172872340      0.5454545    0.798165138
57       0.5000000    0.26666667     0.164893617      0.5454545    0.779816514
58       0.5714286    0.26666667     0.170212766      0.4545455    0.779816514
59       0.6428571    0.26666667     0.207446809      0.3636364    0.816513761
60       0.7142857    0.26666667     0.202127660      0.2727273    0.816513761
61       0.6428571    0.26666667     0.196808511      0.3636364    0.844036697
62       0.6428571    0.26666667     0.191489362      0.3636364    0.853211009
63       0.6428571    0.26666667     0.148936170      0.3636364    0.844036697
64       0.5714286    0.26666667     0.204787234      0.3636364    0.862385321
65       0.5000000    0.26666667     0.220744681      0.4545455    0.853211009
66       0.4285714    0.20000000     0.226063830      0.5454545    0.871559633
67       0.4285714    0.13333333     0.130319149      0.4545455    0.871559633
68       0.5000000    0.13333333     0.090425532      0.4545455    0.889908257
69       0.5000000    0.06666667     0.061170213      0.4545455    0.899082569
70       0.5000000    0.06666667     0.050531915      0.4545455    0.899082569
71       0.5714286    0.06666667     0.029255319      0.4545455    0.908256881
72       0.3571429    0.00000000     0.023936170      0.6363636    0.917431193
73       0.5714286    0.00000000     0.042553191      0.4545455    0.944954128
74       1.0000000    0.00000000     0.039893617      0.0000000    0.954128440
75       0.7857143    0.00000000     0.026595745      0.1818182    0.963302752
76       0.7142857    0.00000000     0.007978723      0.2727273    0.963302752
77       0.6428571    0.00000000     0.010638298      0.3636364    0.981651376
78       0.4285714    0.00000000     0.021276596      0.5454545    1.000000000
79       0.0000000    0.00000000     0.082446809      1.0000000    0.972477064
80       0.5000000    0.00000000     0.023936170      0.5454545    0.972477064
81       0.5000000    0.00000000     0.000000000      0.4545455    0.972477064
82       0.5000000    0.06666667     0.029255319      0.4545455    0.972477064
83       0.5000000    0.06666667     0.042553191      0.4545455    0.944954128
84       0.5000000    0.06666667     0.055851064      0.5454545    0.935779817
85       0.5000000    0.06666667     0.045212766      0.4545455    0.926605505
86       0.5000000    0.06666667     0.058510638      0.4545455    0.935779817
87       0.5000000    0.06666667     0.087765957      0.4545455    0.926605505
88       0.4285714    0.06666667     0.069148936      0.5454545    0.926605505
89       0.4285714    0.06666667     0.085106383      0.5454545    0.917431193
90       0.5000000    0.06666667     0.119680851      0.5454545    0.889908257
91       0.5714286    0.06666667     0.162234043      0.4545455    0.889908257
92       0.5000000    0.06666667     0.156914894      0.4545455    0.889908257
93       0.5714286    0.06666667     0.159574468      0.4545455    0.880733945
94       0.5714286    0.13333333     0.135638298      0.4545455    0.871559633
95       0.5714286    0.13333333     0.180851064      0.4545455    0.889908257
96       0.5714286    0.13333333     0.188829787      0.4545455    0.880733945
97       0.5714286    0.20000000     0.098404255      0.4545455    0.871559633
98       0.5714286    0.13333333     0.159574468      0.5454545    0.862385321
99       0.5714286    0.13333333     0.154255319      0.4545455    0.862385321
100      0.5000000    0.13333333     0.188829787      0.4545455    0.853211009
101      0.5000000    0.13333333     0.223404255      0.4545455    0.844036697
     past_data
2   0.27272727
3   0.27272727
4   0.27272727
5   0.31818182
6   0.36363636
7   0.36363636
8   0.40909091
9   0.40909091
10  0.45454545
11  0.45454545
12  0.45454545
13  0.45454545
14  0.50000000
15  0.45454545
16  0.50000000
17  0.45454545
18  0.45454545
19  0.36363636
20  0.36363636
21  0.40909091
22  0.40909091
23  0.45454545
24  0.50000000
25  0.50000000
26  0.54545455
27  0.59090909
28  0.63636364
29  0.63636364
30  0.72727273
31  0.72727273
32  0.72727273
33  0.68181818
34  0.72727273
35  0.68181818
36  0.72727273
37  0.72727273
38  0.72727273
39  0.77272727
40  0.77272727
41  0.81818182
42  0.81818182
43  0.81818182
44  0.86363636
45  0.90909091
46  0.90909091
47  0.95454545
48  0.95454545
49  1.00000000
50  0.95454545
51  1.00000000
52  0.95454545
53  0.95454545
54  0.90909091
55  0.81818182
56  0.72727273
57  0.68181818
58  0.63636364
59  0.63636364
60  0.59090909
61  0.63636364
62  0.63636364
63  0.63636364
64  0.59090909
65  0.54545455
66  0.50000000
67  0.50000000
68  0.45454545
69  0.45454545
70  0.40909091
71  0.40909091
72  0.40909091
73  0.36363636
74  0.36363636
75  0.36363636
76  0.40909091
77  0.40909091
78  0.40909091
79  0.45454545
80  0.45454545
81  0.40909091
82  0.45454545
83  0.45454545
84  0.45454545
85  0.45454545
86  0.45454545
87  0.40909091
88  0.31818182
89  0.22727273
90  0.18181818
91  0.18181818
92  0.18181818
93  0.13636364
94  0.09090909
95  0.00000000
96  0.00000000
97  0.04545455
98  0.04545455
99  0.00000000
100 0.00000000
101 0.00000000

$exclude
NULL

$net.result
$net.result[[1]]
           [,1]
2   0.282100609
3   0.310479253
4   0.284879793
5   0.348857683
6   0.378414031
7   0.389837220
8   0.432053297
9   0.430345858
10  0.469426952
11  0.490583339
12  0.451772338
13  0.456309319
14  0.489834611
15  0.447195423
16  0.503215327
17  0.426967322
18  0.432655286
19  0.352049668
20  0.324578429
21  0.407811371
22  0.412739901
23  0.451589754
24  0.522398858
25  0.515704669
26  0.569303015
27  0.635681200
28  0.692073662
29  0.697023105
30  0.778397514
31  0.796445917
32  0.679027216
33  0.709748793
34  0.753610435
35  0.677828659
36  0.761060925
37  0.759626716
38  0.751623811
39  0.784022165
40  0.804374188
41  0.832262230
42  0.829153177
43  0.830498795
44  0.862730628
45  0.884536548
46  0.875397560
47  0.943006582
48  0.928864938
49  0.954466808
50  0.929434794
51  0.946423436
52  0.920718541
53  0.922340919
54  0.894620150
55  0.792270098
56  0.740783255
57  0.668941016
58  0.614590813
59  0.619901676
60  0.578232755
61  0.627494599
62  0.624618837
63  0.645951597
64  0.577349086
65  0.544703457
66  0.466445737
67  0.505189850
68  0.438552747
69  0.463677694
70  0.399735062
71  0.398018366
72  0.383341765
73  0.356081927
74  0.362028466
75  0.378339230
76  0.417399180
77  0.406511304
78  0.407437933
79  0.418718384
80  0.434658796
81  0.399267695
82  0.440184110
83  0.431359613
84  0.416662759
85  0.442055124
86  0.444888383
87  0.355899836
88  0.274008507
89  0.183495988
90  0.126949312
91  0.135473933
92  0.141548317
93  0.103860228
94  0.077035438
95  0.010517201
96  0.009413398
97  0.038137771
98  0.025550601
99  0.025795711
100 0.032908043
101 0.020246278


$weights
$weights[[1]]
$weights[[1]][[1]]
             [,1]
 [1,] -0.63640855
 [2,]  0.11371269
 [3,] -0.09759076
 [4,] -0.29190005
 [5,] -0.40985493
 [6,] -0.04266759
 [7,] -0.62924973
 [8,] -0.17574303
 [9,] -0.46362546
[10,] -0.83692393
[11,] -0.06710392
[12,]  3.64047567

$weights[[1]][[2]]
           [,1]
[1,] -0.1332827
[2,]  1.2744104



$generalized.weights
$generalized.weights[[1]]
         [,1]       [,2]       [,3]       [,4]        [,5]       [,6]
2   0.1572128 -0.1349235 -0.4035647 -0.5666425 -0.05898982 -0.8699654
3   0.1536339 -0.1318520 -0.3943776 -0.5537430 -0.05764693 -0.8501608
4   0.1568207 -0.1345870 -0.4025583 -0.5652294 -0.05884271 -0.8677959
5   0.1500452 -0.1287721 -0.3851655 -0.5408083 -0.05630037 -0.8303023
6   0.1480489 -0.1270589 -0.3800411 -0.5336132 -0.05555133 -0.8192557
7   0.1474279 -0.1265259 -0.3784469 -0.5313748 -0.05531831 -0.8158190
8   0.1457650 -0.1250987 -0.3741781 -0.5253810 -0.05469433 -0.8066168
9   0.1458143 -0.1251410 -0.3743047 -0.5255587 -0.05471283 -0.8068896
10  0.1450342 -0.1244716 -0.3723022 -0.5227471 -0.05442013 -0.8025729
11  0.1449045 -0.1243603 -0.3719694 -0.5222797 -0.05437147 -0.8018554
12  0.1452978 -0.1246978 -0.3729788 -0.5236971 -0.05451902 -0.8040314
13  0.1452163 -0.1246279 -0.3727697 -0.5234035 -0.05448846 -0.8035807
14  0.1449057 -0.1243613 -0.3719724 -0.5222839 -0.05437191 -0.8018618
15  0.1453897 -0.1247767 -0.3732148 -0.5240284 -0.05455351 -0.8045401
16  0.1449224 -0.1243757 -0.3720154 -0.5223443 -0.05437820 -0.8019546
17  0.1459161 -0.1252284 -0.3745661 -0.5259258 -0.05475104 -0.8074531
18  0.1457479 -0.1250841 -0.3741344 -0.5253196 -0.05468793 -0.8065225
19  0.1498005 -0.1285621 -0.3845372 -0.5399262 -0.05620854 -0.8289479
20  0.1521672 -0.1305933 -0.3906128 -0.5484568 -0.05709661 -0.8420450
21  0.1466035 -0.1258184 -0.3763306 -0.5284034 -0.05500897 -0.8112570
22  0.1464084 -0.1256509 -0.3758298 -0.5277001 -0.05493575 -0.8101772
23  0.1453012 -0.1247007 -0.3729877 -0.5237096 -0.05452033 -0.8040507
24  0.1450859 -0.1245160 -0.3724351 -0.5229337 -0.05443955 -0.8028594
25  0.1450101 -0.1244509 -0.3722405 -0.5226604 -0.05441110 -0.8024398
26  0.1461997 -0.1254718 -0.3752941 -0.5269480 -0.05485746 -0.8090225
27  0.1497476 -0.1285167 -0.3844015 -0.5397356 -0.05618870 -0.8286553
28  0.1551817 -0.1331804 -0.3983509 -0.5593219 -0.05822771 -0.8587261
29  0.1557996 -0.1337107 -0.3999369 -0.5615488 -0.05845954 -0.8621451
30  0.1710605 -0.1468079 -0.4391117 -0.6165538 -0.06418580 -0.9465943
31  0.1763754 -0.1513693 -0.4527550 -0.6357103 -0.06618007 -0.9760052
32  0.1536747 -0.1318871 -0.3944824 -0.5538901 -0.05766225 -0.8503868
33  0.1575156 -0.1351834 -0.4043420 -0.5677339 -0.05910344 -0.8716412
34  0.1651554 -0.1417400 -0.4239533 -0.5952700 -0.06197006 -0.9139172
35  0.1535446 -0.1317754 -0.3941485 -0.5534213 -0.05761344 -0.8496671
36  0.1667851 -0.1431387 -0.4281368 -0.6011441 -0.06258158 -0.9229357
37  0.1664624 -0.1428618 -0.4273085 -0.5999810 -0.06246049 -0.9211500
38  0.1647397 -0.1413833 -0.4228862 -0.5937718 -0.06181409 -0.9116170
39  0.1726125 -0.1481399 -0.4430958 -0.6221479 -0.06476816 -0.9551828
40  0.1790488 -0.1536637 -0.4596176 -0.6453460 -0.06718318 -0.9907989
41  0.1906121 -0.1635875 -0.4893005 -0.6870236 -0.07152199 -1.0547864
42  0.1891250 -0.1623113 -0.4854831 -0.6816636 -0.07096399 -1.0465572
43  0.1897616 -0.1628576 -0.4871172 -0.6839581 -0.07120286 -1.0500800
44  0.2089203 -0.1793000 -0.5362975 -0.7530118 -0.07839164 -1.1560981
45  0.2281664 -0.1958174 -0.5857022 -0.8223806 -0.08561321 -1.2625999
46  0.2192613 -0.1881750 -0.5628431 -0.7902842 -0.08227185 -1.2133223
47  0.3540136 -0.3038224 -0.9087517 -1.2759722 -0.13283397 -1.9589984
48  0.3044542 -0.2612894 -0.7815329 -1.0973452 -0.11423816 -1.6847526
49  0.4168626 -0.3577607 -1.0700847 -1.5024989 -0.15641633 -2.3067846
50  0.3060654 -0.2626721 -0.7856687 -1.1031522 -0.11484269 -1.6936682
51  0.3699306 -0.3174827 -0.9496106 -1.3333420 -0.13880639 -2.0470781
52  0.2839696 -0.2437090 -0.7289489 -1.0235124 -0.10655186 -1.5713972
53  0.2877041 -0.2469141 -0.7385354 -1.0369727 -0.10795313 -1.5920628
54  0.2398201 -0.2058190 -0.6156174 -0.8643844 -0.08998597 -1.3270882
55  0.1750559 -0.1502369 -0.4493678 -0.6309544 -0.06568495 -0.9687034
56  0.1626011 -0.1395479 -0.4173964 -0.5860635 -0.06101162 -0.8997825
57  0.1526215 -0.1309831 -0.3917788 -0.5500940 -0.05726705 -0.8445585
58  0.1483366 -0.1273058 -0.3807796 -0.5346501 -0.05565928 -0.8208476
59  0.1486648 -0.1275875 -0.3816221 -0.5358330 -0.05578243 -0.8226637
60  0.1465331 -0.1257580 -0.3761499 -0.5281496 -0.05498256 -0.8108675
61  0.1491652 -0.1280169 -0.3829066 -0.5376366 -0.05597019 -0.8254328
62  0.1489713 -0.1278505 -0.3824088 -0.5369377 -0.05589742 -0.8243597
63  0.1505444 -0.1292006 -0.3864470 -0.5426077 -0.05648770 -0.8330649
64  0.1464983 -0.1257281 -0.3760606 -0.5280241 -0.05496949 -0.8106748
65  0.1454860 -0.1248593 -0.3734621 -0.5243756 -0.05458966 -0.8050732
66  0.1450687 -0.1245012 -0.3723907 -0.5228714 -0.05443306 -0.8027637
67  0.1449317 -0.1243836 -0.3720391 -0.5223776 -0.05438166 -0.8020056
68  0.1455903 -0.1249489 -0.3737298 -0.5247516 -0.05462881 -0.8056504
69  0.1451043 -0.1245317 -0.3724822 -0.5229998 -0.05444644 -0.8029609
70  0.1469516 -0.1261171 -0.3772242 -0.5296580 -0.05513958 -0.8131833
71  0.1470302 -0.1261846 -0.3774261 -0.5299414 -0.05516909 -0.8136184
72  0.1477714 -0.1268207 -0.3793287 -0.5326129 -0.05544720 -0.8177199
73  0.1495019 -0.1283058 -0.3837707 -0.5388499 -0.05609650 -0.8272956
74  0.1490824 -0.1279459 -0.3826941 -0.5373382 -0.05593912 -0.8249746
75  0.1480533 -0.1270626 -0.3800522 -0.5336288 -0.05555296 -0.8192796
76  0.1462357 -0.1255027 -0.3753865 -0.5270777 -0.05487096 -0.8092217
77  0.1466571 -0.1258644 -0.3764683 -0.5285967 -0.05502909 -0.8115538
78  0.1466188 -0.1258315 -0.3763699 -0.5284586 -0.05501471 -0.8113417
79  0.1461888 -0.1254625 -0.3752662 -0.5269088 -0.05485338 -0.8089625
80  0.1456925 -0.1250365 -0.3739921 -0.5251198 -0.05466713 -0.8062157
81  0.1469728 -0.1261354 -0.3772788 -0.5297346 -0.05514756 -0.8133008
82  0.1455497 -0.1249140 -0.3736256 -0.5246052 -0.05461357 -0.8054257
83  0.1457848 -0.1251158 -0.3742291 -0.5254526 -0.05470178 -0.8067267
84  0.1462622 -0.1255255 -0.3754546 -0.5271733 -0.05488092 -0.8093685
85  0.1455047 -0.1248754 -0.3735101 -0.5244430 -0.05459668 -0.8051767
86  0.1454398 -0.1248196 -0.3733433 -0.5242089 -0.05457230 -0.8048172
87  0.1495151 -0.1283172 -0.3838047 -0.5388976 -0.05610147 -0.8273688
88  0.1584119 -0.1359526 -0.4066428 -0.5709645 -0.05943975 -0.8766010
89  0.1806630 -0.1550490 -0.4637612 -0.6511640 -0.06778886 -0.9997312
90  0.2124735 -0.1823495 -0.5454187 -0.7658189 -0.07972490 -1.1757607
91  0.2059081 -0.1767149 -0.5285653 -0.7421550 -0.07726140 -1.1394297
92  0.2017261 -0.1731258 -0.5178301 -0.7270818 -0.07569221 -1.1162877
93  0.2358172 -0.2023836 -0.6053419 -0.8499565 -0.08848397 -1.3049371
94  0.2808536 -0.2410348 -0.7209501 -1.0122813 -0.10538265 -1.5541541
95  1.3939997 -1.1963615 -3.5783920 -5.0243966 -0.52306039 -7.7139494
96  1.5452883 -1.3262008 -3.9667494 -5.5696867 -0.57982734 -8.5511326
97  0.4599023 -0.3946984 -1.1805675 -1.6576270 -0.17256580 -2.5449525
98  0.6350095 -0.5449793 -1.6300671 -2.2887665 -0.23827003 -3.5139402
99  0.6299664 -0.5406512 -1.6171214 -2.2705894 -0.23637772 -3.4860330
100 0.5163716 -0.4431616 -1.3255240 -1.8611595 -0.19375438 -2.8574357
101 0.7740828 -0.6643351 -1.9870677 -2.7900286 -0.29045347 -4.2835272
          [,7]       [,8]       [,9]       [,10]     [,11]
2   -0.2429725 -0.6409826  -1.157084 -0.09277413  5.033118
3   -0.2374413 -0.6263908  -1.130743 -0.09066214  4.918540
4   -0.2423665 -0.6393841  -1.154199 -0.09254277  5.020566
5   -0.2318950 -0.6117591  -1.104331 -0.08854440  4.803650
6   -0.2288097 -0.6036201  -1.089638 -0.08736638  4.739740
7   -0.2278499 -0.6010880  -1.085068 -0.08699989  4.719858
8   -0.2252798 -0.5943079  -1.072828 -0.08601855  4.666619
9   -0.2253560 -0.5945089  -1.073191 -0.08604765  4.668198
10  -0.2241504 -0.5913284  -1.067450 -0.08558731  4.643223
11  -0.2239500 -0.5907997  -1.066495 -0.08551079  4.639072
12  -0.2245578 -0.5924030  -1.069390 -0.08574285  4.651662
13  -0.2244319 -0.5920709  -1.068790 -0.08569478  4.649054
14  -0.2239518 -0.5908045  -1.066504 -0.08551148  4.639110
15  -0.2246998 -0.5927778  -1.070066 -0.08579709  4.654604
16  -0.2239777 -0.5908728  -1.066627 -0.08552137  4.639646
17  -0.2255134 -0.5949241  -1.073941 -0.08610774  4.671458
18  -0.2252535 -0.5942384  -1.072703 -0.08600850  4.666073
19  -0.2315167 -0.6107613  -1.102529 -0.08839997  4.795814
20  -0.2351746 -0.6204111  -1.119949 -0.08979666  4.871586
21  -0.2265758 -0.5977267  -1.079000 -0.08651339  4.693465
22  -0.2262742 -0.5969312  -1.077564 -0.08639824  4.687218
23  -0.2245631 -0.5924172  -1.069415 -0.08574490  4.651773
24  -0.2242304 -0.5915394  -1.067831 -0.08561786  4.644881
25  -0.2241133 -0.5912304  -1.067273 -0.08557312  4.642454
26  -0.2259517 -0.5960804  -1.076028 -0.08627510  4.680537
27  -0.2314350 -0.6105457  -1.102140 -0.08836877  4.794121
28  -0.2398334 -0.6327016  -1.142135 -0.09157555  4.968094
29  -0.2407883 -0.6352207  -1.146683 -0.09194016  4.987874
30  -0.2643741 -0.6974420  -1.259003 -0.10094592  5.476448
31  -0.2725883 -0.7191118  -1.298121 -0.10408233  5.646603
32  -0.2375044 -0.6265572  -1.131044 -0.09068624  4.919847
33  -0.2434405 -0.6422173  -1.159313 -0.09295283  5.042813
34  -0.2552478 -0.6733659  -1.215542 -0.09746120  5.287397
35  -0.2373033 -0.6260269  -1.130087 -0.09060948  4.915683
36  -0.2577665 -0.6800106  -1.227536 -0.09842294  5.339573
37  -0.2572678 -0.6786949  -1.225161 -0.09823251  5.329242
38  -0.2546053 -0.6716711  -1.212482 -0.09721590  5.274090
39  -0.2667728 -0.7037699  -1.270426 -0.10186180  5.526136
40  -0.2767200 -0.7300116  -1.317797 -0.10565995  5.732191
41  -0.2945911 -0.7771570  -1.402902 -0.11248365  6.102385
42  -0.2922928 -0.7710938  -1.391957 -0.11160608  6.054776
43  -0.2932766 -0.7736893  -1.396643 -0.11198175  6.075157
44  -0.3228864 -0.8518025  -1.537650 -0.12328764  6.688516
45  -0.3526313 -0.9302721  -1.679302 -0.13464512  7.304674
46  -0.3388685 -0.8939648  -1.613761 -0.12939011  7.019583
47  -0.5471283 -1.4433722  -2.605536 -0.20890987 11.333634
48  -0.4705342 -1.2413104  -2.240779 -0.17966398  9.747006
49  -0.6442614 -1.6996178  -3.068103 -0.24599819 13.345724
50  -0.4730242 -1.2478792  -2.252637 -0.18061474  9.798586
51  -0.5717280 -1.5082685  -2.722685 -0.21830279 11.843212
52  -0.4388752 -1.1577911  -2.090013 -0.16757562  9.091197
53  -0.4446469 -1.1730173  -2.117499 -0.16977943  9.210756
54  -0.3706422 -0.9777864  -1.765073 -0.14152223  7.677766
55  -0.2705490 -0.7137318  -1.288409 -0.10330366  5.604359
56  -0.2513001 -0.6629515  -1.196742 -0.09595385  5.205622
57  -0.2358766 -0.6222630  -1.123292 -0.09006470  4.886128
58  -0.2292544 -0.6047930  -1.091756 -0.08753615  4.748950
59  -0.2297616 -0.6061311  -1.094171 -0.08772982  4.759457
60  -0.2264670 -0.5974397  -1.078482 -0.08647185  4.691211
61  -0.2305349 -0.6081713  -1.097854 -0.08802511  4.775477
62  -0.2302352 -0.6073807  -1.096427 -0.08791067  4.769269
63  -0.2326665 -0.6137946  -1.108005 -0.08883901  4.819633
64  -0.2264132 -0.5972978  -1.078226 -0.08645130  4.690096
65  -0.2248487 -0.5931706  -1.070775 -0.08585394  4.657689
66  -0.2242037 -0.5914690  -1.067704 -0.08560766  4.644327
67  -0.2239920 -0.5909104  -1.066695 -0.08552681  4.639941
68  -0.2250099 -0.5935959  -1.071543 -0.08591550  4.661028
69  -0.2242588 -0.5916143  -1.067966 -0.08562869  4.645468
70  -0.2271138 -0.5991460  -1.081562 -0.08671881  4.704609
71  -0.2272353 -0.5994666  -1.082141 -0.08676521  4.707126
72  -0.2283808 -0.6024885  -1.087596 -0.08720260  4.730855
73  -0.2310552 -0.6095438  -1.100332 -0.08822377  4.786255
74  -0.2304070 -0.6078338  -1.097245 -0.08797625  4.772827
75  -0.2288164 -0.6036377  -1.089670 -0.08736893  4.739879
76  -0.2260074 -0.5962271  -1.076293 -0.08629634  4.681689
77  -0.2266587 -0.5979454  -1.079395 -0.08654504  4.695182
78  -0.2265995 -0.5977892  -1.079113 -0.08652243  4.693955
79  -0.2259350 -0.5960361  -1.075948 -0.08626870  4.680190
80  -0.2251678 -0.5940124  -1.072295 -0.08597578  4.664299
81  -0.2271466 -0.5992326  -1.081718 -0.08673135  4.705289
82  -0.2249472 -0.5934303  -1.071244 -0.08589153  4.659728
83  -0.2253105 -0.5943889  -1.072974 -0.08603027  4.667255
84  -0.2260484 -0.5963353  -1.076488 -0.08631200  4.682539
85  -0.2248776 -0.5932468  -1.070913 -0.08586498  4.658287
86  -0.2247772 -0.5929820  -1.070435 -0.08582664  4.656208
87  -0.2310757 -0.6095978  -1.100429 -0.08823157  4.786678
88  -0.2448257 -0.6458716  -1.165910 -0.09348175  5.071507
89  -0.2792147 -0.7365929  -1.329677 -0.10661250  5.783868
90  -0.3283780 -0.8662897  -1.563802 -0.12538449  6.802272
91  -0.3182311 -0.8395214  -1.515481 -0.12151010  6.592082
92  -0.3117678 -0.8224706  -1.484701 -0.11904222  6.458196
93  -0.3644556 -0.9614657  -1.735612 -0.13916001  7.549613
94  -0.4340594 -1.1450866  -2.067079 -0.16573680  8.991438
95  -2.1544274 -5.6835675 -10.259820 -0.82262454 44.628458
96  -2.3882441 -6.3003964 -11.373302 -0.91190273 49.471917
97  -0.7107793 -1.8750978  -3.384875 -0.27139669 14.723626
98  -0.9814076 -2.5890391  -4.673662 -0.37473067 20.329629
99  -0.9736134 -2.5684773  -4.636545 -0.37175461 20.168174
100 -0.7980526 -2.1053326  -3.800488 -0.30472027 16.531474
101 -1.1963454 -3.1560637  -5.697239 -0.45680032 24.782015


$startweights
$startweights[[1]]
$startweights[[1]][[1]]
             [,1]
 [1,] -0.47815006
 [2,]  0.41794156
 [3,]  1.35867955
 [4,] -0.10278773
 [5,]  0.38767161
 [6,] -0.05380504
 [7,] -1.37705956
 [8,] -0.41499456
 [9,] -0.39428995
[10,] -0.05931340
[11,]  1.10002537
[12,]  0.76317575

$startweights[[1]][[2]]
           [,1]
[1,] -0.1645236
[2,] -0.2533617



$result.matrix
                                    [,1]
error                         0.07078559
reached.threshold             0.00974249
steps                       936.00000000
Intercept.to.1layhid1        -0.63640855
B_CL2_VAL.to.1layhid1         0.11371269
B_TURB_VAL.to.1layhid1       -0.09759076
B_COND_VAL.to.1layhid1       -0.29190005
B_TEMP_VAL.to.1layhid1       -0.40985493
B_PRES_OP.to.1layhid1        -0.04266759
B_PLNT_PRES_OP.to.1layhid1   -0.62924973
B_PLNT_PH_VAL.to.1layhid1    -0.17574303
B_PLNT_TURB_VAL.to.1layhid1  -0.46362546
B_PLNT_FLOW_OP.to.1layhid1   -0.83692393
B_PLNT_CL2_VAL.to.1layhid1   -0.06710392
past_data.to.1layhid1         3.64047567
Intercept.to.B_PH_VAL        -0.13328265
1layhid1.to.B_PH_VAL          1.27441035

attr(,"class")
[1] "nn"

$modelList$model4
$call
neuralnet(formula = nn_input, data = model_input, hidden = hidden, 
    threshold = threshold, stepmax = stepmax, rep = rep, startweights = unlist(control))

$response
    B_COND_VAL
2   0.63888889
3   0.33333333
4   0.52777778
5   0.50000000
6   0.55555556
7   0.22222222
8   0.41666667
9   0.22222222
10  0.41666667
11  0.25000000
12  0.38888889
13  0.11111111
14  0.36111111
15  0.16666667
16  0.36111111
17  0.47222222
18  0.55555556
19  0.47222222
20  0.50000000
21  0.52777778
22  0.44444444
23  0.58333333
24  0.50000000
25  0.55555556
26  0.50000000
27  0.47222222
28  0.47222222
29  0.47222222
30  0.55555556
31  0.36111111
32  0.58333333
33  0.41666667
34  0.61111111
35  0.66666667
36  0.50000000
37  0.52777778
38  0.33333333
39  0.63888889
40  0.50000000
41  0.50000000
42  0.55555556
43  0.58333333
44  0.63888889
45  0.58333333
46  0.69444444
47  0.47222222
48  0.55555556
49  0.61111111
50  0.50000000
51  0.66666667
52  0.58333333
53  0.83333333
54  0.61111111
55  0.88888889
56  0.63888889
57  0.83333333
58  0.77777778
59  0.83333333
60  0.75000000
61  0.72222222
62  0.75000000
63  0.69444444
64  0.86111111
65  0.69444444
66  0.80555556
67  0.80555556
68  0.88888889
69  0.77777778
70  0.94444444
71  0.77777778
72  1.00000000
73  0.66666667
74  0.94444444
75  0.72222222
76  0.94444444
77  0.75000000
78  0.83333333
79  0.69444444
80  0.80555556
81  0.72222222
82  0.69444444
83  0.66666667
84  0.52777778
85  0.58333333
86  0.47222222
87  0.72222222
88  0.33333333
89  0.38888889
90  0.44444444
91  0.33333333
92  0.38888889
93  0.22222222
94  0.16666667
95  0.27777778
96  0.19444444
97  0.30555556
98  0.27777778
99  0.00000000
100 0.05555556
101 0.25000000

$covariate
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_TEMP_VAL  B_PRES_OP B_PLNT_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.00000000 0.61538462      0.5000000
3   0.996138996 0.34415584 0.27272727 0.00000000 0.61538462      0.5714286
4   0.988416988 0.24675325 0.31818182 0.04545455 0.69230769      0.5714286
5   0.984555985 0.29220779 0.36363636 0.04545455 0.61538462      0.5000000
6   0.984555985 0.22077922 0.36363636 0.04545455 0.69230769      0.5714286
7   0.949806950 0.22077922 0.40909091 0.09090909 0.69230769      0.6428571
8   0.972972973 0.12987013 0.40909091 0.13636364 0.69230769      0.5714286
9   0.969111969 0.12987013 0.45454545 0.22727273 0.76923077      0.7142857
10  0.961389961 0.16883117 0.45454545 0.22727273 0.69230769      0.5714286
11  0.965250965 0.18831169 0.45454545 0.27272727 0.53846154      0.5000000
12  0.949806950 0.29870130 0.45454545 0.27272727 0.46153846      0.5000000
13  0.961389961 0.52597403 0.50000000 0.36363636 0.46153846      0.5000000
14  0.961389961 0.50649351 0.45454545 0.36363636 0.46153846      0.5000000
15  0.961389961 0.51948052 0.50000000 0.45454545 0.46153846      0.5000000
16  0.961389961 0.31818182 0.45454545 0.36363636 0.38461538      0.5000000
17  0.976833977 0.43506494 0.45454545 0.45454545 0.38461538      0.5000000
18  0.980694981 0.51298701 0.36363636 0.36363636 0.38461538      0.5000000
19  0.980694981 0.50000000 0.36363636 0.45454545 0.30769231      0.5000000
20  0.980694981 0.44805195 0.40909091 0.40909091 0.30769231      0.5714286
21  0.972972973 0.43506494 0.40909091 0.45454545 0.23076923      0.5000000
22  0.976833977 0.33116883 0.45454545 0.36363636 0.23076923      0.5000000
23  0.980694981 0.19480519 0.50000000 0.45454545 0.61538462      0.5714286
24  0.976833977 0.25324675 0.50000000 0.40909091 0.61538462      0.5714286
25  0.969111969 0.06493506 0.54545455 0.40909091 0.53846154      0.5000000
26  0.969111969 0.22077922 0.59090909 0.40909091 0.53846154      0.5000000
27  0.965250965 0.10389610 0.63636364 0.36363636 0.53846154      0.5000000
28  0.961389961 0.05194805 0.63636364 0.50000000 0.53846154      0.5000000
29  0.961389961 0.30519481 0.72727273 0.40909091 0.46153846      0.5000000
30  0.961389961 0.00000000 0.72727273 0.45454545 0.46153846      0.4285714
31  0.961389961 0.16233766 0.72727273 0.40909091 0.46153846      0.4285714
32  0.953667954 0.18181818 0.68181818 0.40909091 0.53846154      0.5000000
33  0.957528958 0.14285714 0.72727273 0.45454545 0.53846154      0.5000000
34  0.667953668 0.46753247 0.68181818 0.31818182 0.53846154      0.5000000
35  0.019305019 0.47402597 0.72727273 0.36363636 0.53846154      0.5000000
36  0.015444015 0.61038961 0.72727273 0.31818182 0.53846154      0.5000000
37  0.030888031 0.42207792 0.72727273 0.36363636 0.53846154      0.5000000
38  0.023166023 0.53896104 0.77272727 0.36363636 0.53846154      0.5000000
39  0.003861004 0.48051948 0.77272727 0.27272727 0.46153846      0.5000000
40  0.023166023 0.57792208 0.81818182 0.31818182 0.53846154      0.5000000
41  0.000000000 0.74025974 0.81818182 0.27272727 0.53846154      0.5714286
42  0.019305019 0.60389610 0.81818182 0.27272727 0.61538462      0.5714286
43  0.023166023 0.56493506 0.86363636 0.22727273 0.53846154      0.5714286
44  0.023166023 0.37012987 0.90909091 0.27272727 0.46153846      0.5714286
45  0.023166023 0.62337662 0.90909091 0.22727273 0.46153846      0.5714286
46  0.023166023 0.53246753 0.95454545 0.22727273 0.38461538      0.5000000
47  0.019305019 0.34415584 0.95454545 0.27272727 0.23076923      0.4285714
48  0.023166023 0.50000000 1.00000000 0.22727273 0.15384615      0.4285714
49  0.023166023 0.21428571 0.95454545 0.27272727 0.15384615      0.4285714
50  0.023166023 0.28571429 1.00000000 0.22727273 0.15384615      0.4285714
51  0.023166023 0.25324675 0.95454545 0.27272727 0.15384615      0.4285714
52  0.019305019 0.38311688 0.95454545 0.27272727 0.15384615      0.4285714
53  0.023166023 0.37012987 0.90909091 0.18181818 0.00000000      0.4285714
54  0.023166023 0.48051948 0.81818182 0.18181818 0.00000000      0.4285714
55  0.019305019 0.77272727 0.72727273 0.09090909 0.15384615      0.5000000
56  0.019305019 0.70129870 0.68181818 0.13636364 0.07692308      0.4285714
57  0.023166023 0.79870130 0.63636364 0.09090909 0.30769231      0.5000000
58  0.023166023 0.91558442 0.63636364 0.18181818 0.53846154      0.5714286
59  0.019305019 1.00000000 0.59090909 0.09090909 0.69230769      0.6428571
60  0.023166023 0.82467532 0.63636364 0.18181818 0.84615385      0.7142857
61  0.023166023 0.85714286 0.63636364 0.13636364 0.84615385      0.6428571
62  0.019305019 0.72727273 0.63636364 0.18181818 0.76923077      0.6428571
63  0.023166023 0.80519481 0.59090909 0.09090909 0.69230769      0.6428571
64  0.023166023 0.87662338 0.54545455 0.13636364 0.69230769      0.5714286
65  0.023166023 0.79870130 0.50000000 0.04545455 0.53846154      0.5000000
66  0.019305019 0.70129870 0.50000000 0.13636364 0.46153846      0.4285714
67  0.023166023 0.77922078 0.45454545 0.13636364 0.53846154      0.4285714
68  0.023166023 0.70129870 0.45454545 0.13636364 0.53846154      0.5000000
69  0.023166023 0.62987013 0.40909091 0.09090909 0.61538462      0.5000000
70  0.023166023 0.57142857 0.40909091 0.09090909 0.61538462      0.5000000
71  0.023166023 0.72727273 0.40909091 0.09090909 0.69230769      0.5714286
72  0.027027027 0.61688312 0.36363636 0.09090909 0.46153846      0.3571429
73  0.027027027 0.80519481 0.36363636 0.09090909 0.69230769      0.5714286
74  0.027027027 0.77922078 0.36363636 0.09090909 1.00000000      1.0000000
75  0.027027027 0.49350649 0.40909091 0.18181818 0.76923077      0.7857143
76  0.027027027 0.38311688 0.40909091 0.09090909 0.76923077      0.7142857
77  0.027027027 0.62987013 0.40909091 0.18181818 0.69230769      0.6428571
78  0.027027027 0.55844156 0.45454545 0.09090909 0.53846154      0.4285714
79  0.027027027 0.45454545 0.45454545 0.22727273 0.23076923      0.0000000
80  0.027027027 0.61038961 0.40909091 0.18181818 0.53846154      0.5000000
81  0.030888031 0.64935065 0.45454545 0.31818182 0.53846154      0.5000000
82  0.027027027 0.82467532 0.45454545 0.31818182 0.53846154      0.5000000
83  0.027027027 0.57792208 0.45454545 0.45454545 0.53846154      0.5000000
84  0.023166023 0.85714286 0.45454545 0.40909091 0.46153846      0.5000000
85  0.011583012 0.33766234 0.45454545 0.50000000 0.38461538      0.5000000
86  0.023166023 0.33116883 0.40909091 0.54545455 0.38461538      0.5000000
87  0.030888031 0.55194805 0.31818182 0.59090909 0.30769231      0.5000000
88  0.030888031 0.44805195 0.22727273 0.72727273 0.23076923      0.4285714
89  0.034749035 0.64285714 0.18181818 0.68181818 0.15384615      0.4285714
90  0.034749035 0.39610390 0.18181818 0.77272727 0.15384615      0.5000000
91  0.034749035 0.42857143 0.18181818 0.77272727 0.15384615      0.5714286
92  0.034749035 0.26623377 0.13636364 0.81818182 0.15384615      0.5000000
93  0.034749035 0.32467532 0.09090909 0.81818182 0.53846154      0.5714286
94  0.034749035 0.25324675 0.00000000 0.81818182 0.61538462      0.5714286
95  0.034749035 0.24675325 0.00000000 0.95454545 0.61538462      0.5714286
96  0.034749035 0.39610390 0.04545455 1.00000000 0.53846154      0.5714286
97  0.034749035 0.12337662 0.04545455 0.95454545 0.53846154      0.5714286
98  0.030888031 0.15584416 0.00000000 0.95454545 0.53846154      0.5714286
99  0.030888031 0.07792208 0.00000000 0.95454545 0.53846154      0.5714286
100 0.027027027 0.07792208 0.00000000 0.86363636 0.53846154      0.5000000
101 0.023166023 0.07142857 0.00000000 0.90909091 0.53846154      0.5000000
    B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL  past_data
2      0.93333333     0.194148936      0.4545455    0.284403670 0.36111111
3      0.93333333     0.199468085      0.3636364    0.284403670 0.63888889
4      0.93333333     0.242021277      0.3636364    0.284403670 0.33333333
5      0.86666667     0.260638298      0.3636364    0.284403670 0.52777778
6      0.86666667     0.289893617      0.3636364    0.238532110 0.50000000
7      0.86666667     0.276595745      0.3636364    0.220183486 0.55555556
8      0.86666667     0.303191489      0.3636364    0.201834862 0.22222222
9      0.80000000     0.348404255      0.2727273    0.174311927 0.41666667
10     0.80000000     0.345744681      0.3636364    0.155963303 0.22222222
11     0.80000000     0.377659574      0.3636364    0.137614679 0.41666667
12     0.80000000     0.375000000      0.4545455    0.100917431 0.25000000
13     0.80000000     0.396276596      0.4545455    0.082568807 0.38888889
14     0.80000000     0.375000000      0.4545455    0.064220183 0.11111111
15     0.73333333     0.375000000      0.4545455    0.045871560 0.36111111
16     0.73333333     0.359042553      0.4545455    0.045871560 0.16666667
17     0.73333333     0.351063830      0.4545455    0.036697248 0.36111111
18     0.73333333     0.327127660      0.4545455    0.018348624 0.47222222
19     0.73333333     0.324468085      0.3636364    0.009174312 0.55555556
20     0.66666667     0.321808511      0.4545455    0.009174312 0.47222222
21     0.66666667     0.297872340      0.3636364    0.009174312 0.50000000
22     0.60000000     0.279255319      0.4545455    0.018348624 0.52777778
23     0.60000000     0.265957447      0.3636364    0.000000000 0.44444444
24     0.53333333     0.247340426      0.3636364    0.000000000 0.58333333
25     0.53333333     0.234042553      0.4545455    0.009174312 0.50000000
26     0.53333333     0.228723404      0.4545455    0.009174312 0.55555556
27     0.46666667     0.228723404      0.4545455    0.027522936 0.50000000
28     0.46666667     0.228723404      0.3636364    0.045871560 0.47222222
29     0.46666667     0.223404255      0.3636364    0.064220183 0.47222222
30     0.40000000     0.226063830      0.4545455    0.082568807 0.47222222
31     0.40000000     0.204787234      0.4545455    0.064220183 0.55555556
32     0.40000000     1.000000000      0.3636364    0.357798165 0.36111111
33     0.33333333     0.319148936      0.4545455    0.568807339 0.58333333
34     0.33333333     0.194148936      0.4545455    0.568807339 0.41666667
35     0.33333333     0.175531915      0.4545455    0.596330275 0.61111111
36     0.33333333     0.172872340      0.3636364    0.605504587 0.66666667
37     0.33333333     0.170212766      0.3636364    0.605504587 0.50000000
38     0.33333333     0.170212766      0.4545455    0.577981651 0.52777778
39     0.33333333     0.164893617      0.4545455    0.577981651 0.33333333
40     0.33333333     0.175531915      0.3636364    0.605504587 0.63888889
41     0.33333333     0.180851064      0.3636364    0.642201835 0.50000000
42     0.33333333     0.196808511      0.3636364    0.669724771 0.50000000
43     0.33333333     0.215425532      0.3636364    0.724770642 0.55555556
44     0.33333333     0.231382979      0.3636364    0.770642202 0.58333333
45     0.33333333     0.226063830      0.4545455    0.752293578 0.63888889
46     0.33333333     0.207446809      0.5454545    0.770642202 0.58333333
47     0.33333333     0.204787234      0.4545455    0.770642202 0.69444444
48     0.40000000     0.156914894      0.5454545    0.761467890 0.47222222
49     0.40000000     0.167553191      0.5454545    0.779816514 0.55555556
50     0.40000000     0.223404255      0.5454545    0.807339450 0.61111111
51     0.40000000     0.228723404      0.5454545    0.798165138 0.50000000
52     0.40000000     0.215425532      0.5454545    0.798165138 0.66666667
53     0.46666667     0.114361702      0.5454545    0.779816514 0.58333333
54     0.46666667     0.186170213      0.5454545    0.798165138 0.83333333
55     0.40000000     0.202127660      0.5454545    0.816513761 0.61111111
56     0.33333333     0.172872340      0.5454545    0.798165138 0.88888889
57     0.26666667     0.164893617      0.5454545    0.779816514 0.63888889
58     0.26666667     0.170212766      0.4545455    0.779816514 0.83333333
59     0.26666667     0.207446809      0.3636364    0.816513761 0.77777778
60     0.26666667     0.202127660      0.2727273    0.816513761 0.83333333
61     0.26666667     0.196808511      0.3636364    0.844036697 0.75000000
62     0.26666667     0.191489362      0.3636364    0.853211009 0.72222222
63     0.26666667     0.148936170      0.3636364    0.844036697 0.75000000
64     0.26666667     0.204787234      0.3636364    0.862385321 0.69444444
65     0.26666667     0.220744681      0.4545455    0.853211009 0.86111111
66     0.20000000     0.226063830      0.5454545    0.871559633 0.69444444
67     0.13333333     0.130319149      0.4545455    0.871559633 0.80555556
68     0.13333333     0.090425532      0.4545455    0.889908257 0.80555556
69     0.06666667     0.061170213      0.4545455    0.899082569 0.88888889
70     0.06666667     0.050531915      0.4545455    0.899082569 0.77777778
71     0.06666667     0.029255319      0.4545455    0.908256881 0.94444444
72     0.00000000     0.023936170      0.6363636    0.917431193 0.77777778
73     0.00000000     0.042553191      0.4545455    0.944954128 1.00000000
74     0.00000000     0.039893617      0.0000000    0.954128440 0.66666667
75     0.00000000     0.026595745      0.1818182    0.963302752 0.94444444
76     0.00000000     0.007978723      0.2727273    0.963302752 0.72222222
77     0.00000000     0.010638298      0.3636364    0.981651376 0.94444444
78     0.00000000     0.021276596      0.5454545    1.000000000 0.75000000
79     0.00000000     0.082446809      1.0000000    0.972477064 0.83333333
80     0.00000000     0.023936170      0.5454545    0.972477064 0.69444444
81     0.00000000     0.000000000      0.4545455    0.972477064 0.80555556
82     0.06666667     0.029255319      0.4545455    0.972477064 0.72222222
83     0.06666667     0.042553191      0.4545455    0.944954128 0.69444444
84     0.06666667     0.055851064      0.5454545    0.935779817 0.66666667
85     0.06666667     0.045212766      0.4545455    0.926605505 0.52777778
86     0.06666667     0.058510638      0.4545455    0.935779817 0.58333333
87     0.06666667     0.087765957      0.4545455    0.926605505 0.47222222
88     0.06666667     0.069148936      0.5454545    0.926605505 0.72222222
89     0.06666667     0.085106383      0.5454545    0.917431193 0.33333333
90     0.06666667     0.119680851      0.5454545    0.889908257 0.38888889
91     0.06666667     0.162234043      0.4545455    0.889908257 0.44444444
92     0.06666667     0.156914894      0.4545455    0.889908257 0.33333333
93     0.06666667     0.159574468      0.4545455    0.880733945 0.38888889
94     0.13333333     0.135638298      0.4545455    0.871559633 0.22222222
95     0.13333333     0.180851064      0.4545455    0.889908257 0.16666667
96     0.13333333     0.188829787      0.4545455    0.880733945 0.27777778
97     0.20000000     0.098404255      0.4545455    0.871559633 0.19444444
98     0.13333333     0.159574468      0.5454545    0.862385321 0.30555556
99     0.13333333     0.154255319      0.4545455    0.862385321 0.27777778
100    0.13333333     0.188829787      0.4545455    0.853211009 0.00000000
101    0.13333333     0.223404255      0.4545455    0.844036697 0.05555556

$model.list
$model.list$response
[1] "B_COND_VAL"

$model.list$variables
 [1] "B_CL2_VAL"       "B_TURB_VAL"      "B_PH_VAL"        "B_TEMP_VAL"     
 [5] "B_PRES_OP"       "B_PLNT_PRES_OP"  "B_PLNT_PH_VAL"   "B_PLNT_TURB_VAL"
 [9] "B_PLNT_FLOW_OP"  "B_PLNT_CL2_VAL"  "past_data"      


$err.fct
function (x, y) 
{
    1/2 * (y - x)^2
}
<bytecode: 0x7fd6aa25d4a8>
<environment: 0x7fd6ae145e38>
attr(,"type")
[1] "sse"

$act.fct
function (x) 
{
    1/(1 + exp(-x))
}
<bytecode: 0x7fd6aa25ca88>
<environment: 0x7fd6ae141bc0>
attr(,"type")
[1] "logistic"

$linear.output
[1] TRUE

$data
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.00000000 0.61538462
3   0.996138996 0.34415584 0.27272727 0.33333333 0.00000000 0.61538462
4   0.988416988 0.24675325 0.31818182 0.52777778 0.04545455 0.69230769
5   0.984555985 0.29220779 0.36363636 0.50000000 0.04545455 0.61538462
6   0.984555985 0.22077922 0.36363636 0.55555556 0.04545455 0.69230769
7   0.949806950 0.22077922 0.40909091 0.22222222 0.09090909 0.69230769
8   0.972972973 0.12987013 0.40909091 0.41666667 0.13636364 0.69230769
9   0.969111969 0.12987013 0.45454545 0.22222222 0.22727273 0.76923077
10  0.961389961 0.16883117 0.45454545 0.41666667 0.22727273 0.69230769
11  0.965250965 0.18831169 0.45454545 0.25000000 0.27272727 0.53846154
12  0.949806950 0.29870130 0.45454545 0.38888889 0.27272727 0.46153846
13  0.961389961 0.52597403 0.50000000 0.11111111 0.36363636 0.46153846
14  0.961389961 0.50649351 0.45454545 0.36111111 0.36363636 0.46153846
15  0.961389961 0.51948052 0.50000000 0.16666667 0.45454545 0.46153846
16  0.961389961 0.31818182 0.45454545 0.36111111 0.36363636 0.38461538
17  0.976833977 0.43506494 0.45454545 0.47222222 0.45454545 0.38461538
18  0.980694981 0.51298701 0.36363636 0.55555556 0.36363636 0.38461538
19  0.980694981 0.50000000 0.36363636 0.47222222 0.45454545 0.30769231
20  0.980694981 0.44805195 0.40909091 0.50000000 0.40909091 0.30769231
21  0.972972973 0.43506494 0.40909091 0.52777778 0.45454545 0.23076923
22  0.976833977 0.33116883 0.45454545 0.44444444 0.36363636 0.23076923
23  0.980694981 0.19480519 0.50000000 0.58333333 0.45454545 0.61538462
24  0.976833977 0.25324675 0.50000000 0.50000000 0.40909091 0.61538462
25  0.969111969 0.06493506 0.54545455 0.55555556 0.40909091 0.53846154
26  0.969111969 0.22077922 0.59090909 0.50000000 0.40909091 0.53846154
27  0.965250965 0.10389610 0.63636364 0.47222222 0.36363636 0.53846154
28  0.961389961 0.05194805 0.63636364 0.47222222 0.50000000 0.53846154
29  0.961389961 0.30519481 0.72727273 0.47222222 0.40909091 0.46153846
30  0.961389961 0.00000000 0.72727273 0.55555556 0.45454545 0.46153846
31  0.961389961 0.16233766 0.72727273 0.36111111 0.40909091 0.46153846
32  0.953667954 0.18181818 0.68181818 0.58333333 0.40909091 0.53846154
33  0.957528958 0.14285714 0.72727273 0.41666667 0.45454545 0.53846154
34  0.667953668 0.46753247 0.68181818 0.61111111 0.31818182 0.53846154
35  0.019305019 0.47402597 0.72727273 0.66666667 0.36363636 0.53846154
36  0.015444015 0.61038961 0.72727273 0.50000000 0.31818182 0.53846154
37  0.030888031 0.42207792 0.72727273 0.52777778 0.36363636 0.53846154
38  0.023166023 0.53896104 0.77272727 0.33333333 0.36363636 0.53846154
39  0.003861004 0.48051948 0.77272727 0.63888889 0.27272727 0.46153846
40  0.023166023 0.57792208 0.81818182 0.50000000 0.31818182 0.53846154
41  0.000000000 0.74025974 0.81818182 0.50000000 0.27272727 0.53846154
42  0.019305019 0.60389610 0.81818182 0.55555556 0.27272727 0.61538462
43  0.023166023 0.56493506 0.86363636 0.58333333 0.22727273 0.53846154
44  0.023166023 0.37012987 0.90909091 0.63888889 0.27272727 0.46153846
45  0.023166023 0.62337662 0.90909091 0.58333333 0.22727273 0.46153846
46  0.023166023 0.53246753 0.95454545 0.69444444 0.22727273 0.38461538
47  0.019305019 0.34415584 0.95454545 0.47222222 0.27272727 0.23076923
48  0.023166023 0.50000000 1.00000000 0.55555556 0.22727273 0.15384615
49  0.023166023 0.21428571 0.95454545 0.61111111 0.27272727 0.15384615
50  0.023166023 0.28571429 1.00000000 0.50000000 0.22727273 0.15384615
51  0.023166023 0.25324675 0.95454545 0.66666667 0.27272727 0.15384615
52  0.019305019 0.38311688 0.95454545 0.58333333 0.27272727 0.15384615
53  0.023166023 0.37012987 0.90909091 0.83333333 0.18181818 0.00000000
54  0.023166023 0.48051948 0.81818182 0.61111111 0.18181818 0.00000000
55  0.019305019 0.77272727 0.72727273 0.88888889 0.09090909 0.15384615
56  0.019305019 0.70129870 0.68181818 0.63888889 0.13636364 0.07692308
57  0.023166023 0.79870130 0.63636364 0.83333333 0.09090909 0.30769231
58  0.023166023 0.91558442 0.63636364 0.77777778 0.18181818 0.53846154
59  0.019305019 1.00000000 0.59090909 0.83333333 0.09090909 0.69230769
60  0.023166023 0.82467532 0.63636364 0.75000000 0.18181818 0.84615385
61  0.023166023 0.85714286 0.63636364 0.72222222 0.13636364 0.84615385
62  0.019305019 0.72727273 0.63636364 0.75000000 0.18181818 0.76923077
63  0.023166023 0.80519481 0.59090909 0.69444444 0.09090909 0.69230769
64  0.023166023 0.87662338 0.54545455 0.86111111 0.13636364 0.69230769
65  0.023166023 0.79870130 0.50000000 0.69444444 0.04545455 0.53846154
66  0.019305019 0.70129870 0.50000000 0.80555556 0.13636364 0.46153846
67  0.023166023 0.77922078 0.45454545 0.80555556 0.13636364 0.53846154
68  0.023166023 0.70129870 0.45454545 0.88888889 0.13636364 0.53846154
69  0.023166023 0.62987013 0.40909091 0.77777778 0.09090909 0.61538462
70  0.023166023 0.57142857 0.40909091 0.94444444 0.09090909 0.61538462
71  0.023166023 0.72727273 0.40909091 0.77777778 0.09090909 0.69230769
72  0.027027027 0.61688312 0.36363636 1.00000000 0.09090909 0.46153846
73  0.027027027 0.80519481 0.36363636 0.66666667 0.09090909 0.69230769
74  0.027027027 0.77922078 0.36363636 0.94444444 0.09090909 1.00000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.18181818 0.76923077
76  0.027027027 0.38311688 0.40909091 0.94444444 0.09090909 0.76923077
77  0.027027027 0.62987013 0.40909091 0.75000000 0.18181818 0.69230769
78  0.027027027 0.55844156 0.45454545 0.83333333 0.09090909 0.53846154
79  0.027027027 0.45454545 0.45454545 0.69444444 0.22727273 0.23076923
80  0.027027027 0.61038961 0.40909091 0.80555556 0.18181818 0.53846154
81  0.030888031 0.64935065 0.45454545 0.72222222 0.31818182 0.53846154
82  0.027027027 0.82467532 0.45454545 0.69444444 0.31818182 0.53846154
83  0.027027027 0.57792208 0.45454545 0.66666667 0.45454545 0.53846154
84  0.023166023 0.85714286 0.45454545 0.52777778 0.40909091 0.46153846
85  0.011583012 0.33766234 0.45454545 0.58333333 0.50000000 0.38461538
86  0.023166023 0.33116883 0.40909091 0.47222222 0.54545455 0.38461538
87  0.030888031 0.55194805 0.31818182 0.72222222 0.59090909 0.30769231
88  0.030888031 0.44805195 0.22727273 0.33333333 0.72727273 0.23076923
89  0.034749035 0.64285714 0.18181818 0.38888889 0.68181818 0.15384615
90  0.034749035 0.39610390 0.18181818 0.44444444 0.77272727 0.15384615
91  0.034749035 0.42857143 0.18181818 0.33333333 0.77272727 0.15384615
92  0.034749035 0.26623377 0.13636364 0.38888889 0.81818182 0.15384615
93  0.034749035 0.32467532 0.09090909 0.22222222 0.81818182 0.53846154
94  0.034749035 0.25324675 0.00000000 0.16666667 0.81818182 0.61538462
95  0.034749035 0.24675325 0.00000000 0.27777778 0.95454545 0.61538462
96  0.034749035 0.39610390 0.04545455 0.19444444 1.00000000 0.53846154
97  0.034749035 0.12337662 0.04545455 0.30555556 0.95454545 0.53846154
98  0.030888031 0.15584416 0.00000000 0.27777778 0.95454545 0.53846154
99  0.030888031 0.07792208 0.00000000 0.00000000 0.95454545 0.53846154
100 0.027027027 0.07792208 0.00000000 0.05555556 0.86363636 0.53846154
101 0.023166023 0.07142857 0.00000000 0.25000000 0.90909091 0.53846154
    B_PLNT_PRES_OP B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL
2        0.5000000    0.93333333     0.194148936      0.4545455    0.284403670
3        0.5714286    0.93333333     0.199468085      0.3636364    0.284403670
4        0.5714286    0.93333333     0.242021277      0.3636364    0.284403670
5        0.5000000    0.86666667     0.260638298      0.3636364    0.284403670
6        0.5714286    0.86666667     0.289893617      0.3636364    0.238532110
7        0.6428571    0.86666667     0.276595745      0.3636364    0.220183486
8        0.5714286    0.86666667     0.303191489      0.3636364    0.201834862
9        0.7142857    0.80000000     0.348404255      0.2727273    0.174311927
10       0.5714286    0.80000000     0.345744681      0.3636364    0.155963303
11       0.5000000    0.80000000     0.377659574      0.3636364    0.137614679
12       0.5000000    0.80000000     0.375000000      0.4545455    0.100917431
13       0.5000000    0.80000000     0.396276596      0.4545455    0.082568807
14       0.5000000    0.80000000     0.375000000      0.4545455    0.064220183
15       0.5000000    0.73333333     0.375000000      0.4545455    0.045871560
16       0.5000000    0.73333333     0.359042553      0.4545455    0.045871560
17       0.5000000    0.73333333     0.351063830      0.4545455    0.036697248
18       0.5000000    0.73333333     0.327127660      0.4545455    0.018348624
19       0.5000000    0.73333333     0.324468085      0.3636364    0.009174312
20       0.5714286    0.66666667     0.321808511      0.4545455    0.009174312
21       0.5000000    0.66666667     0.297872340      0.3636364    0.009174312
22       0.5000000    0.60000000     0.279255319      0.4545455    0.018348624
23       0.5714286    0.60000000     0.265957447      0.3636364    0.000000000
24       0.5714286    0.53333333     0.247340426      0.3636364    0.000000000
25       0.5000000    0.53333333     0.234042553      0.4545455    0.009174312
26       0.5000000    0.53333333     0.228723404      0.4545455    0.009174312
27       0.5000000    0.46666667     0.228723404      0.4545455    0.027522936
28       0.5000000    0.46666667     0.228723404      0.3636364    0.045871560
29       0.5000000    0.46666667     0.223404255      0.3636364    0.064220183
30       0.4285714    0.40000000     0.226063830      0.4545455    0.082568807
31       0.4285714    0.40000000     0.204787234      0.4545455    0.064220183
32       0.5000000    0.40000000     1.000000000      0.3636364    0.357798165
33       0.5000000    0.33333333     0.319148936      0.4545455    0.568807339
34       0.5000000    0.33333333     0.194148936      0.4545455    0.568807339
35       0.5000000    0.33333333     0.175531915      0.4545455    0.596330275
36       0.5000000    0.33333333     0.172872340      0.3636364    0.605504587
37       0.5000000    0.33333333     0.170212766      0.3636364    0.605504587
38       0.5000000    0.33333333     0.170212766      0.4545455    0.577981651
39       0.5000000    0.33333333     0.164893617      0.4545455    0.577981651
40       0.5000000    0.33333333     0.175531915      0.3636364    0.605504587
41       0.5714286    0.33333333     0.180851064      0.3636364    0.642201835
42       0.5714286    0.33333333     0.196808511      0.3636364    0.669724771
43       0.5714286    0.33333333     0.215425532      0.3636364    0.724770642
44       0.5714286    0.33333333     0.231382979      0.3636364    0.770642202
45       0.5714286    0.33333333     0.226063830      0.4545455    0.752293578
46       0.5000000    0.33333333     0.207446809      0.5454545    0.770642202
47       0.4285714    0.33333333     0.204787234      0.4545455    0.770642202
48       0.4285714    0.40000000     0.156914894      0.5454545    0.761467890
49       0.4285714    0.40000000     0.167553191      0.5454545    0.779816514
50       0.4285714    0.40000000     0.223404255      0.5454545    0.807339450
51       0.4285714    0.40000000     0.228723404      0.5454545    0.798165138
52       0.4285714    0.40000000     0.215425532      0.5454545    0.798165138
53       0.4285714    0.46666667     0.114361702      0.5454545    0.779816514
54       0.4285714    0.46666667     0.186170213      0.5454545    0.798165138
55       0.5000000    0.40000000     0.202127660      0.5454545    0.816513761
56       0.4285714    0.33333333     0.172872340      0.5454545    0.798165138
57       0.5000000    0.26666667     0.164893617      0.5454545    0.779816514
58       0.5714286    0.26666667     0.170212766      0.4545455    0.779816514
59       0.6428571    0.26666667     0.207446809      0.3636364    0.816513761
60       0.7142857    0.26666667     0.202127660      0.2727273    0.816513761
61       0.6428571    0.26666667     0.196808511      0.3636364    0.844036697
62       0.6428571    0.26666667     0.191489362      0.3636364    0.853211009
63       0.6428571    0.26666667     0.148936170      0.3636364    0.844036697
64       0.5714286    0.26666667     0.204787234      0.3636364    0.862385321
65       0.5000000    0.26666667     0.220744681      0.4545455    0.853211009
66       0.4285714    0.20000000     0.226063830      0.5454545    0.871559633
67       0.4285714    0.13333333     0.130319149      0.4545455    0.871559633
68       0.5000000    0.13333333     0.090425532      0.4545455    0.889908257
69       0.5000000    0.06666667     0.061170213      0.4545455    0.899082569
70       0.5000000    0.06666667     0.050531915      0.4545455    0.899082569
71       0.5714286    0.06666667     0.029255319      0.4545455    0.908256881
72       0.3571429    0.00000000     0.023936170      0.6363636    0.917431193
73       0.5714286    0.00000000     0.042553191      0.4545455    0.944954128
74       1.0000000    0.00000000     0.039893617      0.0000000    0.954128440
75       0.7857143    0.00000000     0.026595745      0.1818182    0.963302752
76       0.7142857    0.00000000     0.007978723      0.2727273    0.963302752
77       0.6428571    0.00000000     0.010638298      0.3636364    0.981651376
78       0.4285714    0.00000000     0.021276596      0.5454545    1.000000000
79       0.0000000    0.00000000     0.082446809      1.0000000    0.972477064
80       0.5000000    0.00000000     0.023936170      0.5454545    0.972477064
81       0.5000000    0.00000000     0.000000000      0.4545455    0.972477064
82       0.5000000    0.06666667     0.029255319      0.4545455    0.972477064
83       0.5000000    0.06666667     0.042553191      0.4545455    0.944954128
84       0.5000000    0.06666667     0.055851064      0.5454545    0.935779817
85       0.5000000    0.06666667     0.045212766      0.4545455    0.926605505
86       0.5000000    0.06666667     0.058510638      0.4545455    0.935779817
87       0.5000000    0.06666667     0.087765957      0.4545455    0.926605505
88       0.4285714    0.06666667     0.069148936      0.5454545    0.926605505
89       0.4285714    0.06666667     0.085106383      0.5454545    0.917431193
90       0.5000000    0.06666667     0.119680851      0.5454545    0.889908257
91       0.5714286    0.06666667     0.162234043      0.4545455    0.889908257
92       0.5000000    0.06666667     0.156914894      0.4545455    0.889908257
93       0.5714286    0.06666667     0.159574468      0.4545455    0.880733945
94       0.5714286    0.13333333     0.135638298      0.4545455    0.871559633
95       0.5714286    0.13333333     0.180851064      0.4545455    0.889908257
96       0.5714286    0.13333333     0.188829787      0.4545455    0.880733945
97       0.5714286    0.20000000     0.098404255      0.4545455    0.871559633
98       0.5714286    0.13333333     0.159574468      0.5454545    0.862385321
99       0.5714286    0.13333333     0.154255319      0.4545455    0.862385321
100      0.5000000    0.13333333     0.188829787      0.4545455    0.853211009
101      0.5000000    0.13333333     0.223404255      0.4545455    0.844036697
     past_data
2   0.36111111
3   0.63888889
4   0.33333333
5   0.52777778
6   0.50000000
7   0.55555556
8   0.22222222
9   0.41666667
10  0.22222222
11  0.41666667
12  0.25000000
13  0.38888889
14  0.11111111
15  0.36111111
16  0.16666667
17  0.36111111
18  0.47222222
19  0.55555556
20  0.47222222
21  0.50000000
22  0.52777778
23  0.44444444
24  0.58333333
25  0.50000000
26  0.55555556
27  0.50000000
28  0.47222222
29  0.47222222
30  0.47222222
31  0.55555556
32  0.36111111
33  0.58333333
34  0.41666667
35  0.61111111
36  0.66666667
37  0.50000000
38  0.52777778
39  0.33333333
40  0.63888889
41  0.50000000
42  0.50000000
43  0.55555556
44  0.58333333
45  0.63888889
46  0.58333333
47  0.69444444
48  0.47222222
49  0.55555556
50  0.61111111
51  0.50000000
52  0.66666667
53  0.58333333
54  0.83333333
55  0.61111111
56  0.88888889
57  0.63888889
58  0.83333333
59  0.77777778
60  0.83333333
61  0.75000000
62  0.72222222
63  0.75000000
64  0.69444444
65  0.86111111
66  0.69444444
67  0.80555556
68  0.80555556
69  0.88888889
70  0.77777778
71  0.94444444
72  0.77777778
73  1.00000000
74  0.66666667
75  0.94444444
76  0.72222222
77  0.94444444
78  0.75000000
79  0.83333333
80  0.69444444
81  0.80555556
82  0.72222222
83  0.69444444
84  0.66666667
85  0.52777778
86  0.58333333
87  0.47222222
88  0.72222222
89  0.33333333
90  0.38888889
91  0.44444444
92  0.33333333
93  0.38888889
94  0.22222222
95  0.16666667
96  0.27777778
97  0.19444444
98  0.30555556
99  0.27777778
100 0.00000000
101 0.05555556

$exclude
NULL

$net.result
$net.result[[1]]
         [,1]
2   0.5489126
3   0.5492479
4   0.5490374
5   0.5491907
6   0.5491718
7   0.5492438
8   0.5488715
9   0.5491712
10  0.5489809
11  0.5491259
12  0.5490867
13  0.5493096
14  0.5491380
15  0.5492984
16  0.5489924
17  0.5492444
18  0.5492676
19  0.5492724
20  0.5492671
21  0.5492107
22  0.5492046
23  0.5491701
24  0.5492499
25  0.5491245
26  0.5492557
27  0.5491741
28  0.5491167
29  0.5492539
30  0.5491248
31  0.5492393
32  0.5493285
33  0.5493519
34  0.5493171
35  0.5493226
36  0.5493415
37  0.5492414
38  0.5493214
39  0.5491875
40  0.5493450
41  0.5493512
42  0.5493374
43  0.5493479
44  0.5493309
45  0.5493830
46  0.5493719
47  0.5493378
48  0.5493297
49  0.5492813
50  0.5493319
51  0.5492855
52  0.5493559
53  0.5492935
54  0.5493672
55  0.5493672
56  0.5493806
57  0.5493613
58  0.5494005
59  0.5493997
60  0.5493995
61  0.5493970
62  0.5493851
63  0.5493826
64  0.5493802
65  0.5493820
66  0.5493511
67  0.5493577
68  0.5493522
69  0.5493458
70  0.5493031
71  0.5493771
72  0.5493032
73  0.5493875
74  0.5493280
75  0.5493419
76  0.5492253
77  0.5493690
78  0.5493093
79  0.5493320
80  0.5493172
81  0.5493532
82  0.5493682
83  0.5493341
84  0.5493759
85  0.5491611
86  0.5491941
87  0.5492030
88  0.5492776
89  0.5491010
90  0.5490412
91  0.5491076
92  0.5487093
93  0.5490279
94  0.5486136
95  0.5486683
96  0.5490518
97  0.5484626
98  0.5488313
99  0.5484971
100 0.5470614
101 0.5475093


$weights
$weights[[1]]
$weights[[1]][[1]]
            [,1]
 [1,] -0.8346366
 [2,] -0.9749368
 [3,] -2.2203557
 [4,] -1.9680180
 [5,] -1.1670180
 [6,] -0.7630671
 [7,] -1.6439462
 [8,] -0.6504923
 [9,] -1.1334941
[10,] -2.1436264
[11,] -1.1904803
[12,] -2.6609631

$weights[[1]][[2]]
           [,1]
[1,]  0.5494237
[2,] -0.6196001



$generalized.weights
$generalized.weights[[1]]
            [,1]         [,2]         [,3]         [,4]         [,5]
2   2.010929e-03 0.0045797606 0.0040592827 0.0024071203 1.573921e-03
3   6.922145e-04 0.0015764738 0.0013973116 0.0008285940 5.417849e-04
4   1.520157e-03 0.0034620586 0.0030686046 0.0018196566 1.189802e-03
5   9.173459e-04 0.0020891960 0.0018517643 0.0010980806 7.179916e-04
6   9.915357e-04 0.0022581585 0.0020015247 0.0011868872 7.760587e-04
7   7.080774e-04 0.0016126005 0.0014293327 0.0008475822 5.542006e-04
8   2.172279e-03 0.0049472249 0.0043849857 0.0026002594 1.700207e-03
9   9.939004e-04 0.0022635441 0.0020062982 0.0011897179 7.779096e-04
10  1.742207e-03 0.0039677632 0.0035168372 0.0020854547 1.363597e-03
11  1.171978e-03 0.0026691034 0.0023657668 0.0014028797 9.172877e-04
12  1.326470e-03 0.0030209492 0.0026776262 0.0015878097 1.038206e-03
13  4.493340e-04 0.0010233292 0.0009070305 0.0005378614 3.516863e-04
14  1.124361e-03 0.0025606602 0.0022696478 0.0013458819 8.800191e-04
15  4.933098e-04 0.0011234812 0.0009958005 0.0005905012 3.861055e-04
16  1.697182e-03 0.0038652236 0.0034259510 0.0020315599 1.328357e-03
17  7.059350e-04 0.0016077215 0.0014250082 0.0008450178 5.525238e-04
18  6.147061e-04 0.0013999535 0.0012408524 0.0007358150 4.811204e-04
19  5.956583e-04 0.0013565733 0.0012024023 0.0007130144 4.662120e-04
20  6.167166e-04 0.0014045323 0.0012449109 0.0007382216 4.826940e-04
21  8.386021e-04 0.0019098622 0.0016928113 0.0010038228 6.563601e-04
22  8.626674e-04 0.0019646694 0.0017413898 0.0010326294 6.751957e-04
23  9.982409e-04 0.0022734293 0.0020150599 0.0011949135 7.813068e-04
24  6.841819e-04 0.0015581801 0.0013810969 0.0008189788 5.354979e-04
25  1.177450e-03 0.0026815664 0.0023768134 0.0014094302 9.215708e-04
26  6.613579e-04 0.0015062000 0.0013350243 0.0007916581 5.176340e-04
27  9.826275e-04 0.0022378707 0.0019835425 0.0011762239 7.690864e-04
28  1.208261e-03 0.0027517374 0.0024390096 0.0014463120 9.456864e-04
29  6.686108e-04 0.0015227179 0.0013496650 0.0008003399 5.233107e-04
30  1.176602e-03 0.0026796357 0.0023751021 0.0014084154 9.209073e-04
31  7.260464e-04 0.0016535239 0.0014656052 0.0008690915 5.682646e-04
32  3.750136e-04 0.0008540692 0.0007570064 0.0004488984 2.935170e-04
33  2.828715e-04 0.0006442217 0.0005710076 0.0003386026 2.213989e-04
34  4.199200e-04 0.0009563408 0.0008476552 0.0005026523 3.286645e-04
35  3.980126e-04 0.0009064480 0.0008034326 0.0004764287 3.115179e-04
36  3.236697e-04 0.0007371368 0.0006533632 0.0003874388 2.533310e-04
37  7.175802e-04 0.0016342427 0.0014485152 0.0008589573 5.616383e-04
38  4.029049e-04 0.0009175898 0.0008133081 0.0004822848 3.153470e-04
39  9.298523e-04 0.0021176788 0.0018770101 0.0011130511 7.277802e-04
40  3.099117e-04 0.0007058040 0.0006255912 0.0003709703 2.425628e-04
41  2.854113e-04 0.0006500058 0.0005761344 0.0003416428 2.233868e-04
42  3.397755e-04 0.0007738168 0.0006858746 0.0004067178 2.659367e-04
43  2.985359e-04 0.0006798962 0.0006026277 0.0003573531 2.336591e-04
44  3.653839e-04 0.0008321383 0.0007375679 0.0004373716 2.859800e-04
45  1.603009e-04 0.0003650749 0.0003235851 0.0001918832 1.254649e-04
46  2.039234e-04 0.0004644224 0.0004116420 0.0002441002 1.596075e-04
47  3.381550e-04 0.0007701263 0.0006826034 0.0004047780 2.646684e-04
48  3.702721e-04 0.0008432709 0.0007474354 0.0004432228 2.898059e-04
49  5.607135e-04 0.0012769889 0.0011318625 0.0006711849 4.388613e-04
50  3.615803e-04 0.0008234757 0.0007298899 0.0004328185 2.830030e-04
51  5.442287e-04 0.0012394457 0.0010985859 0.0006514522 4.259589e-04
52  2.668297e-04 0.0006076875 0.0005386254 0.0003194003 2.088432e-04
53  5.124374e-04 0.0011670430 0.0010344116 0.0006133973 4.010763e-04
54  2.224658e-04 0.0005066514 0.0004490718 0.0002662958 1.741203e-04
55  2.224441e-04 0.0005066021 0.0004490280 0.0002662698 1.741033e-04
56  1.698756e-04 0.0003868807 0.0003429128 0.0002033444 1.329589e-04
57  2.455359e-04 0.0005591921 0.0004956414 0.0002939111 1.921769e-04
58  9.145889e-05 0.0002082917 0.0001846199 0.0001094780 7.158338e-05
59  9.460980e-05 0.0002154677 0.0001909804 0.0001132497 7.404954e-05
60  9.539105e-05 0.0002172470 0.0001925574 0.0001141849 7.466101e-05
61  1.052662e-04 0.0002397371 0.0002124916 0.0001260057 8.239016e-05
62  1.519036e-04 0.0003459506 0.0003066342 0.0001818315 1.188925e-04
63  1.617324e-04 0.0003683352 0.0003264749 0.0001935968 1.265853e-04
64  1.713747e-04 0.0003902948 0.0003459388 0.0002051388 1.341322e-04
65  1.643020e-04 0.0003741872 0.0003316618 0.0001966727 1.285965e-04
66  2.859361e-04 0.0006512011 0.0005771938 0.0003422710 2.237975e-04
67  2.600506e-04 0.0005922484 0.0005249409 0.0003112855 2.035373e-04
68  2.814126e-04 0.0006408990 0.0005680625 0.0003368563 2.202570e-04
69  3.067575e-04 0.0006986205 0.0006192241 0.0003671946 2.400941e-04
70  4.750332e-04 0.0010818575 0.0009589072 0.0005686238 3.718007e-04
71  1.833144e-04 0.0004174868 0.0003700405 0.0002194309 1.434772e-04
72  4.745247e-04 0.0010806995 0.0009578808 0.0005680152 3.714027e-04
73  1.426924e-04 0.0003249727 0.0002880404 0.0001708055 1.116830e-04
74  3.770074e-04 0.0008586101 0.0007610313 0.0004512851 2.950775e-04
75  3.220691e-04 0.0007334915 0.0006501321 0.0003855228 2.520782e-04
76  7.809546e-04 0.0017785736 0.0015764434 0.0009348176 6.112403e-04
77  2.153209e-04 0.0004903794 0.0004346490 0.0002577432 1.685281e-04
78  4.505967e-04 0.0010262050 0.0009095795 0.0005393729 3.526747e-04
79  3.609892e-04 0.0008221295 0.0007286966 0.0004321109 2.825403e-04
80  4.193805e-04 0.0009551121 0.0008465661 0.0005020065 3.282423e-04
81  2.776573e-04 0.0006323465 0.0005604820 0.0003323611 2.173178e-04
82  2.183596e-04 0.0004972999 0.0004407831 0.0002613806 1.709065e-04
83  3.529649e-04 0.0008038547 0.0007124987 0.0004225057 2.762598e-04
84  1.880952e-04 0.0004283747 0.0003796910 0.0002251536 1.472190e-04
85  1.033733e-03 0.0023542601 0.0020867045 0.0012373981 8.090858e-04
86  9.039368e-04 0.0020586578 0.0018246967 0.0010820297 7.074966e-04
87  8.687372e-04 0.0019784929 0.0017536423 0.0010398951 6.799464e-04
88  5.752921e-04 0.0013101906 0.0011612908 0.0006886356 4.502717e-04
89  1.270021e-03 0.0028923909 0.0025636782 0.0015202395 9.940246e-04
90  1.505197e-03 0.0034279883 0.0030384064 0.0018017493 1.178093e-03
91  1.244159e-03 0.0028334928 0.0025114737 0.0014892826 9.737832e-04
92  2.809451e-03 0.0063983431 0.0056711880 0.0033629665 2.198911e-03
93  1.557376e-03 0.0035468238 0.0031437365 0.0018642091 1.218933e-03
94  3.185125e-03 0.0072539167 0.0064295279 0.0038126556 2.492945e-03
95  2.970434e-03 0.0067649716 0.0059961501 0.0035556663 2.324910e-03
96  1.463598e-03 0.0033332509 0.0029544356 0.0017519553 1.145534e-03
97  3.777866e-03 0.0086038460 0.0076260412 0.0045221779 2.956874e-03
98  2.330400e-03 0.0053073365 0.0047041715 0.0027895339 1.823966e-03
99  3.642475e-03 0.0082955021 0.0073527399 0.0043601125 2.850906e-03
100 9.259340e-03 0.0210875509 0.0186910055 0.0110836080 7.247134e-03
101 7.510418e-03 0.0171044919 0.0151606108 0.0089901139 5.878281e-03
            [,6]         [,7]         [,8]         [,9]        [,10]
2   0.0033908441 1.341721e-03 0.0023379730 0.0044214968 0.0024555141
3   0.0011672175 4.618557e-04 0.0008047917 0.0015219953 0.0008452524
4   0.0025633002 1.014271e-03 0.0017673849 0.0033424195 0.0018562398
5   0.0015468359 6.120667e-04 0.0010665370 0.0020169992 0.0011201569
6   0.0016719353 6.615673e-04 0.0011527925 0.0021801229 0.0012107489
7   0.0011939657 4.724397e-04 0.0008232344 0.0015568736 0.0008646224
8   0.0036629139 1.449377e-03 0.0025255640 0.0047762626 0.0026525362
9   0.0016759228 6.631451e-04 0.0011555419 0.0021853224 0.0012136365
10  0.0029377227 1.162426e-03 0.0020255476 0.0038306483 0.0021273816
11  0.0019761980 7.819608e-04 0.0013625804 0.0025768667 0.0014310838
12  0.0022367038 8.850402e-04 0.0015421980 0.0029165536 0.0016197317
13  0.0007576705 2.998023e-04 0.0005224107 0.0009879657 0.0005486748
14  0.0018959069 7.501905e-04 0.0013072200 0.0024721709 0.0013729402
15  0.0008318229 3.291436e-04 0.0005735384 0.0010846568 0.0006023730
16  0.0028618026 1.132385e-03 0.0019732011 0.0037316523 0.0020724034
17  0.0011903533 4.710103e-04 0.0008207437 0.0015521632 0.0008620064
18  0.0010365223 4.101410e-04 0.0007146778 0.0013515750 0.0007506081
19  0.0010044037 3.974320e-04 0.0006925322 0.0013096939 0.0007273491
20  0.0010399125 4.114825e-04 0.0007170154 0.0013559956 0.0007530632
21  0.0014140575 5.595277e-04 0.0009749868 0.0018438627 0.0010240041
22  0.0014546367 5.755845e-04 0.0010029660 0.0018967759 0.0010533899
23  0.0016832418 6.660411e-04 0.0011605882 0.0021948659 0.0012189366
24  0.0011536729 4.564963e-04 0.0007954527 0.0015043337 0.0008354439
25  0.0019854256 7.856121e-04 0.0013689427 0.0025888990 0.0014377661
26  0.0011151870 4.412678e-04 0.0007689168 0.0014541499 0.0008075740
27  0.0016569143 6.556236e-04 0.0011424355 0.0021605361 0.0011998713
28  0.0020373800 8.061699e-04 0.0014047651 0.0026566450 0.0014753894
29  0.0011274168 4.461070e-04 0.0007773492 0.0014700970 0.0008164303
30  0.0019839961 7.850464e-04 0.0013679571 0.0025870350 0.0014367308
31  0.0012242653 4.844289e-04 0.0008441258 0.0015963827 0.0008865641
32  0.0006323509 2.502146e-04 0.0004360033 0.0008245549 0.0004579233
33  0.0004769802 1.887361e-04 0.0003288759 0.0006219592 0.0003454101
34  0.0007080725 2.801769e-04 0.0004882131 0.0009232923 0.0005127579
35  0.0006711320 2.655599e-04 0.0004627428 0.0008751237 0.0004860071
36  0.0005457744 2.159572e-04 0.0003763092 0.0007116634 0.0003952281
37  0.0012099895 4.787801e-04 0.0008342827 0.0015777678 0.0008762261
38  0.0006793814 2.688241e-04 0.0004684307 0.0008858805 0.0004919809
39  0.0015679244 6.204113e-04 0.0010810774 0.0020444977 0.0011354284
40  0.0005225756 2.067777e-04 0.0003603137 0.0006814133 0.0003784284
41  0.0004812628 1.904306e-04 0.0003318287 0.0006275434 0.0003485113
42  0.0005729322 2.267033e-04 0.0003950344 0.0007470759 0.0004148946
43  0.0005033935 1.991875e-04 0.0003470878 0.0006564009 0.0003645375
44  0.0006161133 2.437896e-04 0.0004248076 0.0008033819 0.0004461647
45  0.0002703006 1.069551e-04 0.0001863711 0.0003524589 0.0001957409
46  0.0003438572 1.360607e-04 0.0002370881 0.0004483732 0.0002490077
47  0.0005701997 2.256220e-04 0.0003931503 0.0007435128 0.0004129159
48  0.0006243558 2.470511e-04 0.0004304908 0.0008141298 0.0004521336
49  0.0009454797 3.741164e-04 0.0006519043 0.0012328598 0.0006846787
50  0.0006096995 2.412517e-04 0.0004203853 0.0007950187 0.0004415201
51  0.0009176827 3.631174e-04 0.0006327385 0.0011966139 0.0006645493
52  0.0004499304 1.780327e-04 0.0003102251 0.0005866875 0.0003258216
53  0.0008640760 3.419058e-04 0.0005957768 0.0011267133 0.0006257294
54  0.0003751235 1.484324e-04 0.0002586461 0.0004891430 0.0002716495
55  0.0003750870 1.484180e-04 0.0002586209 0.0004890953 0.0002716230
56  0.0002864456 1.133435e-04 0.0001975031 0.0003735112 0.0002074325
57  0.0004140245 1.638252e-04 0.0002854682 0.0005398680 0.0002998201
58  0.0001542187 6.102273e-05 0.0001063332 0.0002010938 0.0001116790
59  0.0001595318 6.312506e-05 0.0001099965 0.0002080218 0.0001155266
60  0.0001608491 6.364632e-05 0.0001109048 0.0002097395 0.0001164805
61  0.0001775008 7.023519e-05 0.0001223860 0.0002314524 0.0001285390
62  0.0002561411 1.013523e-04 0.0001766082 0.0003339956 0.0001854871
63  0.0002727145 1.079103e-04 0.0001880356 0.0003556066 0.0001974890
64  0.0002889734 1.143437e-04 0.0001992459 0.0003768073 0.0002092630
65  0.0002770474 1.096247e-04 0.0001910230 0.0003612564 0.0002006267
66  0.0004821478 1.907808e-04 0.0003324389 0.0006286974 0.0003491522
67  0.0004384993 1.735096e-04 0.0003023435 0.0005717819 0.0003175437
68  0.0004745201 1.877626e-04 0.0003271797 0.0006187513 0.0003436286
69  0.0005172570 2.046732e-04 0.0003566466 0.0006744781 0.0003745769
70  0.0008010048 3.169492e-04 0.0005522895 0.0010444715 0.0005800557
71  0.0003091063 1.223101e-04 0.0002131275 0.0004030597 0.0002238424
72  0.0008001474 3.166099e-04 0.0005516983 0.0010433535 0.0005794348
73  0.0002406091 9.520648e-05 0.0001658990 0.0003137426 0.0001742395
74  0.0006357129 2.515449e-04 0.0004383214 0.0008289389 0.0004603579
75  0.0005430754 2.148893e-04 0.0003744483 0.0007081441 0.0003932736
76  0.0013168518 5.210644e-04 0.0009079639 0.0017171111 0.0009536116
77  0.0003630757 1.436653e-04 0.0002503392 0.0004734332 0.0002629250
78  0.0007597998 3.006448e-04 0.0005238788 0.0009907422 0.0005502167
79  0.0006087028 2.408573e-04 0.0004196981 0.0007937190 0.0004407983
80  0.0007071628 2.798169e-04 0.0004875858 0.0009221060 0.0005120991
81  0.0004681879 1.852570e-04 0.0003228136 0.0006104944 0.0003390430
82  0.0003681997 1.456928e-04 0.0002538722 0.0004801146 0.0002666355
83  0.0005951722 2.355034e-04 0.0004103687 0.0007760757 0.0004309999
84  0.0003171676 1.254999e-04 0.0002186858 0.0004135712 0.0002296801
85  0.0017430887 6.897219e-04 0.0012018525 0.0022729034 0.0012622754
86  0.0015242255 6.031200e-04 0.0010509472 0.0019875163 0.0011037833
87  0.0014648716 5.796343e-04 0.0010100229 0.0019101217 0.0010608016
88  0.0009700621 3.838434e-04 0.0006688538 0.0012649141 0.0007024803
89  0.0021415195 8.473768e-04 0.0014765689 0.0027924380 0.0015508031
90  0.0025380746 1.004290e-03 0.0017499920 0.0033095266 0.0018379725
91  0.0020979115 8.301216e-04 0.0014465013 0.0027355751 0.0015192238
92  0.0047373184 1.874507e-03 0.0032663615 0.0061772342 0.0034305771
93  0.0026260601 1.039104e-03 0.0018106576 0.0034242554 0.0019016880
94  0.0053707831 2.125163e-03 0.0037031328 0.0070032416 0.0038893070
95  0.0050087693 1.981917e-03 0.0034535257 0.0065311930 0.0036271510
96  0.0024679313 9.765345e-04 0.0017016284 0.0032180631 0.0017871774
97  0.0063702676 2.520648e-03 0.0043922732 0.0083065211 0.0046130939
98  0.0039295397 1.554878e-03 0.0027094014 0.0051239298 0.0028456160
99  0.0061419706 2.430313e-03 0.0042348633 0.0080088327 0.0044477702
100 0.0156131738 6.177969e-03 0.0107652188 0.0203588239 0.0113064380
101 0.0126641261 5.011062e-03 0.0087318626 0.0165134083 0.0091708553
           [,11]
2   0.0054885683
3   0.0018893093
4   0.0041490695
5   0.0025037761
6   0.0027062675
7   0.0019326050
8   0.0059289523
9   0.0027127219
10  0.0047551261
11  0.0031987604
12  0.0036204264
13  0.0012263986
14  0.0030687976
15  0.0013464248
16  0.0046322386
17  0.0019267578
18  0.0016777602
19  0.0016257717
20  0.0016832477
21  0.0022888552
22  0.0023545384
23  0.0027245686
24  0.0018673853
25  0.0032136965
26  0.0018050903
27  0.0026819537
28  0.0032977921
29  0.0018248861
30  0.0032113826
31  0.0019816492
32  0.0010235507
33  0.0007720610
34  0.0011461171
35  0.0010863236
36  0.0008834143
37  0.0019585418
38  0.0010996764
39  0.0025379109
40  0.0008458637
41  0.0007789930
42  0.0009273730
43  0.0008148148
44  0.0009972678
45  0.0004375203
46  0.0005565823
47  0.0009229501
48  0.0010106096
49  0.0015303946
50  0.0009868863
51  0.0014854013
52  0.0007282770
53  0.0013986311
54  0.0006071913
55  0.0006071322
56  0.0004636534
57  0.0006701582
58  0.0002496251
59  0.0002582251
60  0.0002603575
61  0.0002873105
62  0.0004146011
63  0.0004414277
64  0.0004677449
65  0.0004484410
66  0.0007804255
67  0.0007097741
68  0.0007680790
69  0.0008372548
70  0.0012965413
71  0.0005003329
72  0.0012951535
73  0.0003894603
74  0.0010289926
75  0.0008790456
76  0.0021315138
77  0.0005876902
78  0.0012298451
79  0.0009852729
80  0.0011446445
81  0.0007578294
82  0.0005959841
83  0.0009633716
84  0.0005133814
85  0.0028214395
86  0.0024671779
87  0.0023711050
88  0.0015701848
89  0.0034663570
90  0.0041082384
91  0.0033957711
92  0.0076680304
93  0.0042506555
94  0.0086933840
95  0.0081074126
96  0.0039947013
97  0.0103111933
98  0.0063605244
99  0.0099416616
100 0.0252721646
101 0.0204987073


$startweights
$startweights[[1]]
$startweights[[1]][[1]]
            [,1]
 [1,]  0.6969634
 [2,]  0.5566632
 [3,] -0.6887557
 [4,] -0.7074952
 [5,]  0.3645820
 [6,]  0.7685329
 [7,] -0.1123462
 [8,]  0.8811077
 [9,]  0.3981059
[10,] -0.6120264
[11,]  0.3411197
[12,] -1.1293631

$startweights[[1]][[2]]
         [,1]
[1,] 1.433024
[2,] 1.980400



$result.matrix
                                    [,1]
error                        2.245221289
reached.threshold            0.006278466
steps                       27.000000000
Intercept.to.1layhid1       -0.834636625
B_CL2_VAL.to.1layhid1       -0.974936801
B_TURB_VAL.to.1layhid1      -2.220355695
B_PH_VAL.to.1layhid1        -1.968018037
B_TEMP_VAL.to.1layhid1      -1.167018038
B_PRES_OP.to.1layhid1       -0.763067075
B_PLNT_PRES_OP.to.1layhid1  -1.643946212
B_PLNT_PH_VAL.to.1layhid1   -0.650492274
B_PLNT_TURB_VAL.to.1layhid1 -1.133494120
B_PLNT_FLOW_OP.to.1layhid1  -2.143626393
B_PLNT_CL2_VAL.to.1layhid1  -1.190480309
past_data.to.1layhid1       -2.660963096
Intercept.to.B_COND_VAL      0.549423702
1layhid1.to.B_COND_VAL      -0.619600101

attr(,"class")
[1] "nn"

$modelList$model5
$call
neuralnet(formula = nn_input, data = model_input, hidden = hidden, 
    threshold = threshold, stepmax = stepmax, rep = rep, startweights = unlist(control))

$response
    B_TEMP_VAL
2   0.00000000
3   0.00000000
4   0.04545455
5   0.04545455
6   0.04545455
7   0.09090909
8   0.13636364
9   0.22727273
10  0.22727273
11  0.27272727
12  0.27272727
13  0.36363636
14  0.36363636
15  0.45454545
16  0.36363636
17  0.45454545
18  0.36363636
19  0.45454545
20  0.40909091
21  0.45454545
22  0.36363636
23  0.45454545
24  0.40909091
25  0.40909091
26  0.40909091
27  0.36363636
28  0.50000000
29  0.40909091
30  0.45454545
31  0.40909091
32  0.40909091
33  0.45454545
34  0.31818182
35  0.36363636
36  0.31818182
37  0.36363636
38  0.36363636
39  0.27272727
40  0.31818182
41  0.27272727
42  0.27272727
43  0.22727273
44  0.27272727
45  0.22727273
46  0.22727273
47  0.27272727
48  0.22727273
49  0.27272727
50  0.22727273
51  0.27272727
52  0.27272727
53  0.18181818
54  0.18181818
55  0.09090909
56  0.13636364
57  0.09090909
58  0.18181818
59  0.09090909
60  0.18181818
61  0.13636364
62  0.18181818
63  0.09090909
64  0.13636364
65  0.04545455
66  0.13636364
67  0.13636364
68  0.13636364
69  0.09090909
70  0.09090909
71  0.09090909
72  0.09090909
73  0.09090909
74  0.09090909
75  0.18181818
76  0.09090909
77  0.18181818
78  0.09090909
79  0.22727273
80  0.18181818
81  0.31818182
82  0.31818182
83  0.45454545
84  0.40909091
85  0.50000000
86  0.54545455
87  0.59090909
88  0.72727273
89  0.68181818
90  0.77272727
91  0.77272727
92  0.81818182
93  0.81818182
94  0.81818182
95  0.95454545
96  1.00000000
97  0.95454545
98  0.95454545
99  0.95454545
100 0.86363636
101 0.90909091

$covariate
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL  B_PRES_OP B_PLNT_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.61538462      0.5000000
3   0.996138996 0.34415584 0.27272727 0.33333333 0.61538462      0.5714286
4   0.988416988 0.24675325 0.31818182 0.52777778 0.69230769      0.5714286
5   0.984555985 0.29220779 0.36363636 0.50000000 0.61538462      0.5000000
6   0.984555985 0.22077922 0.36363636 0.55555556 0.69230769      0.5714286
7   0.949806950 0.22077922 0.40909091 0.22222222 0.69230769      0.6428571
8   0.972972973 0.12987013 0.40909091 0.41666667 0.69230769      0.5714286
9   0.969111969 0.12987013 0.45454545 0.22222222 0.76923077      0.7142857
10  0.961389961 0.16883117 0.45454545 0.41666667 0.69230769      0.5714286
11  0.965250965 0.18831169 0.45454545 0.25000000 0.53846154      0.5000000
12  0.949806950 0.29870130 0.45454545 0.38888889 0.46153846      0.5000000
13  0.961389961 0.52597403 0.50000000 0.11111111 0.46153846      0.5000000
14  0.961389961 0.50649351 0.45454545 0.36111111 0.46153846      0.5000000
15  0.961389961 0.51948052 0.50000000 0.16666667 0.46153846      0.5000000
16  0.961389961 0.31818182 0.45454545 0.36111111 0.38461538      0.5000000
17  0.976833977 0.43506494 0.45454545 0.47222222 0.38461538      0.5000000
18  0.980694981 0.51298701 0.36363636 0.55555556 0.38461538      0.5000000
19  0.980694981 0.50000000 0.36363636 0.47222222 0.30769231      0.5000000
20  0.980694981 0.44805195 0.40909091 0.50000000 0.30769231      0.5714286
21  0.972972973 0.43506494 0.40909091 0.52777778 0.23076923      0.5000000
22  0.976833977 0.33116883 0.45454545 0.44444444 0.23076923      0.5000000
23  0.980694981 0.19480519 0.50000000 0.58333333 0.61538462      0.5714286
24  0.976833977 0.25324675 0.50000000 0.50000000 0.61538462      0.5714286
25  0.969111969 0.06493506 0.54545455 0.55555556 0.53846154      0.5000000
26  0.969111969 0.22077922 0.59090909 0.50000000 0.53846154      0.5000000
27  0.965250965 0.10389610 0.63636364 0.47222222 0.53846154      0.5000000
28  0.961389961 0.05194805 0.63636364 0.47222222 0.53846154      0.5000000
29  0.961389961 0.30519481 0.72727273 0.47222222 0.46153846      0.5000000
30  0.961389961 0.00000000 0.72727273 0.55555556 0.46153846      0.4285714
31  0.961389961 0.16233766 0.72727273 0.36111111 0.46153846      0.4285714
32  0.953667954 0.18181818 0.68181818 0.58333333 0.53846154      0.5000000
33  0.957528958 0.14285714 0.72727273 0.41666667 0.53846154      0.5000000
34  0.667953668 0.46753247 0.68181818 0.61111111 0.53846154      0.5000000
35  0.019305019 0.47402597 0.72727273 0.66666667 0.53846154      0.5000000
36  0.015444015 0.61038961 0.72727273 0.50000000 0.53846154      0.5000000
37  0.030888031 0.42207792 0.72727273 0.52777778 0.53846154      0.5000000
38  0.023166023 0.53896104 0.77272727 0.33333333 0.53846154      0.5000000
39  0.003861004 0.48051948 0.77272727 0.63888889 0.46153846      0.5000000
40  0.023166023 0.57792208 0.81818182 0.50000000 0.53846154      0.5000000
41  0.000000000 0.74025974 0.81818182 0.50000000 0.53846154      0.5714286
42  0.019305019 0.60389610 0.81818182 0.55555556 0.61538462      0.5714286
43  0.023166023 0.56493506 0.86363636 0.58333333 0.53846154      0.5714286
44  0.023166023 0.37012987 0.90909091 0.63888889 0.46153846      0.5714286
45  0.023166023 0.62337662 0.90909091 0.58333333 0.46153846      0.5714286
46  0.023166023 0.53246753 0.95454545 0.69444444 0.38461538      0.5000000
47  0.019305019 0.34415584 0.95454545 0.47222222 0.23076923      0.4285714
48  0.023166023 0.50000000 1.00000000 0.55555556 0.15384615      0.4285714
49  0.023166023 0.21428571 0.95454545 0.61111111 0.15384615      0.4285714
50  0.023166023 0.28571429 1.00000000 0.50000000 0.15384615      0.4285714
51  0.023166023 0.25324675 0.95454545 0.66666667 0.15384615      0.4285714
52  0.019305019 0.38311688 0.95454545 0.58333333 0.15384615      0.4285714
53  0.023166023 0.37012987 0.90909091 0.83333333 0.00000000      0.4285714
54  0.023166023 0.48051948 0.81818182 0.61111111 0.00000000      0.4285714
55  0.019305019 0.77272727 0.72727273 0.88888889 0.15384615      0.5000000
56  0.019305019 0.70129870 0.68181818 0.63888889 0.07692308      0.4285714
57  0.023166023 0.79870130 0.63636364 0.83333333 0.30769231      0.5000000
58  0.023166023 0.91558442 0.63636364 0.77777778 0.53846154      0.5714286
59  0.019305019 1.00000000 0.59090909 0.83333333 0.69230769      0.6428571
60  0.023166023 0.82467532 0.63636364 0.75000000 0.84615385      0.7142857
61  0.023166023 0.85714286 0.63636364 0.72222222 0.84615385      0.6428571
62  0.019305019 0.72727273 0.63636364 0.75000000 0.76923077      0.6428571
63  0.023166023 0.80519481 0.59090909 0.69444444 0.69230769      0.6428571
64  0.023166023 0.87662338 0.54545455 0.86111111 0.69230769      0.5714286
65  0.023166023 0.79870130 0.50000000 0.69444444 0.53846154      0.5000000
66  0.019305019 0.70129870 0.50000000 0.80555556 0.46153846      0.4285714
67  0.023166023 0.77922078 0.45454545 0.80555556 0.53846154      0.4285714
68  0.023166023 0.70129870 0.45454545 0.88888889 0.53846154      0.5000000
69  0.023166023 0.62987013 0.40909091 0.77777778 0.61538462      0.5000000
70  0.023166023 0.57142857 0.40909091 0.94444444 0.61538462      0.5000000
71  0.023166023 0.72727273 0.40909091 0.77777778 0.69230769      0.5714286
72  0.027027027 0.61688312 0.36363636 1.00000000 0.46153846      0.3571429
73  0.027027027 0.80519481 0.36363636 0.66666667 0.69230769      0.5714286
74  0.027027027 0.77922078 0.36363636 0.94444444 1.00000000      1.0000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.76923077      0.7857143
76  0.027027027 0.38311688 0.40909091 0.94444444 0.76923077      0.7142857
77  0.027027027 0.62987013 0.40909091 0.75000000 0.69230769      0.6428571
78  0.027027027 0.55844156 0.45454545 0.83333333 0.53846154      0.4285714
79  0.027027027 0.45454545 0.45454545 0.69444444 0.23076923      0.0000000
80  0.027027027 0.61038961 0.40909091 0.80555556 0.53846154      0.5000000
81  0.030888031 0.64935065 0.45454545 0.72222222 0.53846154      0.5000000
82  0.027027027 0.82467532 0.45454545 0.69444444 0.53846154      0.5000000
83  0.027027027 0.57792208 0.45454545 0.66666667 0.53846154      0.5000000
84  0.023166023 0.85714286 0.45454545 0.52777778 0.46153846      0.5000000
85  0.011583012 0.33766234 0.45454545 0.58333333 0.38461538      0.5000000
86  0.023166023 0.33116883 0.40909091 0.47222222 0.38461538      0.5000000
87  0.030888031 0.55194805 0.31818182 0.72222222 0.30769231      0.5000000
88  0.030888031 0.44805195 0.22727273 0.33333333 0.23076923      0.4285714
89  0.034749035 0.64285714 0.18181818 0.38888889 0.15384615      0.4285714
90  0.034749035 0.39610390 0.18181818 0.44444444 0.15384615      0.5000000
91  0.034749035 0.42857143 0.18181818 0.33333333 0.15384615      0.5714286
92  0.034749035 0.26623377 0.13636364 0.38888889 0.15384615      0.5000000
93  0.034749035 0.32467532 0.09090909 0.22222222 0.53846154      0.5714286
94  0.034749035 0.25324675 0.00000000 0.16666667 0.61538462      0.5714286
95  0.034749035 0.24675325 0.00000000 0.27777778 0.61538462      0.5714286
96  0.034749035 0.39610390 0.04545455 0.19444444 0.53846154      0.5714286
97  0.034749035 0.12337662 0.04545455 0.30555556 0.53846154      0.5714286
98  0.030888031 0.15584416 0.00000000 0.27777778 0.53846154      0.5714286
99  0.030888031 0.07792208 0.00000000 0.00000000 0.53846154      0.5714286
100 0.027027027 0.07792208 0.00000000 0.05555556 0.53846154      0.5000000
101 0.023166023 0.07142857 0.00000000 0.25000000 0.53846154      0.5000000
    B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL  past_data
2      0.93333333     0.194148936      0.4545455    0.284403670 0.04545455
3      0.93333333     0.199468085      0.3636364    0.284403670 0.00000000
4      0.93333333     0.242021277      0.3636364    0.284403670 0.00000000
5      0.86666667     0.260638298      0.3636364    0.284403670 0.04545455
6      0.86666667     0.289893617      0.3636364    0.238532110 0.04545455
7      0.86666667     0.276595745      0.3636364    0.220183486 0.04545455
8      0.86666667     0.303191489      0.3636364    0.201834862 0.09090909
9      0.80000000     0.348404255      0.2727273    0.174311927 0.13636364
10     0.80000000     0.345744681      0.3636364    0.155963303 0.22727273
11     0.80000000     0.377659574      0.3636364    0.137614679 0.22727273
12     0.80000000     0.375000000      0.4545455    0.100917431 0.27272727
13     0.80000000     0.396276596      0.4545455    0.082568807 0.27272727
14     0.80000000     0.375000000      0.4545455    0.064220183 0.36363636
15     0.73333333     0.375000000      0.4545455    0.045871560 0.36363636
16     0.73333333     0.359042553      0.4545455    0.045871560 0.45454545
17     0.73333333     0.351063830      0.4545455    0.036697248 0.36363636
18     0.73333333     0.327127660      0.4545455    0.018348624 0.45454545
19     0.73333333     0.324468085      0.3636364    0.009174312 0.36363636
20     0.66666667     0.321808511      0.4545455    0.009174312 0.45454545
21     0.66666667     0.297872340      0.3636364    0.009174312 0.40909091
22     0.60000000     0.279255319      0.4545455    0.018348624 0.45454545
23     0.60000000     0.265957447      0.3636364    0.000000000 0.36363636
24     0.53333333     0.247340426      0.3636364    0.000000000 0.45454545
25     0.53333333     0.234042553      0.4545455    0.009174312 0.40909091
26     0.53333333     0.228723404      0.4545455    0.009174312 0.40909091
27     0.46666667     0.228723404      0.4545455    0.027522936 0.40909091
28     0.46666667     0.228723404      0.3636364    0.045871560 0.36363636
29     0.46666667     0.223404255      0.3636364    0.064220183 0.50000000
30     0.40000000     0.226063830      0.4545455    0.082568807 0.40909091
31     0.40000000     0.204787234      0.4545455    0.064220183 0.45454545
32     0.40000000     1.000000000      0.3636364    0.357798165 0.40909091
33     0.33333333     0.319148936      0.4545455    0.568807339 0.40909091
34     0.33333333     0.194148936      0.4545455    0.568807339 0.45454545
35     0.33333333     0.175531915      0.4545455    0.596330275 0.31818182
36     0.33333333     0.172872340      0.3636364    0.605504587 0.36363636
37     0.33333333     0.170212766      0.3636364    0.605504587 0.31818182
38     0.33333333     0.170212766      0.4545455    0.577981651 0.36363636
39     0.33333333     0.164893617      0.4545455    0.577981651 0.36363636
40     0.33333333     0.175531915      0.3636364    0.605504587 0.27272727
41     0.33333333     0.180851064      0.3636364    0.642201835 0.31818182
42     0.33333333     0.196808511      0.3636364    0.669724771 0.27272727
43     0.33333333     0.215425532      0.3636364    0.724770642 0.27272727
44     0.33333333     0.231382979      0.3636364    0.770642202 0.22727273
45     0.33333333     0.226063830      0.4545455    0.752293578 0.27272727
46     0.33333333     0.207446809      0.5454545    0.770642202 0.22727273
47     0.33333333     0.204787234      0.4545455    0.770642202 0.22727273
48     0.40000000     0.156914894      0.5454545    0.761467890 0.27272727
49     0.40000000     0.167553191      0.5454545    0.779816514 0.22727273
50     0.40000000     0.223404255      0.5454545    0.807339450 0.27272727
51     0.40000000     0.228723404      0.5454545    0.798165138 0.22727273
52     0.40000000     0.215425532      0.5454545    0.798165138 0.27272727
53     0.46666667     0.114361702      0.5454545    0.779816514 0.27272727
54     0.46666667     0.186170213      0.5454545    0.798165138 0.18181818
55     0.40000000     0.202127660      0.5454545    0.816513761 0.18181818
56     0.33333333     0.172872340      0.5454545    0.798165138 0.09090909
57     0.26666667     0.164893617      0.5454545    0.779816514 0.13636364
58     0.26666667     0.170212766      0.4545455    0.779816514 0.09090909
59     0.26666667     0.207446809      0.3636364    0.816513761 0.18181818
60     0.26666667     0.202127660      0.2727273    0.816513761 0.09090909
61     0.26666667     0.196808511      0.3636364    0.844036697 0.18181818
62     0.26666667     0.191489362      0.3636364    0.853211009 0.13636364
63     0.26666667     0.148936170      0.3636364    0.844036697 0.18181818
64     0.26666667     0.204787234      0.3636364    0.862385321 0.09090909
65     0.26666667     0.220744681      0.4545455    0.853211009 0.13636364
66     0.20000000     0.226063830      0.5454545    0.871559633 0.04545455
67     0.13333333     0.130319149      0.4545455    0.871559633 0.13636364
68     0.13333333     0.090425532      0.4545455    0.889908257 0.13636364
69     0.06666667     0.061170213      0.4545455    0.899082569 0.13636364
70     0.06666667     0.050531915      0.4545455    0.899082569 0.09090909
71     0.06666667     0.029255319      0.4545455    0.908256881 0.09090909
72     0.00000000     0.023936170      0.6363636    0.917431193 0.09090909
73     0.00000000     0.042553191      0.4545455    0.944954128 0.09090909
74     0.00000000     0.039893617      0.0000000    0.954128440 0.09090909
75     0.00000000     0.026595745      0.1818182    0.963302752 0.09090909
76     0.00000000     0.007978723      0.2727273    0.963302752 0.18181818
77     0.00000000     0.010638298      0.3636364    0.981651376 0.09090909
78     0.00000000     0.021276596      0.5454545    1.000000000 0.18181818
79     0.00000000     0.082446809      1.0000000    0.972477064 0.09090909
80     0.00000000     0.023936170      0.5454545    0.972477064 0.22727273
81     0.00000000     0.000000000      0.4545455    0.972477064 0.18181818
82     0.06666667     0.029255319      0.4545455    0.972477064 0.31818182
83     0.06666667     0.042553191      0.4545455    0.944954128 0.31818182
84     0.06666667     0.055851064      0.5454545    0.935779817 0.45454545
85     0.06666667     0.045212766      0.4545455    0.926605505 0.40909091
86     0.06666667     0.058510638      0.4545455    0.935779817 0.50000000
87     0.06666667     0.087765957      0.4545455    0.926605505 0.54545455
88     0.06666667     0.069148936      0.5454545    0.926605505 0.59090909
89     0.06666667     0.085106383      0.5454545    0.917431193 0.72727273
90     0.06666667     0.119680851      0.5454545    0.889908257 0.68181818
91     0.06666667     0.162234043      0.4545455    0.889908257 0.77272727
92     0.06666667     0.156914894      0.4545455    0.889908257 0.77272727
93     0.06666667     0.159574468      0.4545455    0.880733945 0.81818182
94     0.13333333     0.135638298      0.4545455    0.871559633 0.81818182
95     0.13333333     0.180851064      0.4545455    0.889908257 0.81818182
96     0.13333333     0.188829787      0.4545455    0.880733945 0.95454545
97     0.20000000     0.098404255      0.4545455    0.871559633 1.00000000
98     0.13333333     0.159574468      0.5454545    0.862385321 0.95454545
99     0.13333333     0.154255319      0.4545455    0.862385321 0.95454545
100    0.13333333     0.188829787      0.4545455    0.853211009 0.95454545
101    0.13333333     0.223404255      0.4545455    0.844036697 0.86363636

$model.list
$model.list$response
[1] "B_TEMP_VAL"

$model.list$variables
 [1] "B_CL2_VAL"       "B_TURB_VAL"      "B_PH_VAL"        "B_COND_VAL"     
 [5] "B_PRES_OP"       "B_PLNT_PRES_OP"  "B_PLNT_PH_VAL"   "B_PLNT_TURB_VAL"
 [9] "B_PLNT_FLOW_OP"  "B_PLNT_CL2_VAL"  "past_data"      


$err.fct
function (x, y) 
{
    1/2 * (y - x)^2
}
<bytecode: 0x7fd6aa25d4a8>
<environment: 0x7fd6ae32cdc8>
attr(,"type")
[1] "sse"

$act.fct
function (x) 
{
    1/(1 + exp(-x))
}
<bytecode: 0x7fd6aa25ca88>
<environment: 0x7fd6ae327350>
attr(,"type")
[1] "logistic"

$linear.output
[1] TRUE

$data
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.00000000 0.61538462
3   0.996138996 0.34415584 0.27272727 0.33333333 0.00000000 0.61538462
4   0.988416988 0.24675325 0.31818182 0.52777778 0.04545455 0.69230769
5   0.984555985 0.29220779 0.36363636 0.50000000 0.04545455 0.61538462
6   0.984555985 0.22077922 0.36363636 0.55555556 0.04545455 0.69230769
7   0.949806950 0.22077922 0.40909091 0.22222222 0.09090909 0.69230769
8   0.972972973 0.12987013 0.40909091 0.41666667 0.13636364 0.69230769
9   0.969111969 0.12987013 0.45454545 0.22222222 0.22727273 0.76923077
10  0.961389961 0.16883117 0.45454545 0.41666667 0.22727273 0.69230769
11  0.965250965 0.18831169 0.45454545 0.25000000 0.27272727 0.53846154
12  0.949806950 0.29870130 0.45454545 0.38888889 0.27272727 0.46153846
13  0.961389961 0.52597403 0.50000000 0.11111111 0.36363636 0.46153846
14  0.961389961 0.50649351 0.45454545 0.36111111 0.36363636 0.46153846
15  0.961389961 0.51948052 0.50000000 0.16666667 0.45454545 0.46153846
16  0.961389961 0.31818182 0.45454545 0.36111111 0.36363636 0.38461538
17  0.976833977 0.43506494 0.45454545 0.47222222 0.45454545 0.38461538
18  0.980694981 0.51298701 0.36363636 0.55555556 0.36363636 0.38461538
19  0.980694981 0.50000000 0.36363636 0.47222222 0.45454545 0.30769231
20  0.980694981 0.44805195 0.40909091 0.50000000 0.40909091 0.30769231
21  0.972972973 0.43506494 0.40909091 0.52777778 0.45454545 0.23076923
22  0.976833977 0.33116883 0.45454545 0.44444444 0.36363636 0.23076923
23  0.980694981 0.19480519 0.50000000 0.58333333 0.45454545 0.61538462
24  0.976833977 0.25324675 0.50000000 0.50000000 0.40909091 0.61538462
25  0.969111969 0.06493506 0.54545455 0.55555556 0.40909091 0.53846154
26  0.969111969 0.22077922 0.59090909 0.50000000 0.40909091 0.53846154
27  0.965250965 0.10389610 0.63636364 0.47222222 0.36363636 0.53846154
28  0.961389961 0.05194805 0.63636364 0.47222222 0.50000000 0.53846154
29  0.961389961 0.30519481 0.72727273 0.47222222 0.40909091 0.46153846
30  0.961389961 0.00000000 0.72727273 0.55555556 0.45454545 0.46153846
31  0.961389961 0.16233766 0.72727273 0.36111111 0.40909091 0.46153846
32  0.953667954 0.18181818 0.68181818 0.58333333 0.40909091 0.53846154
33  0.957528958 0.14285714 0.72727273 0.41666667 0.45454545 0.53846154
34  0.667953668 0.46753247 0.68181818 0.61111111 0.31818182 0.53846154
35  0.019305019 0.47402597 0.72727273 0.66666667 0.36363636 0.53846154
36  0.015444015 0.61038961 0.72727273 0.50000000 0.31818182 0.53846154
37  0.030888031 0.42207792 0.72727273 0.52777778 0.36363636 0.53846154
38  0.023166023 0.53896104 0.77272727 0.33333333 0.36363636 0.53846154
39  0.003861004 0.48051948 0.77272727 0.63888889 0.27272727 0.46153846
40  0.023166023 0.57792208 0.81818182 0.50000000 0.31818182 0.53846154
41  0.000000000 0.74025974 0.81818182 0.50000000 0.27272727 0.53846154
42  0.019305019 0.60389610 0.81818182 0.55555556 0.27272727 0.61538462
43  0.023166023 0.56493506 0.86363636 0.58333333 0.22727273 0.53846154
44  0.023166023 0.37012987 0.90909091 0.63888889 0.27272727 0.46153846
45  0.023166023 0.62337662 0.90909091 0.58333333 0.22727273 0.46153846
46  0.023166023 0.53246753 0.95454545 0.69444444 0.22727273 0.38461538
47  0.019305019 0.34415584 0.95454545 0.47222222 0.27272727 0.23076923
48  0.023166023 0.50000000 1.00000000 0.55555556 0.22727273 0.15384615
49  0.023166023 0.21428571 0.95454545 0.61111111 0.27272727 0.15384615
50  0.023166023 0.28571429 1.00000000 0.50000000 0.22727273 0.15384615
51  0.023166023 0.25324675 0.95454545 0.66666667 0.27272727 0.15384615
52  0.019305019 0.38311688 0.95454545 0.58333333 0.27272727 0.15384615
53  0.023166023 0.37012987 0.90909091 0.83333333 0.18181818 0.00000000
54  0.023166023 0.48051948 0.81818182 0.61111111 0.18181818 0.00000000
55  0.019305019 0.77272727 0.72727273 0.88888889 0.09090909 0.15384615
56  0.019305019 0.70129870 0.68181818 0.63888889 0.13636364 0.07692308
57  0.023166023 0.79870130 0.63636364 0.83333333 0.09090909 0.30769231
58  0.023166023 0.91558442 0.63636364 0.77777778 0.18181818 0.53846154
59  0.019305019 1.00000000 0.59090909 0.83333333 0.09090909 0.69230769
60  0.023166023 0.82467532 0.63636364 0.75000000 0.18181818 0.84615385
61  0.023166023 0.85714286 0.63636364 0.72222222 0.13636364 0.84615385
62  0.019305019 0.72727273 0.63636364 0.75000000 0.18181818 0.76923077
63  0.023166023 0.80519481 0.59090909 0.69444444 0.09090909 0.69230769
64  0.023166023 0.87662338 0.54545455 0.86111111 0.13636364 0.69230769
65  0.023166023 0.79870130 0.50000000 0.69444444 0.04545455 0.53846154
66  0.019305019 0.70129870 0.50000000 0.80555556 0.13636364 0.46153846
67  0.023166023 0.77922078 0.45454545 0.80555556 0.13636364 0.53846154
68  0.023166023 0.70129870 0.45454545 0.88888889 0.13636364 0.53846154
69  0.023166023 0.62987013 0.40909091 0.77777778 0.09090909 0.61538462
70  0.023166023 0.57142857 0.40909091 0.94444444 0.09090909 0.61538462
71  0.023166023 0.72727273 0.40909091 0.77777778 0.09090909 0.69230769
72  0.027027027 0.61688312 0.36363636 1.00000000 0.09090909 0.46153846
73  0.027027027 0.80519481 0.36363636 0.66666667 0.09090909 0.69230769
74  0.027027027 0.77922078 0.36363636 0.94444444 0.09090909 1.00000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.18181818 0.76923077
76  0.027027027 0.38311688 0.40909091 0.94444444 0.09090909 0.76923077
77  0.027027027 0.62987013 0.40909091 0.75000000 0.18181818 0.69230769
78  0.027027027 0.55844156 0.45454545 0.83333333 0.09090909 0.53846154
79  0.027027027 0.45454545 0.45454545 0.69444444 0.22727273 0.23076923
80  0.027027027 0.61038961 0.40909091 0.80555556 0.18181818 0.53846154
81  0.030888031 0.64935065 0.45454545 0.72222222 0.31818182 0.53846154
82  0.027027027 0.82467532 0.45454545 0.69444444 0.31818182 0.53846154
83  0.027027027 0.57792208 0.45454545 0.66666667 0.45454545 0.53846154
84  0.023166023 0.85714286 0.45454545 0.52777778 0.40909091 0.46153846
85  0.011583012 0.33766234 0.45454545 0.58333333 0.50000000 0.38461538
86  0.023166023 0.33116883 0.40909091 0.47222222 0.54545455 0.38461538
87  0.030888031 0.55194805 0.31818182 0.72222222 0.59090909 0.30769231
88  0.030888031 0.44805195 0.22727273 0.33333333 0.72727273 0.23076923
89  0.034749035 0.64285714 0.18181818 0.38888889 0.68181818 0.15384615
90  0.034749035 0.39610390 0.18181818 0.44444444 0.77272727 0.15384615
91  0.034749035 0.42857143 0.18181818 0.33333333 0.77272727 0.15384615
92  0.034749035 0.26623377 0.13636364 0.38888889 0.81818182 0.15384615
93  0.034749035 0.32467532 0.09090909 0.22222222 0.81818182 0.53846154
94  0.034749035 0.25324675 0.00000000 0.16666667 0.81818182 0.61538462
95  0.034749035 0.24675325 0.00000000 0.27777778 0.95454545 0.61538462
96  0.034749035 0.39610390 0.04545455 0.19444444 1.00000000 0.53846154
97  0.034749035 0.12337662 0.04545455 0.30555556 0.95454545 0.53846154
98  0.030888031 0.15584416 0.00000000 0.27777778 0.95454545 0.53846154
99  0.030888031 0.07792208 0.00000000 0.00000000 0.95454545 0.53846154
100 0.027027027 0.07792208 0.00000000 0.05555556 0.86363636 0.53846154
101 0.023166023 0.07142857 0.00000000 0.25000000 0.90909091 0.53846154
    B_PLNT_PRES_OP B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL
2        0.5000000    0.93333333     0.194148936      0.4545455    0.284403670
3        0.5714286    0.93333333     0.199468085      0.3636364    0.284403670
4        0.5714286    0.93333333     0.242021277      0.3636364    0.284403670
5        0.5000000    0.86666667     0.260638298      0.3636364    0.284403670
6        0.5714286    0.86666667     0.289893617      0.3636364    0.238532110
7        0.6428571    0.86666667     0.276595745      0.3636364    0.220183486
8        0.5714286    0.86666667     0.303191489      0.3636364    0.201834862
9        0.7142857    0.80000000     0.348404255      0.2727273    0.174311927
10       0.5714286    0.80000000     0.345744681      0.3636364    0.155963303
11       0.5000000    0.80000000     0.377659574      0.3636364    0.137614679
12       0.5000000    0.80000000     0.375000000      0.4545455    0.100917431
13       0.5000000    0.80000000     0.396276596      0.4545455    0.082568807
14       0.5000000    0.80000000     0.375000000      0.4545455    0.064220183
15       0.5000000    0.73333333     0.375000000      0.4545455    0.045871560
16       0.5000000    0.73333333     0.359042553      0.4545455    0.045871560
17       0.5000000    0.73333333     0.351063830      0.4545455    0.036697248
18       0.5000000    0.73333333     0.327127660      0.4545455    0.018348624
19       0.5000000    0.73333333     0.324468085      0.3636364    0.009174312
20       0.5714286    0.66666667     0.321808511      0.4545455    0.009174312
21       0.5000000    0.66666667     0.297872340      0.3636364    0.009174312
22       0.5000000    0.60000000     0.279255319      0.4545455    0.018348624
23       0.5714286    0.60000000     0.265957447      0.3636364    0.000000000
24       0.5714286    0.53333333     0.247340426      0.3636364    0.000000000
25       0.5000000    0.53333333     0.234042553      0.4545455    0.009174312
26       0.5000000    0.53333333     0.228723404      0.4545455    0.009174312
27       0.5000000    0.46666667     0.228723404      0.4545455    0.027522936
28       0.5000000    0.46666667     0.228723404      0.3636364    0.045871560
29       0.5000000    0.46666667     0.223404255      0.3636364    0.064220183
30       0.4285714    0.40000000     0.226063830      0.4545455    0.082568807
31       0.4285714    0.40000000     0.204787234      0.4545455    0.064220183
32       0.5000000    0.40000000     1.000000000      0.3636364    0.357798165
33       0.5000000    0.33333333     0.319148936      0.4545455    0.568807339
34       0.5000000    0.33333333     0.194148936      0.4545455    0.568807339
35       0.5000000    0.33333333     0.175531915      0.4545455    0.596330275
36       0.5000000    0.33333333     0.172872340      0.3636364    0.605504587
37       0.5000000    0.33333333     0.170212766      0.3636364    0.605504587
38       0.5000000    0.33333333     0.170212766      0.4545455    0.577981651
39       0.5000000    0.33333333     0.164893617      0.4545455    0.577981651
40       0.5000000    0.33333333     0.175531915      0.3636364    0.605504587
41       0.5714286    0.33333333     0.180851064      0.3636364    0.642201835
42       0.5714286    0.33333333     0.196808511      0.3636364    0.669724771
43       0.5714286    0.33333333     0.215425532      0.3636364    0.724770642
44       0.5714286    0.33333333     0.231382979      0.3636364    0.770642202
45       0.5714286    0.33333333     0.226063830      0.4545455    0.752293578
46       0.5000000    0.33333333     0.207446809      0.5454545    0.770642202
47       0.4285714    0.33333333     0.204787234      0.4545455    0.770642202
48       0.4285714    0.40000000     0.156914894      0.5454545    0.761467890
49       0.4285714    0.40000000     0.167553191      0.5454545    0.779816514
50       0.4285714    0.40000000     0.223404255      0.5454545    0.807339450
51       0.4285714    0.40000000     0.228723404      0.5454545    0.798165138
52       0.4285714    0.40000000     0.215425532      0.5454545    0.798165138
53       0.4285714    0.46666667     0.114361702      0.5454545    0.779816514
54       0.4285714    0.46666667     0.186170213      0.5454545    0.798165138
55       0.5000000    0.40000000     0.202127660      0.5454545    0.816513761
56       0.4285714    0.33333333     0.172872340      0.5454545    0.798165138
57       0.5000000    0.26666667     0.164893617      0.5454545    0.779816514
58       0.5714286    0.26666667     0.170212766      0.4545455    0.779816514
59       0.6428571    0.26666667     0.207446809      0.3636364    0.816513761
60       0.7142857    0.26666667     0.202127660      0.2727273    0.816513761
61       0.6428571    0.26666667     0.196808511      0.3636364    0.844036697
62       0.6428571    0.26666667     0.191489362      0.3636364    0.853211009
63       0.6428571    0.26666667     0.148936170      0.3636364    0.844036697
64       0.5714286    0.26666667     0.204787234      0.3636364    0.862385321
65       0.5000000    0.26666667     0.220744681      0.4545455    0.853211009
66       0.4285714    0.20000000     0.226063830      0.5454545    0.871559633
67       0.4285714    0.13333333     0.130319149      0.4545455    0.871559633
68       0.5000000    0.13333333     0.090425532      0.4545455    0.889908257
69       0.5000000    0.06666667     0.061170213      0.4545455    0.899082569
70       0.5000000    0.06666667     0.050531915      0.4545455    0.899082569
71       0.5714286    0.06666667     0.029255319      0.4545455    0.908256881
72       0.3571429    0.00000000     0.023936170      0.6363636    0.917431193
73       0.5714286    0.00000000     0.042553191      0.4545455    0.944954128
74       1.0000000    0.00000000     0.039893617      0.0000000    0.954128440
75       0.7857143    0.00000000     0.026595745      0.1818182    0.963302752
76       0.7142857    0.00000000     0.007978723      0.2727273    0.963302752
77       0.6428571    0.00000000     0.010638298      0.3636364    0.981651376
78       0.4285714    0.00000000     0.021276596      0.5454545    1.000000000
79       0.0000000    0.00000000     0.082446809      1.0000000    0.972477064
80       0.5000000    0.00000000     0.023936170      0.5454545    0.972477064
81       0.5000000    0.00000000     0.000000000      0.4545455    0.972477064
82       0.5000000    0.06666667     0.029255319      0.4545455    0.972477064
83       0.5000000    0.06666667     0.042553191      0.4545455    0.944954128
84       0.5000000    0.06666667     0.055851064      0.5454545    0.935779817
85       0.5000000    0.06666667     0.045212766      0.4545455    0.926605505
86       0.5000000    0.06666667     0.058510638      0.4545455    0.935779817
87       0.5000000    0.06666667     0.087765957      0.4545455    0.926605505
88       0.4285714    0.06666667     0.069148936      0.5454545    0.926605505
89       0.4285714    0.06666667     0.085106383      0.5454545    0.917431193
90       0.5000000    0.06666667     0.119680851      0.5454545    0.889908257
91       0.5714286    0.06666667     0.162234043      0.4545455    0.889908257
92       0.5000000    0.06666667     0.156914894      0.4545455    0.889908257
93       0.5714286    0.06666667     0.159574468      0.4545455    0.880733945
94       0.5714286    0.13333333     0.135638298      0.4545455    0.871559633
95       0.5714286    0.13333333     0.180851064      0.4545455    0.889908257
96       0.5714286    0.13333333     0.188829787      0.4545455    0.880733945
97       0.5714286    0.20000000     0.098404255      0.4545455    0.871559633
98       0.5714286    0.13333333     0.159574468      0.5454545    0.862385321
99       0.5714286    0.13333333     0.154255319      0.4545455    0.862385321
100      0.5000000    0.13333333     0.188829787      0.4545455    0.853211009
101      0.5000000    0.13333333     0.223404255      0.4545455    0.844036697
     past_data
2   0.04545455
3   0.00000000
4   0.00000000
5   0.04545455
6   0.04545455
7   0.04545455
8   0.09090909
9   0.13636364
10  0.22727273
11  0.22727273
12  0.27272727
13  0.27272727
14  0.36363636
15  0.36363636
16  0.45454545
17  0.36363636
18  0.45454545
19  0.36363636
20  0.45454545
21  0.40909091
22  0.45454545
23  0.36363636
24  0.45454545
25  0.40909091
26  0.40909091
27  0.40909091
28  0.36363636
29  0.50000000
30  0.40909091
31  0.45454545
32  0.40909091
33  0.40909091
34  0.45454545
35  0.31818182
36  0.36363636
37  0.31818182
38  0.36363636
39  0.36363636
40  0.27272727
41  0.31818182
42  0.27272727
43  0.27272727
44  0.22727273
45  0.27272727
46  0.22727273
47  0.22727273
48  0.27272727
49  0.22727273
50  0.27272727
51  0.22727273
52  0.27272727
53  0.27272727
54  0.18181818
55  0.18181818
56  0.09090909
57  0.13636364
58  0.09090909
59  0.18181818
60  0.09090909
61  0.18181818
62  0.13636364
63  0.18181818
64  0.09090909
65  0.13636364
66  0.04545455
67  0.13636364
68  0.13636364
69  0.13636364
70  0.09090909
71  0.09090909
72  0.09090909
73  0.09090909
74  0.09090909
75  0.09090909
76  0.18181818
77  0.09090909
78  0.18181818
79  0.09090909
80  0.22727273
81  0.18181818
82  0.31818182
83  0.31818182
84  0.45454545
85  0.40909091
86  0.50000000
87  0.54545455
88  0.59090909
89  0.72727273
90  0.68181818
91  0.77272727
92  0.77272727
93  0.81818182
94  0.81818182
95  0.81818182
96  0.95454545
97  1.00000000
98  0.95454545
99  0.95454545
100 0.95454545
101 0.86363636

$exclude
NULL

$net.result
$net.result[[1]]
          [,1]
2   0.04513435
3   0.05619106
4   0.02933340
5   0.06091102
6   0.06623703
7   0.13138848
8   0.12785345
9   0.21709065
10  0.23679233
11  0.27636164
12  0.28702727
13  0.32340192
14  0.34545161
15  0.39877443
16  0.45759567
17  0.34527461
18  0.39929411
19  0.34418436
20  0.44267699
21  0.38616514
22  0.46694653
23  0.34711920
24  0.44468259
25  0.41297786
26  0.40337532
27  0.42953075
28  0.38846954
29  0.46413589
30  0.41560815
31  0.47877748
32  0.45277847
33  0.41146791
34  0.38185184
35  0.30120450
36  0.35078249
37  0.32697235
38  0.40178010
39  0.34457672
40  0.27330083
41  0.29939398
42  0.25911261
43  0.25383827
44  0.22525834
45  0.25461166
46  0.20239253
47  0.26084165
48  0.25236070
49  0.23906450
50  0.28919054
51  0.22829865
52  0.26597506
53  0.20662327
54  0.19047177
55  0.12894644
56  0.13246375
57  0.12812388
58  0.08831081
59  0.12611125
60  0.08639855
61  0.14366013
62  0.12305383
63  0.16187840
64  0.06715804
65  0.14591796
66  0.08872213
67  0.13510224
68  0.12875197
69  0.16397020
70  0.10660898
71  0.12434685
72  0.10971165
73  0.15161768
74  0.09636286
75  0.16019246
76  0.18721787
77  0.14200881
78  0.18945316
79  0.17706576
80  0.23898934
81  0.20423715
82  0.28544815
83  0.32152377
84  0.44877974
85  0.45281137
86  0.55608674
87  0.53079619
88  0.67177003
89  0.74809923
90  0.74272885
91  0.82106218
92  0.82081189
93  0.86106700
94  0.86735021
95  0.85323762
96  0.92353223
97  0.93301576
98  0.93376880
99  0.96522819
100 0.95717349
101 0.89658927


$weights
$weights[[1]]
$weights[[1]][[1]]
            [,1]
 [1,] -0.2139730
 [2,] -0.2196470
 [3,] -0.3003846
 [4,] -0.2988422
 [5,] -0.6372156
 [6,] -0.1865132
 [7,]  0.3667303
 [8,] -0.5673595
 [9,]  0.3227560
[10,]  0.2579510
[11,] -0.2831208
[12,]  2.2451406

$weights[[1]][[2]]
           [,1]
[1,] -0.2805949
[2,]  1.4406802



$generalized.weights
$generalized.weights[[1]]
          [,1]       [,2]       [,3]       [,4]       [,5]      [,6]       [,7]
2   -1.2847558 -1.7570052 -1.7479834 -3.7271924 -1.0909502 2.1450738 -3.3185909
3   -1.0687786 -1.4616392 -1.4541340 -3.1006228 -0.9075532 1.7844705 -2.7607103
4   -1.8765221 -2.5662923 -2.5531150 -5.4439594 -1.5934484 3.1331076 -4.8471536
5   -1.0005061 -1.3682713 -1.3612455 -2.9025584 -0.8495797 1.6704804 -2.5843592
6   -0.9351822 -1.2789356 -1.2723686 -2.7130477 -0.7941098 1.5614133 -2.4156240
7   -0.5661634 -0.7742733 -0.7702976 -1.6424911 -0.4807576 0.9452865 -1.4624295
8   -0.5764612 -0.7883563 -0.7843082 -1.6723658 -0.4895019 0.9624800 -1.4890291
9   -0.4209876 -0.5757338 -0.5727775 -1.2213228 -0.3574815 0.7028957 -1.0874327
10  -0.4029976 -0.5511311 -0.5483012 -1.1691324 -0.3422054 0.6728591 -1.0409637
11  -0.3752287 -0.5131549 -0.5105200 -1.0885722 -0.3186254 0.6264951 -0.9692352
12  -0.3692020 -0.5049129 -0.5023203 -1.0710881 -0.3135078 0.6164326 -0.9536678
13  -0.3521114 -0.4815402 -0.4790676 -1.0215068 -0.2989953 0.5878976 -0.9095219
14  -0.3438726 -0.4702730 -0.4678583 -0.9976054 -0.2919994 0.5741419 -0.8882408
15  -0.3288977 -0.4497936 -0.4474840 -0.9541618 -0.2792834 0.5491392 -0.8495598
16  -0.3185378 -0.4356256 -0.4333888 -0.9241068 -0.2704863 0.5318420 -0.8227996
17  -0.3439334 -0.4703561 -0.4679409 -0.9977816 -0.2920510 0.5742433 -0.8883977
18  -0.3287807 -0.4496336 -0.4473249 -0.9538224 -0.2791841 0.5489439 -0.8492576
19  -0.3443093 -0.4708702 -0.4684524 -0.9988723 -0.2923702 0.5748710 -0.8893687
20  -0.3206503 -0.4385147 -0.4362630 -0.9302355 -0.2722802 0.5353691 -0.8282564
21  -0.3318935 -0.4538906 -0.4515600 -0.9628529 -0.2818273 0.5541411 -0.8572980
22  -0.3173768 -0.4340379 -0.4318092 -0.9207386 -0.2695004 0.5299035 -0.8198007
23  -0.3433044 -0.4694960 -0.4670852 -0.9959570 -0.2915169 0.5731932 -0.8867731
24  -0.3203472 -0.4381002 -0.4358506 -0.9293562 -0.2720228 0.5348631 -0.8274735
25  -0.3258753 -0.4456603 -0.4433719 -0.9453936 -0.2767170 0.5440929 -0.8417528
26  -0.3278791 -0.4484006 -0.4460982 -0.9512068 -0.2784185 0.5474385 -0.8469287
27  -0.3227892 -0.4414397 -0.4391730 -0.9364405 -0.2740964 0.5389402 -0.8337812
28  -0.3313230 -0.4531104 -0.4507838 -0.9611979 -0.2813429 0.5531886 -0.8558245
29  -0.3177129 -0.4344975 -0.4322664 -0.9217136 -0.2697858 0.5304646 -0.8206687
30  -0.3253544 -0.4449479 -0.4426632 -0.9438824 -0.2762747 0.5432232 -0.8404073
31  -0.3160814 -0.4322663 -0.4300467 -0.9169805 -0.2684005 0.5277406 -0.8164546
32  -0.3191844 -0.4365099 -0.4342685 -0.9259827 -0.2710354 0.5329216 -0.8244698
33  -0.3261797 -0.4460765 -0.4437860 -0.9462767 -0.2769754 0.5446012 -0.8425390
34  -0.3329899 -0.4553900 -0.4530517 -0.9660336 -0.2827583 0.5559717 -0.8601301
35  -0.3619530 -0.4949994 -0.4924577 -1.0500583 -0.3073524 0.6043296 -0.9349434
36  -0.3420815 -0.4678235 -0.4654213 -0.9924091 -0.2904784 0.5711513 -0.8836142
37  -0.3506807 -0.4795837 -0.4771211 -1.0173564 -0.2977805 0.5855090 -0.9058265
38  -0.3282279 -0.4488776 -0.4465727 -0.9522187 -0.2787147 0.5480209 -0.8478296
39  -0.3441736 -0.4706847 -0.4682678 -0.9984787 -0.2922550 0.5746445 -0.8890183
40  -0.3770579 -0.5156566 -0.5130088 -1.0938790 -0.3201787 0.6295493 -0.9739602
41  -0.3628338 -0.4962040 -0.4936561 -1.0526136 -0.3081003 0.6058002 -0.9372186
42  -0.3861775 -0.5281282 -0.5254164 -1.1203356 -0.3279225 0.6447756 -0.9975164
43  -0.3898590 -0.5331630 -0.5304253 -1.1310160 -0.3310487 0.6509223 -1.0070259
44  -0.4131194 -0.5649734 -0.5620724 -1.1984965 -0.3508003 0.6897587 -1.0671088
45  -0.3893086 -0.5324103 -0.5296764 -1.1294192 -0.3305813 0.6500033 -1.0056042
46  -0.4368536 -0.5974319 -0.5943642 -1.2673517 -0.3709542 0.7293863 -1.1284155
47  -0.3850066 -0.5265269 -0.5238233 -1.1169387 -0.3269283 0.6428206 -0.9944919
48  -0.3909209 -0.5346153 -0.5318701 -1.1340967 -0.3319504 0.6526954 -1.0097689
49  -0.4011279 -0.5485742 -0.5457574 -1.1637082 -0.3406177 0.6697374 -1.0361342
50  -0.3680420 -0.5033265 -0.5007420 -1.0677229 -0.3125228 0.6144959 -0.9506715
51  -0.4103443 -0.5611783 -0.5582968 -1.1904458 -0.3484438 0.6851254 -1.0599406
52  -0.3816302 -0.5219094 -0.5192296 -1.1071435 -0.3240612 0.6371832 -0.9857705
53  -0.4320418 -0.5908514 -0.5878175 -1.2533922 -0.3668682 0.7213523 -1.1159864
54  -0.4516230 -0.6176301 -0.6144587 -1.3101989 -0.3834956 0.7540457 -1.1665655
55  -0.5732159 -0.7839181 -0.7798929 -1.6629511 -0.4867462 0.9570616 -1.4806465
56  -0.5631419 -0.7701411 -0.7661866 -1.6337253 -0.4781919 0.9402416 -1.4546247
57  -0.5756530 -0.7872510 -0.7832087 -1.6700212 -0.4888157 0.9611306 -1.4869415
58  -0.7487135 -1.0239250 -1.0186674 -2.1720854 -0.6357700 1.2500786 -1.9339658
59  -0.5817522 -0.7955921 -0.7915069 -1.6877154 -0.4939948 0.9713140 -1.5026959
60  -0.7610799 -1.0408370 -1.0354925 -2.2079613 -0.6462709 1.2707259 -1.9659088
61  -0.5344137 -0.7308530 -0.7271002 -1.5503822 -0.4537973 0.8922760 -1.3804182
62  -0.5914051 -0.8087932 -0.8046402 -1.7157193 -0.5021915 0.9874308 -1.5276299
63  -0.4963286 -0.6787686 -0.6752833 -1.4398939 -0.4214573 0.8286878 -1.2820424
64  -0.9249400 -1.2649286 -1.2584334 -2.6833341 -0.7854126 1.5443125 -2.3891678
65  -0.5291649 -0.7236748 -0.7199589 -1.5351549 -0.4493403 0.8835124 -1.3668603
66  -0.7461237 -1.0203832 -1.0151438 -2.1645721 -0.6335709 1.2457546 -1.9272763
67  -0.5559350 -0.7602850 -0.7563811 -1.6128174 -0.4720721 0.9282087 -1.4360088
68  -0.5737893 -0.7847022 -0.7806729 -1.6646143 -0.4872331 0.9580189 -1.4821274
69  -0.4925108 -0.6735475 -0.6700890 -1.4288183 -0.4182155 0.8223135 -1.2721810
70  -0.6529602 -0.8929747 -0.8883895 -1.8942962 -0.5544610 1.0902054 -1.6866299
71  -0.5872639 -0.8031299 -0.7990060 -1.7037056 -0.4986751 0.9805166 -1.5169332
72  -0.6399172 -0.8751375 -0.8706438 -1.8564575 -0.5433856 1.0684285 -1.6529394
73  -0.5166251 -0.7065257 -0.7028978 -1.4987759 -0.4386921 0.8625755 -1.3344694
74  -0.7020610 -0.9601239 -0.9551939 -2.0367421 -0.5961550 1.1721859 -1.8134599
75  -0.4994803 -0.6830788 -0.6795713 -1.4490373 -0.4241336 0.8339499 -1.2901834
76  -0.4559969 -0.6236118 -0.6204097 -1.3228880 -0.3872097 0.7613485 -1.1778636
77  -0.5383605 -0.7362506 -0.7324701 -1.5618323 -0.4571487 0.8988657 -1.3906130
78  -0.4529753 -0.6194796 -0.6162987 -1.3141222 -0.3846439 0.7563037 -1.1700588
79  -0.4707210 -0.6437482 -0.6404427 -1.3656041 -0.3997127 0.7859325 -1.2158968
80  -0.4011892 -0.5486579 -0.5458407 -1.1638858 -0.3406697 0.6698396 -1.0362923
81  -0.4347298 -0.5945274 -0.5914746 -1.2611903 -0.3691508 0.7258403 -1.1229296
82  -0.3700616 -0.5060885 -0.5034898 -1.0735820 -0.3142377 0.6178679 -0.9558882
83  -0.3528799 -0.4825912 -0.4801132 -1.0237363 -0.2996479 0.5891807 -0.9115070
84  -0.3197467 -0.4372789 -0.4350336 -0.9276140 -0.2715129 0.5338604 -0.8259223
85  -0.3191799 -0.4365037 -0.4342624 -0.9259696 -0.2710315 0.5329140 -0.8244581
86  -0.3121139 -0.4268405 -0.4246487 -0.9054705 -0.2650315 0.5211164 -0.8062064
87  -0.3125711 -0.4274656 -0.4252707 -0.9067968 -0.2654197 0.5218797 -0.8073872
88  -0.3215603 -0.4397592 -0.4375011 -0.9328755 -0.2730529 0.5368885 -0.8306070
89  -0.3428765 -0.4689108 -0.4665030 -0.9947157 -0.2911535 0.5724788 -0.8856678
90  -0.3407662 -0.4660247 -0.4636317 -0.9885933 -0.2893615 0.5689552 -0.8802166
91  -0.3875745 -0.5300388 -0.5273172 -1.1243886 -0.3291089 0.6471081 -1.0011251
92  -0.3873490 -0.5297304 -0.5270103 -1.1237343 -0.3289173 0.6467316 -1.0005425
93  -0.4350615 -0.5949809 -0.5919259 -1.2621524 -0.3694324 0.7263940 -1.1237863
94  -0.4452998 -0.6089827 -0.6058558 -1.2918549 -0.3781263 0.7434883 -1.1502325
95  -0.4235890 -0.5792915 -0.5763169 -1.2288698 -0.3596905 0.7072392 -1.0941523
96  -0.6149335 -0.8409702 -0.8366520 -1.7839774 -0.5221707 1.0267147 -1.5884050
97  -0.6722555 -0.9193625 -0.9146418 -1.9502736 -0.5708456 1.1224215 -1.7364707
98  -0.6775178 -0.9265592 -0.9218016 -1.9655402 -0.5753142 1.1312078 -1.7500637
99  -1.1027397 -1.5080838 -1.5003402 -3.1991473 -0.9363913 1.8411733 -2.8484339
100 -0.9341165 -1.2774782 -1.2709187 -2.7099561 -0.7932049 1.5596340 -2.4128713
101 -0.5100550 -0.6975406 -0.6939589 -1.4797155 -0.4331132 0.8516059 -1.3174985
         [,8]      [,9]      [,10]     [,11]
2   1.8878597 1.5088032 -1.6560259 13.132244
3   1.5704960 1.2551618 -1.3776353 10.924613
4   2.7574192 2.2037669 -2.4188014 19.181034
5   1.4701745 1.1749834 -1.2896335 10.226761
6   1.3741854 1.0982677 -1.2054321  9.559046
7   0.8319379 0.6648961 -0.7297739  5.787089
8   0.8470698 0.6769897 -0.7430475  5.892348
9   0.6186121 0.4944032 -0.5426450  4.303161
10  0.5921771 0.4732760 -0.5194563  4.119275
11  0.5513726 0.4406645 -0.4836627  3.835433
12  0.5425167 0.4335867 -0.4758943  3.773830
13  0.5174033 0.4135157 -0.4538649  3.599137
14  0.5052970 0.4038402 -0.4432453  3.514924
15  0.4832924 0.3862539 -0.4239429  3.361857
16  0.4680692 0.3740873 -0.4105892  3.255962
17  0.5053862 0.4039116 -0.4433236  3.515545
18  0.4831205 0.3861165 -0.4237921  3.360661
19  0.5059387 0.4043531 -0.4438082  3.519387
20  0.4711734 0.3765682 -0.4133122  3.277555
21  0.4876945 0.3897721 -0.4278044  3.392478
22  0.4663632 0.3727238 -0.4090927  3.244094
23  0.5044621 0.4031729 -0.4425129  3.509116
24  0.4707281 0.3762123 -0.4129215  3.274457
25  0.4788512 0.3827044 -0.4200471  3.330963
26  0.4817956 0.3850576 -0.4226299  3.351445
27  0.4743163 0.3790801 -0.4160691  3.299418
28  0.4868562 0.3891021 -0.4270691  3.386647
29  0.4668570 0.3731185 -0.4095258  3.247530
30  0.4780858 0.3820927 -0.4193757  3.325639
31  0.4644597 0.3712025 -0.4074229  3.230853
32  0.4690194 0.3748467 -0.4114227  3.262571
33  0.4792985 0.3830619 -0.4204394  3.334074
34  0.4893055 0.3910596 -0.4292176  3.403685
35  0.5318649 0.4250737 -0.4665506  3.699734
36  0.5026650 0.4017367 -0.4409365  3.496616
37  0.5153011 0.4118356 -0.4520208  3.584514
38  0.4823081 0.3854672 -0.4230795  3.355010
39  0.5057393 0.4041937 -0.4436333  3.518001
40  0.5540605 0.4428127 -0.4860205  3.854131
41  0.5331592 0.4261081 -0.4676859  3.708738
42  0.5674610 0.4535226 -0.4977754  3.947347
43  0.5728707 0.4578461 -0.5025208  3.984977
44  0.6070503 0.4851629 -0.5325031  4.222736
45  0.5720620 0.4571997 -0.5018114  3.979351
46  0.6419261 0.5130361 -0.5630960  4.465337
47  0.5657405 0.4521475 -0.4962662  3.935378
48  0.5744312 0.4590932 -0.5038896  3.995832
49  0.5894297 0.4710802 -0.5170463  4.100164
50  0.5408122 0.4322245 -0.4743991  3.761973
51  0.6029725 0.4819039 -0.5289260  4.194370
52  0.5607791 0.4481823 -0.4919141  3.900866
53  0.6348555 0.5073852 -0.5568937  4.416153
54  0.6636287 0.5303811 -0.5821334  4.616303
55  0.8423011 0.6731785 -0.7388645  5.859177
56  0.8274980 0.6613477 -0.7258792  5.756204
57  0.8458822 0.6760406 -0.7420058  5.884087
58  1.1001827 0.8792810 -0.9650776  7.653041
59  0.8548445 0.6832033 -0.7498675  5.946430
60  1.1183542 0.8938039 -0.9810176  7.779445
61  0.7852839 0.6276096 -0.6888491  5.462556
62  0.8690288 0.6945396 -0.7623099  6.045098
63  0.7293205 0.5828828 -0.6397581  5.073266
64  1.3591352 1.0862394 -1.1922301  9.454354
65  0.7775711 0.6214454 -0.6820835  5.408905
66  1.0963771 0.8762395 -0.9617394  7.626569
67  0.8169079 0.6528839 -0.7165896  5.682538
68  0.8431436 0.6738518 -0.7396035  5.865037
69  0.7237106 0.5783993 -0.6348371  5.034243
70  0.9594797 0.7668293 -0.8416533  6.674289
71  0.8629437 0.6896763 -0.7569721  6.002770
72  0.9403141 0.7515118 -0.8248412  6.540970
73  0.7591448 0.6067188 -0.6659200  5.280728
74  1.0316300 0.8244927 -0.9049433  7.176178
75  0.7339517 0.5865842 -0.6438206  5.105481
76  0.6700558 0.5355178 -0.5877714  4.661012
77  0.7910835 0.6322447 -0.6939365  5.502899
78  0.6656159 0.5319693 -0.5838766  4.630127
79  0.6916920 0.5528096 -0.6067505  4.811516
80  0.5895197 0.4711521 -0.5171252  4.100790
81  0.6388053 0.5105419 -0.5603585  4.443629
82  0.5437799 0.4345963 -0.4770024  3.782617
83  0.5185326 0.4144183 -0.4548555  3.606993
84  0.4698456 0.3755070 -0.4121474  3.268319
85  0.4690127 0.3748413 -0.4114168  3.262525
86  0.4586298 0.3665431 -0.4023089  3.190299
87  0.4593015 0.3670800 -0.4028982  3.194972
88  0.4725107 0.3776369 -0.4144852  3.286857
89  0.5038333 0.4026704 -0.4419613  3.504742
90  0.5007323 0.4001920 -0.4392411  3.483171
91  0.5695139 0.4551633 -0.4995762  3.961627
92  0.5691825 0.4548984 -0.4992855  3.959321
93  0.6392927 0.5109314 -0.5607860  4.447019
94  0.6543372 0.5229552 -0.5739830  4.551671
95  0.6224347 0.4974583 -0.5459982  4.329752
96  0.9036021 0.7221711 -0.7926376  6.285596
97  0.9878328 0.7894895 -0.8665246  6.871518
98  0.9955655 0.7956695 -0.8733077  6.925308
99  1.6203997 1.2950455 -1.4214106 11.271750
100 1.3726195 1.0970162 -1.2040585  9.548153
101 0.7494905 0.5990030 -0.6574513  5.213572


$startweights
$startweights[[1]]
$startweights[[1]][[1]]
             [,1]
 [1,] -0.36722148
 [2,] -1.04413463
 [3,]  0.56971963
 [4,] -0.13505460
 [5,]  2.40161776
 [6,] -0.03924000
 [7,]  0.68973936
 [8,]  0.02800216
 [9,] -0.74327321
[10,]  0.18879230
[11,] -1.80495863
[12,]  1.46555486

$startweights[[1]][[2]]
          [,1]
[1,] 0.1532533
[2,] 2.1726117



$result.matrix
                                     [,1]
error                         0.152516288
reached.threshold             0.008597734
steps                       966.000000000
Intercept.to.1layhid1        -0.213973022
B_CL2_VAL.to.1layhid1        -0.219646965
B_TURB_VAL.to.1layhid1       -0.300384597
B_PH_VAL.to.1layhid1         -0.298842191
B_COND_VAL.to.1layhid1       -0.637215614
B_PRES_OP.to.1layhid1        -0.186513188
B_PLNT_PRES_OP.to.1layhid1    0.366730339
B_PLNT_PH_VAL.to.1layhid1    -0.567359481
B_PLNT_TURB_VAL.to.1layhid1   0.322755996
B_PLNT_FLOW_OP.to.1layhid1    0.257950985
B_PLNT_CL2_VAL.to.1layhid1   -0.283120774
past_data.to.1layhid1         2.245140582
Intercept.to.B_TEMP_VAL      -0.280594852
1layhid1.to.B_TEMP_VAL        1.440680210

attr(,"class")
[1] "nn"

$modelList$model6
$call
neuralnet(formula = nn_input, data = model_input, hidden = hidden, 
    threshold = threshold, stepmax = stepmax, rep = rep, startweights = unlist(control))

$response
     B_PRES_OP
2   0.61538462
3   0.61538462
4   0.69230769
5   0.61538462
6   0.69230769
7   0.69230769
8   0.69230769
9   0.76923077
10  0.69230769
11  0.53846154
12  0.46153846
13  0.46153846
14  0.46153846
15  0.46153846
16  0.38461538
17  0.38461538
18  0.38461538
19  0.30769231
20  0.30769231
21  0.23076923
22  0.23076923
23  0.61538462
24  0.61538462
25  0.53846154
26  0.53846154
27  0.53846154
28  0.53846154
29  0.46153846
30  0.46153846
31  0.46153846
32  0.53846154
33  0.53846154
34  0.53846154
35  0.53846154
36  0.53846154
37  0.53846154
38  0.53846154
39  0.46153846
40  0.53846154
41  0.53846154
42  0.61538462
43  0.53846154
44  0.46153846
45  0.46153846
46  0.38461538
47  0.23076923
48  0.15384615
49  0.15384615
50  0.15384615
51  0.15384615
52  0.15384615
53  0.00000000
54  0.00000000
55  0.15384615
56  0.07692308
57  0.30769231
58  0.53846154
59  0.69230769
60  0.84615385
61  0.84615385
62  0.76923077
63  0.69230769
64  0.69230769
65  0.53846154
66  0.46153846
67  0.53846154
68  0.53846154
69  0.61538462
70  0.61538462
71  0.69230769
72  0.46153846
73  0.69230769
74  1.00000000
75  0.76923077
76  0.76923077
77  0.69230769
78  0.53846154
79  0.23076923
80  0.53846154
81  0.53846154
82  0.53846154
83  0.53846154
84  0.46153846
85  0.38461538
86  0.38461538
87  0.30769231
88  0.23076923
89  0.15384615
90  0.15384615
91  0.15384615
92  0.15384615
93  0.53846154
94  0.61538462
95  0.61538462
96  0.53846154
97  0.53846154
98  0.53846154
99  0.53846154
100 0.53846154
101 0.53846154

$covariate
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL B_PLNT_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.00000000      0.5000000
3   0.996138996 0.34415584 0.27272727 0.33333333 0.00000000      0.5714286
4   0.988416988 0.24675325 0.31818182 0.52777778 0.04545455      0.5714286
5   0.984555985 0.29220779 0.36363636 0.50000000 0.04545455      0.5000000
6   0.984555985 0.22077922 0.36363636 0.55555556 0.04545455      0.5714286
7   0.949806950 0.22077922 0.40909091 0.22222222 0.09090909      0.6428571
8   0.972972973 0.12987013 0.40909091 0.41666667 0.13636364      0.5714286
9   0.969111969 0.12987013 0.45454545 0.22222222 0.22727273      0.7142857
10  0.961389961 0.16883117 0.45454545 0.41666667 0.22727273      0.5714286
11  0.965250965 0.18831169 0.45454545 0.25000000 0.27272727      0.5000000
12  0.949806950 0.29870130 0.45454545 0.38888889 0.27272727      0.5000000
13  0.961389961 0.52597403 0.50000000 0.11111111 0.36363636      0.5000000
14  0.961389961 0.50649351 0.45454545 0.36111111 0.36363636      0.5000000
15  0.961389961 0.51948052 0.50000000 0.16666667 0.45454545      0.5000000
16  0.961389961 0.31818182 0.45454545 0.36111111 0.36363636      0.5000000
17  0.976833977 0.43506494 0.45454545 0.47222222 0.45454545      0.5000000
18  0.980694981 0.51298701 0.36363636 0.55555556 0.36363636      0.5000000
19  0.980694981 0.50000000 0.36363636 0.47222222 0.45454545      0.5000000
20  0.980694981 0.44805195 0.40909091 0.50000000 0.40909091      0.5714286
21  0.972972973 0.43506494 0.40909091 0.52777778 0.45454545      0.5000000
22  0.976833977 0.33116883 0.45454545 0.44444444 0.36363636      0.5000000
23  0.980694981 0.19480519 0.50000000 0.58333333 0.45454545      0.5714286
24  0.976833977 0.25324675 0.50000000 0.50000000 0.40909091      0.5714286
25  0.969111969 0.06493506 0.54545455 0.55555556 0.40909091      0.5000000
26  0.969111969 0.22077922 0.59090909 0.50000000 0.40909091      0.5000000
27  0.965250965 0.10389610 0.63636364 0.47222222 0.36363636      0.5000000
28  0.961389961 0.05194805 0.63636364 0.47222222 0.50000000      0.5000000
29  0.961389961 0.30519481 0.72727273 0.47222222 0.40909091      0.5000000
30  0.961389961 0.00000000 0.72727273 0.55555556 0.45454545      0.4285714
31  0.961389961 0.16233766 0.72727273 0.36111111 0.40909091      0.4285714
32  0.953667954 0.18181818 0.68181818 0.58333333 0.40909091      0.5000000
33  0.957528958 0.14285714 0.72727273 0.41666667 0.45454545      0.5000000
34  0.667953668 0.46753247 0.68181818 0.61111111 0.31818182      0.5000000
35  0.019305019 0.47402597 0.72727273 0.66666667 0.36363636      0.5000000
36  0.015444015 0.61038961 0.72727273 0.50000000 0.31818182      0.5000000
37  0.030888031 0.42207792 0.72727273 0.52777778 0.36363636      0.5000000
38  0.023166023 0.53896104 0.77272727 0.33333333 0.36363636      0.5000000
39  0.003861004 0.48051948 0.77272727 0.63888889 0.27272727      0.5000000
40  0.023166023 0.57792208 0.81818182 0.50000000 0.31818182      0.5000000
41  0.000000000 0.74025974 0.81818182 0.50000000 0.27272727      0.5714286
42  0.019305019 0.60389610 0.81818182 0.55555556 0.27272727      0.5714286
43  0.023166023 0.56493506 0.86363636 0.58333333 0.22727273      0.5714286
44  0.023166023 0.37012987 0.90909091 0.63888889 0.27272727      0.5714286
45  0.023166023 0.62337662 0.90909091 0.58333333 0.22727273      0.5714286
46  0.023166023 0.53246753 0.95454545 0.69444444 0.22727273      0.5000000
47  0.019305019 0.34415584 0.95454545 0.47222222 0.27272727      0.4285714
48  0.023166023 0.50000000 1.00000000 0.55555556 0.22727273      0.4285714
49  0.023166023 0.21428571 0.95454545 0.61111111 0.27272727      0.4285714
50  0.023166023 0.28571429 1.00000000 0.50000000 0.22727273      0.4285714
51  0.023166023 0.25324675 0.95454545 0.66666667 0.27272727      0.4285714
52  0.019305019 0.38311688 0.95454545 0.58333333 0.27272727      0.4285714
53  0.023166023 0.37012987 0.90909091 0.83333333 0.18181818      0.4285714
54  0.023166023 0.48051948 0.81818182 0.61111111 0.18181818      0.4285714
55  0.019305019 0.77272727 0.72727273 0.88888889 0.09090909      0.5000000
56  0.019305019 0.70129870 0.68181818 0.63888889 0.13636364      0.4285714
57  0.023166023 0.79870130 0.63636364 0.83333333 0.09090909      0.5000000
58  0.023166023 0.91558442 0.63636364 0.77777778 0.18181818      0.5714286
59  0.019305019 1.00000000 0.59090909 0.83333333 0.09090909      0.6428571
60  0.023166023 0.82467532 0.63636364 0.75000000 0.18181818      0.7142857
61  0.023166023 0.85714286 0.63636364 0.72222222 0.13636364      0.6428571
62  0.019305019 0.72727273 0.63636364 0.75000000 0.18181818      0.6428571
63  0.023166023 0.80519481 0.59090909 0.69444444 0.09090909      0.6428571
64  0.023166023 0.87662338 0.54545455 0.86111111 0.13636364      0.5714286
65  0.023166023 0.79870130 0.50000000 0.69444444 0.04545455      0.5000000
66  0.019305019 0.70129870 0.50000000 0.80555556 0.13636364      0.4285714
67  0.023166023 0.77922078 0.45454545 0.80555556 0.13636364      0.4285714
68  0.023166023 0.70129870 0.45454545 0.88888889 0.13636364      0.5000000
69  0.023166023 0.62987013 0.40909091 0.77777778 0.09090909      0.5000000
70  0.023166023 0.57142857 0.40909091 0.94444444 0.09090909      0.5000000
71  0.023166023 0.72727273 0.40909091 0.77777778 0.09090909      0.5714286
72  0.027027027 0.61688312 0.36363636 1.00000000 0.09090909      0.3571429
73  0.027027027 0.80519481 0.36363636 0.66666667 0.09090909      0.5714286
74  0.027027027 0.77922078 0.36363636 0.94444444 0.09090909      1.0000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.18181818      0.7857143
76  0.027027027 0.38311688 0.40909091 0.94444444 0.09090909      0.7142857
77  0.027027027 0.62987013 0.40909091 0.75000000 0.18181818      0.6428571
78  0.027027027 0.55844156 0.45454545 0.83333333 0.09090909      0.4285714
79  0.027027027 0.45454545 0.45454545 0.69444444 0.22727273      0.0000000
80  0.027027027 0.61038961 0.40909091 0.80555556 0.18181818      0.5000000
81  0.030888031 0.64935065 0.45454545 0.72222222 0.31818182      0.5000000
82  0.027027027 0.82467532 0.45454545 0.69444444 0.31818182      0.5000000
83  0.027027027 0.57792208 0.45454545 0.66666667 0.45454545      0.5000000
84  0.023166023 0.85714286 0.45454545 0.52777778 0.40909091      0.5000000
85  0.011583012 0.33766234 0.45454545 0.58333333 0.50000000      0.5000000
86  0.023166023 0.33116883 0.40909091 0.47222222 0.54545455      0.5000000
87  0.030888031 0.55194805 0.31818182 0.72222222 0.59090909      0.5000000
88  0.030888031 0.44805195 0.22727273 0.33333333 0.72727273      0.4285714
89  0.034749035 0.64285714 0.18181818 0.38888889 0.68181818      0.4285714
90  0.034749035 0.39610390 0.18181818 0.44444444 0.77272727      0.5000000
91  0.034749035 0.42857143 0.18181818 0.33333333 0.77272727      0.5714286
92  0.034749035 0.26623377 0.13636364 0.38888889 0.81818182      0.5000000
93  0.034749035 0.32467532 0.09090909 0.22222222 0.81818182      0.5714286
94  0.034749035 0.25324675 0.00000000 0.16666667 0.81818182      0.5714286
95  0.034749035 0.24675325 0.00000000 0.27777778 0.95454545      0.5714286
96  0.034749035 0.39610390 0.04545455 0.19444444 1.00000000      0.5714286
97  0.034749035 0.12337662 0.04545455 0.30555556 0.95454545      0.5714286
98  0.030888031 0.15584416 0.00000000 0.27777778 0.95454545      0.5714286
99  0.030888031 0.07792208 0.00000000 0.00000000 0.95454545      0.5714286
100 0.027027027 0.07792208 0.00000000 0.05555556 0.86363636      0.5000000
101 0.023166023 0.07142857 0.00000000 0.25000000 0.90909091      0.5000000
    B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL  past_data
2      0.93333333     0.194148936      0.4545455    0.284403670 0.69230769
3      0.93333333     0.199468085      0.3636364    0.284403670 0.61538462
4      0.93333333     0.242021277      0.3636364    0.284403670 0.61538462
5      0.86666667     0.260638298      0.3636364    0.284403670 0.69230769
6      0.86666667     0.289893617      0.3636364    0.238532110 0.61538462
7      0.86666667     0.276595745      0.3636364    0.220183486 0.69230769
8      0.86666667     0.303191489      0.3636364    0.201834862 0.69230769
9      0.80000000     0.348404255      0.2727273    0.174311927 0.69230769
10     0.80000000     0.345744681      0.3636364    0.155963303 0.76923077
11     0.80000000     0.377659574      0.3636364    0.137614679 0.69230769
12     0.80000000     0.375000000      0.4545455    0.100917431 0.53846154
13     0.80000000     0.396276596      0.4545455    0.082568807 0.46153846
14     0.80000000     0.375000000      0.4545455    0.064220183 0.46153846
15     0.73333333     0.375000000      0.4545455    0.045871560 0.46153846
16     0.73333333     0.359042553      0.4545455    0.045871560 0.46153846
17     0.73333333     0.351063830      0.4545455    0.036697248 0.38461538
18     0.73333333     0.327127660      0.4545455    0.018348624 0.38461538
19     0.73333333     0.324468085      0.3636364    0.009174312 0.38461538
20     0.66666667     0.321808511      0.4545455    0.009174312 0.30769231
21     0.66666667     0.297872340      0.3636364    0.009174312 0.30769231
22     0.60000000     0.279255319      0.4545455    0.018348624 0.23076923
23     0.60000000     0.265957447      0.3636364    0.000000000 0.23076923
24     0.53333333     0.247340426      0.3636364    0.000000000 0.61538462
25     0.53333333     0.234042553      0.4545455    0.009174312 0.61538462
26     0.53333333     0.228723404      0.4545455    0.009174312 0.53846154
27     0.46666667     0.228723404      0.4545455    0.027522936 0.53846154
28     0.46666667     0.228723404      0.3636364    0.045871560 0.53846154
29     0.46666667     0.223404255      0.3636364    0.064220183 0.53846154
30     0.40000000     0.226063830      0.4545455    0.082568807 0.46153846
31     0.40000000     0.204787234      0.4545455    0.064220183 0.46153846
32     0.40000000     1.000000000      0.3636364    0.357798165 0.46153846
33     0.33333333     0.319148936      0.4545455    0.568807339 0.53846154
34     0.33333333     0.194148936      0.4545455    0.568807339 0.53846154
35     0.33333333     0.175531915      0.4545455    0.596330275 0.53846154
36     0.33333333     0.172872340      0.3636364    0.605504587 0.53846154
37     0.33333333     0.170212766      0.3636364    0.605504587 0.53846154
38     0.33333333     0.170212766      0.4545455    0.577981651 0.53846154
39     0.33333333     0.164893617      0.4545455    0.577981651 0.53846154
40     0.33333333     0.175531915      0.3636364    0.605504587 0.46153846
41     0.33333333     0.180851064      0.3636364    0.642201835 0.53846154
42     0.33333333     0.196808511      0.3636364    0.669724771 0.53846154
43     0.33333333     0.215425532      0.3636364    0.724770642 0.61538462
44     0.33333333     0.231382979      0.3636364    0.770642202 0.53846154
45     0.33333333     0.226063830      0.4545455    0.752293578 0.46153846
46     0.33333333     0.207446809      0.5454545    0.770642202 0.46153846
47     0.33333333     0.204787234      0.4545455    0.770642202 0.38461538
48     0.40000000     0.156914894      0.5454545    0.761467890 0.23076923
49     0.40000000     0.167553191      0.5454545    0.779816514 0.15384615
50     0.40000000     0.223404255      0.5454545    0.807339450 0.15384615
51     0.40000000     0.228723404      0.5454545    0.798165138 0.15384615
52     0.40000000     0.215425532      0.5454545    0.798165138 0.15384615
53     0.46666667     0.114361702      0.5454545    0.779816514 0.15384615
54     0.46666667     0.186170213      0.5454545    0.798165138 0.00000000
55     0.40000000     0.202127660      0.5454545    0.816513761 0.00000000
56     0.33333333     0.172872340      0.5454545    0.798165138 0.15384615
57     0.26666667     0.164893617      0.5454545    0.779816514 0.07692308
58     0.26666667     0.170212766      0.4545455    0.779816514 0.30769231
59     0.26666667     0.207446809      0.3636364    0.816513761 0.53846154
60     0.26666667     0.202127660      0.2727273    0.816513761 0.69230769
61     0.26666667     0.196808511      0.3636364    0.844036697 0.84615385
62     0.26666667     0.191489362      0.3636364    0.853211009 0.84615385
63     0.26666667     0.148936170      0.3636364    0.844036697 0.76923077
64     0.26666667     0.204787234      0.3636364    0.862385321 0.69230769
65     0.26666667     0.220744681      0.4545455    0.853211009 0.69230769
66     0.20000000     0.226063830      0.5454545    0.871559633 0.53846154
67     0.13333333     0.130319149      0.4545455    0.871559633 0.46153846
68     0.13333333     0.090425532      0.4545455    0.889908257 0.53846154
69     0.06666667     0.061170213      0.4545455    0.899082569 0.53846154
70     0.06666667     0.050531915      0.4545455    0.899082569 0.61538462
71     0.06666667     0.029255319      0.4545455    0.908256881 0.61538462
72     0.00000000     0.023936170      0.6363636    0.917431193 0.69230769
73     0.00000000     0.042553191      0.4545455    0.944954128 0.46153846
74     0.00000000     0.039893617      0.0000000    0.954128440 0.69230769
75     0.00000000     0.026595745      0.1818182    0.963302752 1.00000000
76     0.00000000     0.007978723      0.2727273    0.963302752 0.76923077
77     0.00000000     0.010638298      0.3636364    0.981651376 0.76923077
78     0.00000000     0.021276596      0.5454545    1.000000000 0.69230769
79     0.00000000     0.082446809      1.0000000    0.972477064 0.53846154
80     0.00000000     0.023936170      0.5454545    0.972477064 0.23076923
81     0.00000000     0.000000000      0.4545455    0.972477064 0.53846154
82     0.06666667     0.029255319      0.4545455    0.972477064 0.53846154
83     0.06666667     0.042553191      0.4545455    0.944954128 0.53846154
84     0.06666667     0.055851064      0.5454545    0.935779817 0.53846154
85     0.06666667     0.045212766      0.4545455    0.926605505 0.46153846
86     0.06666667     0.058510638      0.4545455    0.935779817 0.38461538
87     0.06666667     0.087765957      0.4545455    0.926605505 0.38461538
88     0.06666667     0.069148936      0.5454545    0.926605505 0.30769231
89     0.06666667     0.085106383      0.5454545    0.917431193 0.23076923
90     0.06666667     0.119680851      0.5454545    0.889908257 0.15384615
91     0.06666667     0.162234043      0.4545455    0.889908257 0.15384615
92     0.06666667     0.156914894      0.4545455    0.889908257 0.15384615
93     0.06666667     0.159574468      0.4545455    0.880733945 0.15384615
94     0.13333333     0.135638298      0.4545455    0.871559633 0.53846154
95     0.13333333     0.180851064      0.4545455    0.889908257 0.61538462
96     0.13333333     0.188829787      0.4545455    0.880733945 0.61538462
97     0.20000000     0.098404255      0.4545455    0.871559633 0.53846154
98     0.13333333     0.159574468      0.5454545    0.862385321 0.53846154
99     0.13333333     0.154255319      0.4545455    0.862385321 0.53846154
100    0.13333333     0.188829787      0.4545455    0.853211009 0.53846154
101    0.13333333     0.223404255      0.4545455    0.844036697 0.53846154

$model.list
$model.list$response
[1] "B_PRES_OP"

$model.list$variables
 [1] "B_CL2_VAL"       "B_TURB_VAL"      "B_PH_VAL"        "B_COND_VAL"     
 [5] "B_TEMP_VAL"      "B_PLNT_PRES_OP"  "B_PLNT_PH_VAL"   "B_PLNT_TURB_VAL"
 [9] "B_PLNT_FLOW_OP"  "B_PLNT_CL2_VAL"  "past_data"      


$err.fct
function (x, y) 
{
    1/2 * (y - x)^2
}
<bytecode: 0x7fd6aa25d4a8>
<environment: 0x7fd6a71936e0>
attr(,"type")
[1] "sse"

$act.fct
function (x) 
{
    1/(1 + exp(-x))
}
<bytecode: 0x7fd6aa25ca88>
<environment: 0x7fd6a7197158>
attr(,"type")
[1] "logistic"

$linear.output
[1] TRUE

$data
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.00000000 0.61538462
3   0.996138996 0.34415584 0.27272727 0.33333333 0.00000000 0.61538462
4   0.988416988 0.24675325 0.31818182 0.52777778 0.04545455 0.69230769
5   0.984555985 0.29220779 0.36363636 0.50000000 0.04545455 0.61538462
6   0.984555985 0.22077922 0.36363636 0.55555556 0.04545455 0.69230769
7   0.949806950 0.22077922 0.40909091 0.22222222 0.09090909 0.69230769
8   0.972972973 0.12987013 0.40909091 0.41666667 0.13636364 0.69230769
9   0.969111969 0.12987013 0.45454545 0.22222222 0.22727273 0.76923077
10  0.961389961 0.16883117 0.45454545 0.41666667 0.22727273 0.69230769
11  0.965250965 0.18831169 0.45454545 0.25000000 0.27272727 0.53846154
12  0.949806950 0.29870130 0.45454545 0.38888889 0.27272727 0.46153846
13  0.961389961 0.52597403 0.50000000 0.11111111 0.36363636 0.46153846
14  0.961389961 0.50649351 0.45454545 0.36111111 0.36363636 0.46153846
15  0.961389961 0.51948052 0.50000000 0.16666667 0.45454545 0.46153846
16  0.961389961 0.31818182 0.45454545 0.36111111 0.36363636 0.38461538
17  0.976833977 0.43506494 0.45454545 0.47222222 0.45454545 0.38461538
18  0.980694981 0.51298701 0.36363636 0.55555556 0.36363636 0.38461538
19  0.980694981 0.50000000 0.36363636 0.47222222 0.45454545 0.30769231
20  0.980694981 0.44805195 0.40909091 0.50000000 0.40909091 0.30769231
21  0.972972973 0.43506494 0.40909091 0.52777778 0.45454545 0.23076923
22  0.976833977 0.33116883 0.45454545 0.44444444 0.36363636 0.23076923
23  0.980694981 0.19480519 0.50000000 0.58333333 0.45454545 0.61538462
24  0.976833977 0.25324675 0.50000000 0.50000000 0.40909091 0.61538462
25  0.969111969 0.06493506 0.54545455 0.55555556 0.40909091 0.53846154
26  0.969111969 0.22077922 0.59090909 0.50000000 0.40909091 0.53846154
27  0.965250965 0.10389610 0.63636364 0.47222222 0.36363636 0.53846154
28  0.961389961 0.05194805 0.63636364 0.47222222 0.50000000 0.53846154
29  0.961389961 0.30519481 0.72727273 0.47222222 0.40909091 0.46153846
30  0.961389961 0.00000000 0.72727273 0.55555556 0.45454545 0.46153846
31  0.961389961 0.16233766 0.72727273 0.36111111 0.40909091 0.46153846
32  0.953667954 0.18181818 0.68181818 0.58333333 0.40909091 0.53846154
33  0.957528958 0.14285714 0.72727273 0.41666667 0.45454545 0.53846154
34  0.667953668 0.46753247 0.68181818 0.61111111 0.31818182 0.53846154
35  0.019305019 0.47402597 0.72727273 0.66666667 0.36363636 0.53846154
36  0.015444015 0.61038961 0.72727273 0.50000000 0.31818182 0.53846154
37  0.030888031 0.42207792 0.72727273 0.52777778 0.36363636 0.53846154
38  0.023166023 0.53896104 0.77272727 0.33333333 0.36363636 0.53846154
39  0.003861004 0.48051948 0.77272727 0.63888889 0.27272727 0.46153846
40  0.023166023 0.57792208 0.81818182 0.50000000 0.31818182 0.53846154
41  0.000000000 0.74025974 0.81818182 0.50000000 0.27272727 0.53846154
42  0.019305019 0.60389610 0.81818182 0.55555556 0.27272727 0.61538462
43  0.023166023 0.56493506 0.86363636 0.58333333 0.22727273 0.53846154
44  0.023166023 0.37012987 0.90909091 0.63888889 0.27272727 0.46153846
45  0.023166023 0.62337662 0.90909091 0.58333333 0.22727273 0.46153846
46  0.023166023 0.53246753 0.95454545 0.69444444 0.22727273 0.38461538
47  0.019305019 0.34415584 0.95454545 0.47222222 0.27272727 0.23076923
48  0.023166023 0.50000000 1.00000000 0.55555556 0.22727273 0.15384615
49  0.023166023 0.21428571 0.95454545 0.61111111 0.27272727 0.15384615
50  0.023166023 0.28571429 1.00000000 0.50000000 0.22727273 0.15384615
51  0.023166023 0.25324675 0.95454545 0.66666667 0.27272727 0.15384615
52  0.019305019 0.38311688 0.95454545 0.58333333 0.27272727 0.15384615
53  0.023166023 0.37012987 0.90909091 0.83333333 0.18181818 0.00000000
54  0.023166023 0.48051948 0.81818182 0.61111111 0.18181818 0.00000000
55  0.019305019 0.77272727 0.72727273 0.88888889 0.09090909 0.15384615
56  0.019305019 0.70129870 0.68181818 0.63888889 0.13636364 0.07692308
57  0.023166023 0.79870130 0.63636364 0.83333333 0.09090909 0.30769231
58  0.023166023 0.91558442 0.63636364 0.77777778 0.18181818 0.53846154
59  0.019305019 1.00000000 0.59090909 0.83333333 0.09090909 0.69230769
60  0.023166023 0.82467532 0.63636364 0.75000000 0.18181818 0.84615385
61  0.023166023 0.85714286 0.63636364 0.72222222 0.13636364 0.84615385
62  0.019305019 0.72727273 0.63636364 0.75000000 0.18181818 0.76923077
63  0.023166023 0.80519481 0.59090909 0.69444444 0.09090909 0.69230769
64  0.023166023 0.87662338 0.54545455 0.86111111 0.13636364 0.69230769
65  0.023166023 0.79870130 0.50000000 0.69444444 0.04545455 0.53846154
66  0.019305019 0.70129870 0.50000000 0.80555556 0.13636364 0.46153846
67  0.023166023 0.77922078 0.45454545 0.80555556 0.13636364 0.53846154
68  0.023166023 0.70129870 0.45454545 0.88888889 0.13636364 0.53846154
69  0.023166023 0.62987013 0.40909091 0.77777778 0.09090909 0.61538462
70  0.023166023 0.57142857 0.40909091 0.94444444 0.09090909 0.61538462
71  0.023166023 0.72727273 0.40909091 0.77777778 0.09090909 0.69230769
72  0.027027027 0.61688312 0.36363636 1.00000000 0.09090909 0.46153846
73  0.027027027 0.80519481 0.36363636 0.66666667 0.09090909 0.69230769
74  0.027027027 0.77922078 0.36363636 0.94444444 0.09090909 1.00000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.18181818 0.76923077
76  0.027027027 0.38311688 0.40909091 0.94444444 0.09090909 0.76923077
77  0.027027027 0.62987013 0.40909091 0.75000000 0.18181818 0.69230769
78  0.027027027 0.55844156 0.45454545 0.83333333 0.09090909 0.53846154
79  0.027027027 0.45454545 0.45454545 0.69444444 0.22727273 0.23076923
80  0.027027027 0.61038961 0.40909091 0.80555556 0.18181818 0.53846154
81  0.030888031 0.64935065 0.45454545 0.72222222 0.31818182 0.53846154
82  0.027027027 0.82467532 0.45454545 0.69444444 0.31818182 0.53846154
83  0.027027027 0.57792208 0.45454545 0.66666667 0.45454545 0.53846154
84  0.023166023 0.85714286 0.45454545 0.52777778 0.40909091 0.46153846
85  0.011583012 0.33766234 0.45454545 0.58333333 0.50000000 0.38461538
86  0.023166023 0.33116883 0.40909091 0.47222222 0.54545455 0.38461538
87  0.030888031 0.55194805 0.31818182 0.72222222 0.59090909 0.30769231
88  0.030888031 0.44805195 0.22727273 0.33333333 0.72727273 0.23076923
89  0.034749035 0.64285714 0.18181818 0.38888889 0.68181818 0.15384615
90  0.034749035 0.39610390 0.18181818 0.44444444 0.77272727 0.15384615
91  0.034749035 0.42857143 0.18181818 0.33333333 0.77272727 0.15384615
92  0.034749035 0.26623377 0.13636364 0.38888889 0.81818182 0.15384615
93  0.034749035 0.32467532 0.09090909 0.22222222 0.81818182 0.53846154
94  0.034749035 0.25324675 0.00000000 0.16666667 0.81818182 0.61538462
95  0.034749035 0.24675325 0.00000000 0.27777778 0.95454545 0.61538462
96  0.034749035 0.39610390 0.04545455 0.19444444 1.00000000 0.53846154
97  0.034749035 0.12337662 0.04545455 0.30555556 0.95454545 0.53846154
98  0.030888031 0.15584416 0.00000000 0.27777778 0.95454545 0.53846154
99  0.030888031 0.07792208 0.00000000 0.00000000 0.95454545 0.53846154
100 0.027027027 0.07792208 0.00000000 0.05555556 0.86363636 0.53846154
101 0.023166023 0.07142857 0.00000000 0.25000000 0.90909091 0.53846154
    B_PLNT_PRES_OP B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL
2        0.5000000    0.93333333     0.194148936      0.4545455    0.284403670
3        0.5714286    0.93333333     0.199468085      0.3636364    0.284403670
4        0.5714286    0.93333333     0.242021277      0.3636364    0.284403670
5        0.5000000    0.86666667     0.260638298      0.3636364    0.284403670
6        0.5714286    0.86666667     0.289893617      0.3636364    0.238532110
7        0.6428571    0.86666667     0.276595745      0.3636364    0.220183486
8        0.5714286    0.86666667     0.303191489      0.3636364    0.201834862
9        0.7142857    0.80000000     0.348404255      0.2727273    0.174311927
10       0.5714286    0.80000000     0.345744681      0.3636364    0.155963303
11       0.5000000    0.80000000     0.377659574      0.3636364    0.137614679
12       0.5000000    0.80000000     0.375000000      0.4545455    0.100917431
13       0.5000000    0.80000000     0.396276596      0.4545455    0.082568807
14       0.5000000    0.80000000     0.375000000      0.4545455    0.064220183
15       0.5000000    0.73333333     0.375000000      0.4545455    0.045871560
16       0.5000000    0.73333333     0.359042553      0.4545455    0.045871560
17       0.5000000    0.73333333     0.351063830      0.4545455    0.036697248
18       0.5000000    0.73333333     0.327127660      0.4545455    0.018348624
19       0.5000000    0.73333333     0.324468085      0.3636364    0.009174312
20       0.5714286    0.66666667     0.321808511      0.4545455    0.009174312
21       0.5000000    0.66666667     0.297872340      0.3636364    0.009174312
22       0.5000000    0.60000000     0.279255319      0.4545455    0.018348624
23       0.5714286    0.60000000     0.265957447      0.3636364    0.000000000
24       0.5714286    0.53333333     0.247340426      0.3636364    0.000000000
25       0.5000000    0.53333333     0.234042553      0.4545455    0.009174312
26       0.5000000    0.53333333     0.228723404      0.4545455    0.009174312
27       0.5000000    0.46666667     0.228723404      0.4545455    0.027522936
28       0.5000000    0.46666667     0.228723404      0.3636364    0.045871560
29       0.5000000    0.46666667     0.223404255      0.3636364    0.064220183
30       0.4285714    0.40000000     0.226063830      0.4545455    0.082568807
31       0.4285714    0.40000000     0.204787234      0.4545455    0.064220183
32       0.5000000    0.40000000     1.000000000      0.3636364    0.357798165
33       0.5000000    0.33333333     0.319148936      0.4545455    0.568807339
34       0.5000000    0.33333333     0.194148936      0.4545455    0.568807339
35       0.5000000    0.33333333     0.175531915      0.4545455    0.596330275
36       0.5000000    0.33333333     0.172872340      0.3636364    0.605504587
37       0.5000000    0.33333333     0.170212766      0.3636364    0.605504587
38       0.5000000    0.33333333     0.170212766      0.4545455    0.577981651
39       0.5000000    0.33333333     0.164893617      0.4545455    0.577981651
40       0.5000000    0.33333333     0.175531915      0.3636364    0.605504587
41       0.5714286    0.33333333     0.180851064      0.3636364    0.642201835
42       0.5714286    0.33333333     0.196808511      0.3636364    0.669724771
43       0.5714286    0.33333333     0.215425532      0.3636364    0.724770642
44       0.5714286    0.33333333     0.231382979      0.3636364    0.770642202
45       0.5714286    0.33333333     0.226063830      0.4545455    0.752293578
46       0.5000000    0.33333333     0.207446809      0.5454545    0.770642202
47       0.4285714    0.33333333     0.204787234      0.4545455    0.770642202
48       0.4285714    0.40000000     0.156914894      0.5454545    0.761467890
49       0.4285714    0.40000000     0.167553191      0.5454545    0.779816514
50       0.4285714    0.40000000     0.223404255      0.5454545    0.807339450
51       0.4285714    0.40000000     0.228723404      0.5454545    0.798165138
52       0.4285714    0.40000000     0.215425532      0.5454545    0.798165138
53       0.4285714    0.46666667     0.114361702      0.5454545    0.779816514
54       0.4285714    0.46666667     0.186170213      0.5454545    0.798165138
55       0.5000000    0.40000000     0.202127660      0.5454545    0.816513761
56       0.4285714    0.33333333     0.172872340      0.5454545    0.798165138
57       0.5000000    0.26666667     0.164893617      0.5454545    0.779816514
58       0.5714286    0.26666667     0.170212766      0.4545455    0.779816514
59       0.6428571    0.26666667     0.207446809      0.3636364    0.816513761
60       0.7142857    0.26666667     0.202127660      0.2727273    0.816513761
61       0.6428571    0.26666667     0.196808511      0.3636364    0.844036697
62       0.6428571    0.26666667     0.191489362      0.3636364    0.853211009
63       0.6428571    0.26666667     0.148936170      0.3636364    0.844036697
64       0.5714286    0.26666667     0.204787234      0.3636364    0.862385321
65       0.5000000    0.26666667     0.220744681      0.4545455    0.853211009
66       0.4285714    0.20000000     0.226063830      0.5454545    0.871559633
67       0.4285714    0.13333333     0.130319149      0.4545455    0.871559633
68       0.5000000    0.13333333     0.090425532      0.4545455    0.889908257
69       0.5000000    0.06666667     0.061170213      0.4545455    0.899082569
70       0.5000000    0.06666667     0.050531915      0.4545455    0.899082569
71       0.5714286    0.06666667     0.029255319      0.4545455    0.908256881
72       0.3571429    0.00000000     0.023936170      0.6363636    0.917431193
73       0.5714286    0.00000000     0.042553191      0.4545455    0.944954128
74       1.0000000    0.00000000     0.039893617      0.0000000    0.954128440
75       0.7857143    0.00000000     0.026595745      0.1818182    0.963302752
76       0.7142857    0.00000000     0.007978723      0.2727273    0.963302752
77       0.6428571    0.00000000     0.010638298      0.3636364    0.981651376
78       0.4285714    0.00000000     0.021276596      0.5454545    1.000000000
79       0.0000000    0.00000000     0.082446809      1.0000000    0.972477064
80       0.5000000    0.00000000     0.023936170      0.5454545    0.972477064
81       0.5000000    0.00000000     0.000000000      0.4545455    0.972477064
82       0.5000000    0.06666667     0.029255319      0.4545455    0.972477064
83       0.5000000    0.06666667     0.042553191      0.4545455    0.944954128
84       0.5000000    0.06666667     0.055851064      0.5454545    0.935779817
85       0.5000000    0.06666667     0.045212766      0.4545455    0.926605505
86       0.5000000    0.06666667     0.058510638      0.4545455    0.935779817
87       0.5000000    0.06666667     0.087765957      0.4545455    0.926605505
88       0.4285714    0.06666667     0.069148936      0.5454545    0.926605505
89       0.4285714    0.06666667     0.085106383      0.5454545    0.917431193
90       0.5000000    0.06666667     0.119680851      0.5454545    0.889908257
91       0.5714286    0.06666667     0.162234043      0.4545455    0.889908257
92       0.5000000    0.06666667     0.156914894      0.4545455    0.889908257
93       0.5714286    0.06666667     0.159574468      0.4545455    0.880733945
94       0.5714286    0.13333333     0.135638298      0.4545455    0.871559633
95       0.5714286    0.13333333     0.180851064      0.4545455    0.889908257
96       0.5714286    0.13333333     0.188829787      0.4545455    0.880733945
97       0.5714286    0.20000000     0.098404255      0.4545455    0.871559633
98       0.5714286    0.13333333     0.159574468      0.5454545    0.862385321
99       0.5714286    0.13333333     0.154255319      0.4545455    0.862385321
100      0.5000000    0.13333333     0.188829787      0.4545455    0.853211009
101      0.5000000    0.13333333     0.223404255      0.4545455    0.844036697
     past_data
2   0.69230769
3   0.61538462
4   0.61538462
5   0.69230769
6   0.61538462
7   0.69230769
8   0.69230769
9   0.69230769
10  0.76923077
11  0.69230769
12  0.53846154
13  0.46153846
14  0.46153846
15  0.46153846
16  0.46153846
17  0.38461538
18  0.38461538
19  0.38461538
20  0.30769231
21  0.30769231
22  0.23076923
23  0.23076923
24  0.61538462
25  0.61538462
26  0.53846154
27  0.53846154
28  0.53846154
29  0.53846154
30  0.46153846
31  0.46153846
32  0.46153846
33  0.53846154
34  0.53846154
35  0.53846154
36  0.53846154
37  0.53846154
38  0.53846154
39  0.53846154
40  0.46153846
41  0.53846154
42  0.53846154
43  0.61538462
44  0.53846154
45  0.46153846
46  0.46153846
47  0.38461538
48  0.23076923
49  0.15384615
50  0.15384615
51  0.15384615
52  0.15384615
53  0.15384615
54  0.00000000
55  0.00000000
56  0.15384615
57  0.07692308
58  0.30769231
59  0.53846154
60  0.69230769
61  0.84615385
62  0.84615385
63  0.76923077
64  0.69230769
65  0.69230769
66  0.53846154
67  0.46153846
68  0.53846154
69  0.53846154
70  0.61538462
71  0.61538462
72  0.69230769
73  0.46153846
74  0.69230769
75  1.00000000
76  0.76923077
77  0.76923077
78  0.69230769
79  0.53846154
80  0.23076923
81  0.53846154
82  0.53846154
83  0.53846154
84  0.53846154
85  0.46153846
86  0.38461538
87  0.38461538
88  0.30769231
89  0.23076923
90  0.15384615
91  0.15384615
92  0.15384615
93  0.15384615
94  0.53846154
95  0.61538462
96  0.61538462
97  0.53846154
98  0.53846154
99  0.53846154
100 0.53846154
101 0.53846154

$exclude
NULL

$net.result
$net.result[[1]]
          [,1]
2   0.60696196
3   0.63341202
4   0.61578877
5   0.61274223
6   0.63311166
7   0.71954846
8   0.66043936
9   0.75662012
10  0.69108535
11  0.60390727
12  0.50478112
13  0.43868452
14  0.42646629
15  0.42873541
16  0.45444800
17  0.36477624
18  0.39094507
19  0.37228660
20  0.41927481
21  0.33176194
22  0.32988369
23  0.36771353
24  0.62651592
25  0.56719041
26  0.51456061
27  0.54502008
28  0.51154399
29  0.51296769
30  0.41123527
31  0.42880740
32  0.54462886
33  0.52169696
34  0.51494063
35  0.47225111
36  0.48937319
37  0.48422544
38  0.48728957
39  0.49366578
40  0.43371519
41  0.54739095
42  0.55024517
43  0.59770438
44  0.54341803
45  0.50182140
46  0.42258995
47  0.31317456
48  0.17496986
49  0.12463825
50  0.14179603
51  0.12402193
52  0.12164180
53  0.10669609
54  0.03169228
55  0.12602769
56  0.19021679
57  0.23229487
58  0.43182928
59  0.64627277
60  0.74817930
61  0.77048254
62  0.76505861
63  0.75255705
64  0.66299561
65  0.64726881
66  0.49428666
67  0.45786641
68  0.56044751
69  0.59843770
70  0.63020872
71  0.68189950
72  0.56703746
73  0.62860213
74  0.90164433
75  0.89755533
76  0.82665473
77  0.78074686
78  0.62348696
79  0.09325265
80  0.39783344
81  0.54715864
82  0.52643307
83  0.50662991
84  0.51547138
85  0.46529662
86  0.41756118
87  0.38979237
88  0.26511871
89  0.21962036
90  0.22781434
91  0.31415778
92  0.23583215
93  0.32498735
94  0.56226558
95  0.56772979
96  0.55181606
97  0.49838088
98  0.52658132
99  0.54792097
100 0.50944768
101 0.48885364


$weights
$weights[[1]]
$weights[[1]][[1]]
             [,1]
 [1,]  0.55494230
 [2,] -0.08017597
 [3,]  0.13665728
 [4,]  0.30207022
 [5,]  0.18965922
 [6,]  0.78660201
 [7,] -2.64135842
 [8,]  0.79025034
 [9,] -0.29323669
[10,]  0.03564035
[11,]  0.19993993
[12,] -1.75658892

$weights[[1]][[2]]
          [,1]
[1,]  1.004487
[2,] -1.571126



$generalized.weights
$generalized.weights[[1]]
          [,1]       [,2]       [,3]       [,4]       [,5]      [,6]       [,7]
2   0.09979803 -0.1701024 -0.3759981 -0.2360759 -0.9791130  3.287798 -0.9836542
3   0.09786557 -0.1668086 -0.3687174 -0.2315046 -0.9601537  3.224134 -0.9646070
4   0.09913304 -0.1689690 -0.3734927 -0.2345029 -0.9725889  3.265890 -0.9770998
5   0.09936022 -0.1693562 -0.3743486 -0.2350403 -0.9748177  3.273374 -0.9793390
6   0.09788652 -0.1668443 -0.3687963 -0.2315542 -0.9603593  3.224824 -0.9648135
7   0.09267670 -0.1579644 -0.3491679 -0.2192302 -0.9092460  3.053189 -0.9134632
8   0.09606687 -0.1637428 -0.3619406 -0.2272497 -0.9425068  3.164876 -0.9468782
9   0.09089370 -0.1549253 -0.3424502 -0.2150124 -0.8917531  2.994449 -0.8958891
10  0.09422140 -0.1605973 -0.3549877 -0.2228842 -0.9244010  3.104079 -0.9286885
11  0.10003305 -0.1705030 -0.3768836 -0.2366319 -0.9814188  3.295540 -0.9859707
12  0.10929671 -0.1862926 -0.4117853 -0.2585454 -1.0723041  3.600727 -1.0772775
13  0.11788120 -0.2009246 -0.4441281 -0.2788524 -1.1565260  3.883539 -1.1618901
14  0.11976453 -0.2041347 -0.4512237 -0.2833074 -1.1750033  3.945585 -1.1804530
15  0.11940655 -0.2035245 -0.4498750 -0.2824606 -1.1714911  3.933791 -1.1769246
16  0.11560299 -0.1970415 -0.4355447 -0.2734632 -1.1341746  3.808485 -1.1394350
17  0.13122209 -0.2236637 -0.4943911 -0.3104107 -1.2874127  4.323048 -1.2933839
18  0.12591636 -0.2146203 -0.4744013 -0.2978598 -1.2353585  4.148254 -1.2410882
19  0.12962249 -0.2209372 -0.4883645 -0.3066268 -1.2717192  4.270350 -1.2776175
20  0.12092499 -0.2061127 -0.4555959 -0.2860526 -1.1863885  3.983815 -1.1918911
21  0.13911798 -0.2371220 -0.5241396 -0.3290888 -1.3648789  4.583175 -1.3712094
22  0.13961496 -0.2379691 -0.5260120 -0.3302644 -1.3697547  4.599547 -1.3761078
23  0.13058866 -0.2225840 -0.4920046 -0.3089123 -1.2811982  4.302180 -1.2871405
24  0.09835224 -0.1676381 -0.3705510 -0.2326559 -0.9649285  3.240167 -0.9694039
25  0.10306974 -0.1756790 -0.3883246 -0.2438153 -1.0112115  3.395583 -1.0159016
26  0.10821770 -0.1844535 -0.4077200 -0.2559930 -1.0617179  3.565180 -1.0666423
27  0.10511247 -0.1791607 -0.3960208 -0.2486475 -1.0312527  3.462880 -1.0360358
28  0.10854602 -0.1850131 -0.4089570 -0.2567696 -1.0649390  3.575996 -1.0698783
29  0.10839057 -0.1847481 -0.4083713 -0.2564019 -1.0634140  3.570875 -1.0683462
30  0.12227089 -0.2084067 -0.4606667 -0.2892363 -1.1995931  4.028156 -1.2051569
31  0.11939525 -0.2035053 -0.4498324 -0.2824339 -1.1713803  3.933419 -1.1768133
32  0.10515008 -0.1792248 -0.3961625 -0.2487364 -1.0316217  3.464119 -1.0364064
33  0.10745657 -0.1831562 -0.4048524 -0.2541925 -1.0542505  3.540105 -1.0591402
34  0.10817662 -0.1843835 -0.4075652 -0.2558958 -1.0613149  3.563827 -1.0662374
35  0.11321569 -0.1929724 -0.4265504 -0.2678159 -1.1107529  3.729836 -1.1159047
36  0.11108655 -0.1893434 -0.4185287 -0.2627794 -1.0898641  3.659693 -1.0949190
37  0.11171052 -0.1904069 -0.4208795 -0.2642554 -1.0959858  3.680249 -1.1010691
38  0.11133749 -0.1897711 -0.4194741 -0.2633730 -1.0923260  3.667960 -1.0973923
39  0.11057641 -0.1884738 -0.4166067 -0.2615726 -1.0848591  3.642886 -1.0898908
40  0.11863421 -0.2022081 -0.4469652 -0.2806336 -1.1639138  3.908347 -1.1693121
41  0.10488578 -0.1787743 -0.3951667 -0.2481112 -1.0290286  3.455411 -1.0338014
42  0.10461556 -0.1783138 -0.3941486 -0.2474720 -1.0263776  3.446509 -1.0311380
43  0.10051823 -0.1713300 -0.3787115 -0.2377796 -0.9861788  3.311524 -0.9907528
44  0.10526682 -0.1794238 -0.3966023 -0.2490126 -1.0327670  3.467965 -1.0375571
45  0.10963179 -0.1868638 -0.4130477 -0.2593381 -1.0755915  3.611766 -1.0805802
46  0.12038508 -0.2051924 -0.4535617 -0.2847754 -1.1810914  3.966028 -1.1865694
47  0.14429970 -0.2459541 -0.5436622 -0.3413463 -1.4157164  4.753884 -1.4222826
48  0.21747060 -0.3706714 -0.8193402 -0.5144348 -2.1335921  7.164464 -2.1434879
49  0.28448196 -0.4848901 -1.0718116 -0.6729526 -2.7910369  9.372121 -2.8039820
50  0.25629140 -0.4368402 -0.9656011 -0.6062668 -2.5144609  8.443396 -2.5261232
51  0.28563976 -0.4868635 -1.0761737 -0.6756914 -2.8023960  9.410264 -2.8153938
52  0.29022117 -0.4946724 -1.0934346 -0.6865290 -2.8473440  9.561196 -2.8605503
53  0.32366229 -0.5516717 -1.2194270 -0.7656352 -3.1754330 10.662898 -3.1901609
54  0.96789772 -1.6497497 -3.6466424 -2.2895980 -9.4959915 31.886922 -9.5400348
55  0.28191337 -0.4805120 -1.0621342 -0.6668765 -2.7658366  9.287500 -2.7786648
56  0.20417256 -0.3480054 -0.7692386 -0.4829778 -2.0031258  6.726366 -2.0124165
57  0.17653688 -0.3009013 -0.6651187 -0.4176045 -1.7319936  5.815922 -1.7400268
58  0.11892458 -0.2027030 -0.4480592 -0.2813205 -1.1667626  3.917913 -1.1721741
59  0.09698861 -0.1653139 -0.3654134 -0.2294302 -0.9515500  3.195243 -0.9559633
60  0.09127739 -0.1555793 -0.3438958 -0.2159201 -0.8955175  3.007090 -0.8996710
61  0.09029203 -0.1538998 -0.3401834 -0.2135891 -0.8858501  2.974627 -0.8899588
62  0.09052321 -0.1542938 -0.3410544 -0.2141360 -0.8881182  2.982243 -0.8922374
63  0.09107676 -0.1552373 -0.3431399 -0.2154455 -0.8935491  3.000480 -0.8976934
64  0.09590531 -0.1634674 -0.3613320 -0.2268676 -0.9409218  3.159554 -0.9452858
65  0.09692231 -0.1652009 -0.3651636 -0.2292733 -0.9508995  3.193059 -0.9553099
66  0.11050338 -0.1883494 -0.4163315 -0.2613998 -1.0841426  3.640480 -1.0891709
67  0.11512995 -0.1962352 -0.4337625 -0.2723442 -1.1295336  3.792901 -1.1347725
68  0.10367314 -0.1767074 -0.3905980 -0.2452427 -1.0171315  3.415462 -1.0218491
69  0.10046030 -0.1712313 -0.3784933 -0.2376426 -0.9856105  3.309616 -0.9901819
70  0.09809018 -0.1671915 -0.3695636 -0.2320360 -0.9623573  3.231533 -0.9668208
71  0.09475405 -0.1615051 -0.3569945 -0.2241442 -0.9296268  3.121626 -0.9339385
72  0.10308326 -0.1757020 -0.3883755 -0.2438473 -1.0113442  3.396028 -1.0160349
73  0.09820378 -0.1673851 -0.3699916 -0.2323047 -0.9634719  3.235276 -0.9679405
74  0.08689224 -0.1481049 -0.3273744 -0.2055468 -0.8524950  2.862623 -0.8564489
75  0.08689343 -0.1481070 -0.3273789 -0.2055496 -0.8525067  2.862662 -0.8564607
76  0.08823683 -0.1503968 -0.3324402 -0.2087275 -0.8656867  2.906920 -0.8697018
77  0.08986958 -0.1531797 -0.3385918 -0.2125898 -0.8817055  2.960710 -0.8857950
78  0.09856974 -0.1680089 -0.3713704 -0.2331704 -0.9670623  3.247333 -0.9715477
79  0.36290137 -0.6185534 -1.3672638 -0.8584567 -3.5604055 11.955610 -3.5769190
80  0.12463668 -0.2124391 -0.4695800 -0.2948327 -1.2228036  4.106095 -1.2284751
81  0.10490790 -0.1788121 -0.3952500 -0.2481635 -1.0292457  3.456140 -1.0340194
82  0.10696318 -0.1823152 -0.4029935 -0.2530254 -1.0494099  3.523850 -1.0542771
83  0.10908945 -0.1859394 -0.4110044 -0.2580551 -1.0702706  3.593899 -1.0752346
84  0.10811935 -0.1842859 -0.4073495 -0.2557603 -1.0607531  3.561940 -1.0656729
85  0.11412613 -0.1945242 -0.4299805 -0.2699696 -1.1196852  3.759830 -1.1248784
86  0.12120748 -0.2065941 -0.4566602 -0.2867208 -1.1891599  3.993122 -1.1946754
87  0.12613496 -0.2149929 -0.4752249 -0.2983769 -1.2375032  4.155455 -1.2432428
88  0.16107694 -0.2745503 -0.6068720 -0.3810335 -1.5803170  5.306602 -1.5876467
89  0.18374540 -0.3131880 -0.6922775 -0.4346566 -1.8027161  6.053403 -1.8110772
90  0.17899336 -0.3050883 -0.6743737 -0.4234154 -1.7560940  5.896850 -1.7642389
91  0.14401018 -0.2454606 -0.5425714 -0.3406614 -1.4128760  4.744346 -1.4194290
92  0.17466356 -0.2977083 -0.6580608 -0.4131731 -1.7136147  5.754207 -1.7215626
93  0.14093764 -0.2402236 -0.5309954 -0.3333932 -1.3827315  4.643123 -1.3891447
94  0.10350896 -0.1764276 -0.3899794 -0.2448543 -1.0155207  3.410053 -1.0202308
95  0.10302212 -0.1755978 -0.3881452 -0.2437026 -1.0107443  3.394014 -1.0154323
96  0.10446809 -0.1780624 -0.3935930 -0.2471231 -1.0249307  3.441651 -1.0296844
97  0.11002642 -0.1875364 -0.4145345 -0.2602716 -1.0794632  3.624767 -1.0844699
98  0.10694788 -0.1822891 -0.4029358 -0.2529892 -1.0492598  3.523346 -1.0541264
99  0.10483538 -0.1786884 -0.3949768 -0.2479920 -1.0285342  3.453751 -1.0333046
100 0.10877652 -0.1854060 -0.4098254 -0.2573149 -1.0672005  3.583590 -1.0721503
101 0.11114892 -0.1894497 -0.4187636 -0.2629269 -1.0904760  3.661747 -1.0955337
         [,8]        [,9]      [,10]     [,11]
2   0.3650027 -0.04436288 -0.2488727  2.186492
3   0.3579349 -0.04350385 -0.2440536  2.144153
4   0.3625706 -0.04406728 -0.2472144  2.171923
5   0.3634015 -0.04416826 -0.2477809  2.176900
6   0.3580115 -0.04351316 -0.2441059  2.144613
7   0.3389571 -0.04119726 -0.2311138  2.030470
8   0.3513563 -0.04270428 -0.2395681  2.104745
9   0.3324359 -0.04040467 -0.2266674  1.991406
10  0.3446067 -0.04188392 -0.2349659  2.064313
11  0.3658623 -0.04446735 -0.2494588  2.191641
12  0.3997433 -0.04858530 -0.2725602  2.394600
13  0.4311403 -0.05240133 -0.2939679  2.582679
14  0.4380285 -0.05323852 -0.2986645  2.623942
15  0.4367192 -0.05307939 -0.2977718  2.616098
16  0.4228080 -0.05138860 -0.2882866  2.532766
17  0.4799335 -0.05833171 -0.3272369  2.874967
18  0.4605283 -0.05597317 -0.3140057  2.758723
19  0.4740831 -0.05762065 -0.3232479  2.839921
20  0.4422728 -0.05375438 -0.3015584  2.649366
21  0.5088121 -0.06184165 -0.3469274  3.047960
22  0.5106297 -0.06206257 -0.3481668  3.058848
23  0.4776168 -0.05805013 -0.3256573  2.861089
24  0.3597149 -0.04372019 -0.2452673  2.154816
25  0.3769687 -0.04581724 -0.2570316  2.258172
26  0.3957969 -0.04810565 -0.2698694  2.370960
27  0.3844398 -0.04672529 -0.2621257  2.302927
28  0.3969977 -0.04825159 -0.2706881  2.378153
29  0.3964292 -0.04818249 -0.2703005  2.374748
30  0.4471953 -0.05435267 -0.3049148  2.678854
31  0.4366779 -0.05307437 -0.2977436  2.615851
32  0.3845774 -0.04674201 -0.2622195  2.303751
33  0.3930132 -0.04776730 -0.2679713  2.354284
34  0.3956467 -0.04808739 -0.2697670  2.370060
35  0.4140766 -0.05032739 -0.2823332  2.480462
36  0.4062895 -0.04938093 -0.2770236  2.433814
37  0.4085716 -0.04965830 -0.2785797  2.447485
38  0.4072073 -0.04949248 -0.2776494  2.439312
39  0.4044237 -0.04915416 -0.2757515  2.422638
40  0.4338944 -0.05273606 -0.2958457  2.599177
41  0.3836107 -0.04662452 -0.2615604  2.297960
42  0.3826224 -0.04650440 -0.2608865  2.292040
43  0.3676368 -0.04468303 -0.2506687  2.202271
44  0.3850043 -0.04679390 -0.2625106  2.306309
45  0.4009688 -0.04873425 -0.2733958  2.401942
46  0.4402981 -0.05351437 -0.3002120  2.637537
47  0.5277637 -0.06414506 -0.3598494  3.161487
48  0.7953800 -0.09667147 -0.5423203  4.764600
49  1.0404683 -0.12645980 -0.7094309  6.232764
50  0.9373637 -0.11392835 -0.6391303  5.615132
51  1.0447028 -0.12697447 -0.7123181  6.258130
52  1.0614590 -0.12901103 -0.7237431  6.358505
53  1.1837670 -0.14387650 -0.8071374  7.091172
54  3.5400026 -0.43025629 -2.4137085 21.205836
55  1.0310739 -0.12531799 -0.7030254  6.176488
56  0.7467436 -0.09076014 -0.5091582  4.473252
57  0.6456684 -0.07847534 -0.4402413  3.867777
58  0.4349564 -0.05286514 -0.2965698  2.605539
59  0.3547275 -0.04311402 -0.2418667  2.124940
60  0.3338392 -0.04057523 -0.2276243  1.999812
61  0.3302353 -0.04013721 -0.2251670  1.978223
62  0.3310808 -0.04023997 -0.2257435  1.983288
63  0.3331054 -0.04048604 -0.2271239  1.995416
64  0.3507654 -0.04263246 -0.2391652  2.101206
65  0.3544850 -0.04308455 -0.2417014  2.123488
66  0.4041566 -0.04912169 -0.2755693  2.421037
67  0.4210779 -0.05117833 -0.2871069  2.522402
68  0.3791756 -0.04608547 -0.2585364  2.271393
69  0.3674249 -0.04465728 -0.2505243  2.201002
70  0.3587564 -0.04360369 -0.2446137  2.149074
71  0.3465548 -0.04212070 -0.2362942  2.075983
72  0.3770181 -0.04582325 -0.2570653  2.258469
73  0.3591719 -0.04365419 -0.2448970  2.151563
74  0.3178009 -0.03862591 -0.2166887  1.903737
75  0.3178052 -0.03862644 -0.2166917  1.903763
76  0.3227186 -0.03922362 -0.2200418  1.933196
77  0.3286903 -0.03994942 -0.2241135  1.968968
78  0.3605104 -0.04381687 -0.2458097  2.159581
79  1.3272805 -0.16131932 -0.9049904  7.950868
80  0.4558479 -0.05540432 -0.3108145  2.730686
81  0.3836916 -0.04663435 -0.2616155  2.298445
82  0.3912086 -0.04754798 -0.2667409  2.343475
83  0.3989853 -0.04849316 -0.2720433  2.390059
84  0.3954372 -0.04806193 -0.2696242  2.368805
85  0.4174065 -0.05073210 -0.2846036  2.500409
86  0.4433059 -0.05387995 -0.3022628  2.655555
87  0.4613278 -0.05607035 -0.3145508  2.763512
88  0.5891250 -0.07160298 -0.4016879  3.529062
89  0.6720330 -0.08167972 -0.4582177  4.025709
90  0.6546528 -0.07956731 -0.4463672  3.921596
91  0.5267048 -0.06401636 -0.3591274  3.155144
92  0.6388170 -0.07764260 -0.4355697  3.826734
93  0.5154673 -0.06265053 -0.3514652  3.087827
94  0.3785751 -0.04601249 -0.2581269  2.267795
95  0.3767945 -0.04579607 -0.2569128  2.257129
96  0.3820830 -0.04643884 -0.2605188  2.288809
97  0.4024122 -0.04890967 -0.2743799  2.410588
98  0.3911527 -0.04754118 -0.2667028  2.343139
99  0.3834264 -0.04660212 -0.2614347  2.296856
100 0.3978408 -0.04835406 -0.2712630  2.383203
101 0.4065176 -0.04940865 -0.2771792  2.435181


$startweights
$startweights[[1]]
$startweights[[1]][[1]]
              [,1]
 [1,]  0.475509529
 [2,] -0.709946431
 [3,]  0.610726353
 [4,] -0.934097632
 [5,] -1.253633400
 [6,]  0.291446236
 [7,] -0.443291873
 [8,]  0.001105352
 [9,]  0.074341324
[10,] -0.589520946
[11,] -0.568668733
[12,] -0.135178615

$startweights[[1]][[2]]
          [,1]
[1,]  1.178087
[2,] -1.523567



$result.matrix
                                     [,1]
error                         0.243610286
reached.threshold             0.008355147
steps                       942.000000000
Intercept.to.1layhid1         0.554942296
B_CL2_VAL.to.1layhid1        -0.080175966
B_TURB_VAL.to.1layhid1        0.136657283
B_PH_VAL.to.1layhid1          0.302070220
B_COND_VAL.to.1layhid1        0.189659223
B_TEMP_VAL.to.1layhid1        0.786602008
B_PLNT_PRES_OP.to.1layhid1   -2.641358423
B_PLNT_PH_VAL.to.1layhid1     0.790250338
B_PLNT_TURB_VAL.to.1layhid1  -0.293236694
B_PLNT_FLOW_OP.to.1layhid1    0.035640350
B_PLNT_CL2_VAL.to.1layhid1    0.199939935
past_data.to.1layhid1        -1.756588920
Intercept.to.B_PRES_OP        1.004486805
1layhid1.to.B_PRES_OP        -1.571126424

attr(,"class")
[1] "nn"

$modelList$model7
$call
neuralnet(formula = nn_input, data = model_input, hidden = hidden, 
    threshold = threshold, stepmax = stepmax, rep = rep, startweights = unlist(control))

$response
    B_PLNT_PRES_OP
2        0.5000000
3        0.5714286
4        0.5714286
5        0.5000000
6        0.5714286
7        0.6428571
8        0.5714286
9        0.7142857
10       0.5714286
11       0.5000000
12       0.5000000
13       0.5000000
14       0.5000000
15       0.5000000
16       0.5000000
17       0.5000000
18       0.5000000
19       0.5000000
20       0.5714286
21       0.5000000
22       0.5000000
23       0.5714286
24       0.5714286
25       0.5000000
26       0.5000000
27       0.5000000
28       0.5000000
29       0.5000000
30       0.4285714
31       0.4285714
32       0.5000000
33       0.5000000
34       0.5000000
35       0.5000000
36       0.5000000
37       0.5000000
38       0.5000000
39       0.5000000
40       0.5000000
41       0.5714286
42       0.5714286
43       0.5714286
44       0.5714286
45       0.5714286
46       0.5000000
47       0.4285714
48       0.4285714
49       0.4285714
50       0.4285714
51       0.4285714
52       0.4285714
53       0.4285714
54       0.4285714
55       0.5000000
56       0.4285714
57       0.5000000
58       0.5714286
59       0.6428571
60       0.7142857
61       0.6428571
62       0.6428571
63       0.6428571
64       0.5714286
65       0.5000000
66       0.4285714
67       0.4285714
68       0.5000000
69       0.5000000
70       0.5000000
71       0.5714286
72       0.3571429
73       0.5714286
74       1.0000000
75       0.7857143
76       0.7142857
77       0.6428571
78       0.4285714
79       0.0000000
80       0.5000000
81       0.5000000
82       0.5000000
83       0.5000000
84       0.5000000
85       0.5000000
86       0.5000000
87       0.5000000
88       0.4285714
89       0.4285714
90       0.5000000
91       0.5714286
92       0.5000000
93       0.5714286
94       0.5714286
95       0.5714286
96       0.5714286
97       0.5714286
98       0.5714286
99       0.5714286
100      0.5000000
101      0.5000000

$covariate
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.00000000 0.61538462
3   0.996138996 0.34415584 0.27272727 0.33333333 0.00000000 0.61538462
4   0.988416988 0.24675325 0.31818182 0.52777778 0.04545455 0.69230769
5   0.984555985 0.29220779 0.36363636 0.50000000 0.04545455 0.61538462
6   0.984555985 0.22077922 0.36363636 0.55555556 0.04545455 0.69230769
7   0.949806950 0.22077922 0.40909091 0.22222222 0.09090909 0.69230769
8   0.972972973 0.12987013 0.40909091 0.41666667 0.13636364 0.69230769
9   0.969111969 0.12987013 0.45454545 0.22222222 0.22727273 0.76923077
10  0.961389961 0.16883117 0.45454545 0.41666667 0.22727273 0.69230769
11  0.965250965 0.18831169 0.45454545 0.25000000 0.27272727 0.53846154
12  0.949806950 0.29870130 0.45454545 0.38888889 0.27272727 0.46153846
13  0.961389961 0.52597403 0.50000000 0.11111111 0.36363636 0.46153846
14  0.961389961 0.50649351 0.45454545 0.36111111 0.36363636 0.46153846
15  0.961389961 0.51948052 0.50000000 0.16666667 0.45454545 0.46153846
16  0.961389961 0.31818182 0.45454545 0.36111111 0.36363636 0.38461538
17  0.976833977 0.43506494 0.45454545 0.47222222 0.45454545 0.38461538
18  0.980694981 0.51298701 0.36363636 0.55555556 0.36363636 0.38461538
19  0.980694981 0.50000000 0.36363636 0.47222222 0.45454545 0.30769231
20  0.980694981 0.44805195 0.40909091 0.50000000 0.40909091 0.30769231
21  0.972972973 0.43506494 0.40909091 0.52777778 0.45454545 0.23076923
22  0.976833977 0.33116883 0.45454545 0.44444444 0.36363636 0.23076923
23  0.980694981 0.19480519 0.50000000 0.58333333 0.45454545 0.61538462
24  0.976833977 0.25324675 0.50000000 0.50000000 0.40909091 0.61538462
25  0.969111969 0.06493506 0.54545455 0.55555556 0.40909091 0.53846154
26  0.969111969 0.22077922 0.59090909 0.50000000 0.40909091 0.53846154
27  0.965250965 0.10389610 0.63636364 0.47222222 0.36363636 0.53846154
28  0.961389961 0.05194805 0.63636364 0.47222222 0.50000000 0.53846154
29  0.961389961 0.30519481 0.72727273 0.47222222 0.40909091 0.46153846
30  0.961389961 0.00000000 0.72727273 0.55555556 0.45454545 0.46153846
31  0.961389961 0.16233766 0.72727273 0.36111111 0.40909091 0.46153846
32  0.953667954 0.18181818 0.68181818 0.58333333 0.40909091 0.53846154
33  0.957528958 0.14285714 0.72727273 0.41666667 0.45454545 0.53846154
34  0.667953668 0.46753247 0.68181818 0.61111111 0.31818182 0.53846154
35  0.019305019 0.47402597 0.72727273 0.66666667 0.36363636 0.53846154
36  0.015444015 0.61038961 0.72727273 0.50000000 0.31818182 0.53846154
37  0.030888031 0.42207792 0.72727273 0.52777778 0.36363636 0.53846154
38  0.023166023 0.53896104 0.77272727 0.33333333 0.36363636 0.53846154
39  0.003861004 0.48051948 0.77272727 0.63888889 0.27272727 0.46153846
40  0.023166023 0.57792208 0.81818182 0.50000000 0.31818182 0.53846154
41  0.000000000 0.74025974 0.81818182 0.50000000 0.27272727 0.53846154
42  0.019305019 0.60389610 0.81818182 0.55555556 0.27272727 0.61538462
43  0.023166023 0.56493506 0.86363636 0.58333333 0.22727273 0.53846154
44  0.023166023 0.37012987 0.90909091 0.63888889 0.27272727 0.46153846
45  0.023166023 0.62337662 0.90909091 0.58333333 0.22727273 0.46153846
46  0.023166023 0.53246753 0.95454545 0.69444444 0.22727273 0.38461538
47  0.019305019 0.34415584 0.95454545 0.47222222 0.27272727 0.23076923
48  0.023166023 0.50000000 1.00000000 0.55555556 0.22727273 0.15384615
49  0.023166023 0.21428571 0.95454545 0.61111111 0.27272727 0.15384615
50  0.023166023 0.28571429 1.00000000 0.50000000 0.22727273 0.15384615
51  0.023166023 0.25324675 0.95454545 0.66666667 0.27272727 0.15384615
52  0.019305019 0.38311688 0.95454545 0.58333333 0.27272727 0.15384615
53  0.023166023 0.37012987 0.90909091 0.83333333 0.18181818 0.00000000
54  0.023166023 0.48051948 0.81818182 0.61111111 0.18181818 0.00000000
55  0.019305019 0.77272727 0.72727273 0.88888889 0.09090909 0.15384615
56  0.019305019 0.70129870 0.68181818 0.63888889 0.13636364 0.07692308
57  0.023166023 0.79870130 0.63636364 0.83333333 0.09090909 0.30769231
58  0.023166023 0.91558442 0.63636364 0.77777778 0.18181818 0.53846154
59  0.019305019 1.00000000 0.59090909 0.83333333 0.09090909 0.69230769
60  0.023166023 0.82467532 0.63636364 0.75000000 0.18181818 0.84615385
61  0.023166023 0.85714286 0.63636364 0.72222222 0.13636364 0.84615385
62  0.019305019 0.72727273 0.63636364 0.75000000 0.18181818 0.76923077
63  0.023166023 0.80519481 0.59090909 0.69444444 0.09090909 0.69230769
64  0.023166023 0.87662338 0.54545455 0.86111111 0.13636364 0.69230769
65  0.023166023 0.79870130 0.50000000 0.69444444 0.04545455 0.53846154
66  0.019305019 0.70129870 0.50000000 0.80555556 0.13636364 0.46153846
67  0.023166023 0.77922078 0.45454545 0.80555556 0.13636364 0.53846154
68  0.023166023 0.70129870 0.45454545 0.88888889 0.13636364 0.53846154
69  0.023166023 0.62987013 0.40909091 0.77777778 0.09090909 0.61538462
70  0.023166023 0.57142857 0.40909091 0.94444444 0.09090909 0.61538462
71  0.023166023 0.72727273 0.40909091 0.77777778 0.09090909 0.69230769
72  0.027027027 0.61688312 0.36363636 1.00000000 0.09090909 0.46153846
73  0.027027027 0.80519481 0.36363636 0.66666667 0.09090909 0.69230769
74  0.027027027 0.77922078 0.36363636 0.94444444 0.09090909 1.00000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.18181818 0.76923077
76  0.027027027 0.38311688 0.40909091 0.94444444 0.09090909 0.76923077
77  0.027027027 0.62987013 0.40909091 0.75000000 0.18181818 0.69230769
78  0.027027027 0.55844156 0.45454545 0.83333333 0.09090909 0.53846154
79  0.027027027 0.45454545 0.45454545 0.69444444 0.22727273 0.23076923
80  0.027027027 0.61038961 0.40909091 0.80555556 0.18181818 0.53846154
81  0.030888031 0.64935065 0.45454545 0.72222222 0.31818182 0.53846154
82  0.027027027 0.82467532 0.45454545 0.69444444 0.31818182 0.53846154
83  0.027027027 0.57792208 0.45454545 0.66666667 0.45454545 0.53846154
84  0.023166023 0.85714286 0.45454545 0.52777778 0.40909091 0.46153846
85  0.011583012 0.33766234 0.45454545 0.58333333 0.50000000 0.38461538
86  0.023166023 0.33116883 0.40909091 0.47222222 0.54545455 0.38461538
87  0.030888031 0.55194805 0.31818182 0.72222222 0.59090909 0.30769231
88  0.030888031 0.44805195 0.22727273 0.33333333 0.72727273 0.23076923
89  0.034749035 0.64285714 0.18181818 0.38888889 0.68181818 0.15384615
90  0.034749035 0.39610390 0.18181818 0.44444444 0.77272727 0.15384615
91  0.034749035 0.42857143 0.18181818 0.33333333 0.77272727 0.15384615
92  0.034749035 0.26623377 0.13636364 0.38888889 0.81818182 0.15384615
93  0.034749035 0.32467532 0.09090909 0.22222222 0.81818182 0.53846154
94  0.034749035 0.25324675 0.00000000 0.16666667 0.81818182 0.61538462
95  0.034749035 0.24675325 0.00000000 0.27777778 0.95454545 0.61538462
96  0.034749035 0.39610390 0.04545455 0.19444444 1.00000000 0.53846154
97  0.034749035 0.12337662 0.04545455 0.30555556 0.95454545 0.53846154
98  0.030888031 0.15584416 0.00000000 0.27777778 0.95454545 0.53846154
99  0.030888031 0.07792208 0.00000000 0.00000000 0.95454545 0.53846154
100 0.027027027 0.07792208 0.00000000 0.05555556 0.86363636 0.53846154
101 0.023166023 0.07142857 0.00000000 0.25000000 0.90909091 0.53846154
    B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL past_data
2      0.93333333     0.194148936      0.4545455    0.284403670 0.6428571
3      0.93333333     0.199468085      0.3636364    0.284403670 0.5000000
4      0.93333333     0.242021277      0.3636364    0.284403670 0.5714286
5      0.86666667     0.260638298      0.3636364    0.284403670 0.5714286
6      0.86666667     0.289893617      0.3636364    0.238532110 0.5000000
7      0.86666667     0.276595745      0.3636364    0.220183486 0.5714286
8      0.86666667     0.303191489      0.3636364    0.201834862 0.6428571
9      0.80000000     0.348404255      0.2727273    0.174311927 0.5714286
10     0.80000000     0.345744681      0.3636364    0.155963303 0.7142857
11     0.80000000     0.377659574      0.3636364    0.137614679 0.5714286
12     0.80000000     0.375000000      0.4545455    0.100917431 0.5000000
13     0.80000000     0.396276596      0.4545455    0.082568807 0.5000000
14     0.80000000     0.375000000      0.4545455    0.064220183 0.5000000
15     0.73333333     0.375000000      0.4545455    0.045871560 0.5000000
16     0.73333333     0.359042553      0.4545455    0.045871560 0.5000000
17     0.73333333     0.351063830      0.4545455    0.036697248 0.5000000
18     0.73333333     0.327127660      0.4545455    0.018348624 0.5000000
19     0.73333333     0.324468085      0.3636364    0.009174312 0.5000000
20     0.66666667     0.321808511      0.4545455    0.009174312 0.5000000
21     0.66666667     0.297872340      0.3636364    0.009174312 0.5714286
22     0.60000000     0.279255319      0.4545455    0.018348624 0.5000000
23     0.60000000     0.265957447      0.3636364    0.000000000 0.5000000
24     0.53333333     0.247340426      0.3636364    0.000000000 0.5714286
25     0.53333333     0.234042553      0.4545455    0.009174312 0.5714286
26     0.53333333     0.228723404      0.4545455    0.009174312 0.5000000
27     0.46666667     0.228723404      0.4545455    0.027522936 0.5000000
28     0.46666667     0.228723404      0.3636364    0.045871560 0.5000000
29     0.46666667     0.223404255      0.3636364    0.064220183 0.5000000
30     0.40000000     0.226063830      0.4545455    0.082568807 0.5000000
31     0.40000000     0.204787234      0.4545455    0.064220183 0.4285714
32     0.40000000     1.000000000      0.3636364    0.357798165 0.4285714
33     0.33333333     0.319148936      0.4545455    0.568807339 0.5000000
34     0.33333333     0.194148936      0.4545455    0.568807339 0.5000000
35     0.33333333     0.175531915      0.4545455    0.596330275 0.5000000
36     0.33333333     0.172872340      0.3636364    0.605504587 0.5000000
37     0.33333333     0.170212766      0.3636364    0.605504587 0.5000000
38     0.33333333     0.170212766      0.4545455    0.577981651 0.5000000
39     0.33333333     0.164893617      0.4545455    0.577981651 0.5000000
40     0.33333333     0.175531915      0.3636364    0.605504587 0.5000000
41     0.33333333     0.180851064      0.3636364    0.642201835 0.5000000
42     0.33333333     0.196808511      0.3636364    0.669724771 0.5714286
43     0.33333333     0.215425532      0.3636364    0.724770642 0.5714286
44     0.33333333     0.231382979      0.3636364    0.770642202 0.5714286
45     0.33333333     0.226063830      0.4545455    0.752293578 0.5714286
46     0.33333333     0.207446809      0.5454545    0.770642202 0.5714286
47     0.33333333     0.204787234      0.4545455    0.770642202 0.5000000
48     0.40000000     0.156914894      0.5454545    0.761467890 0.4285714
49     0.40000000     0.167553191      0.5454545    0.779816514 0.4285714
50     0.40000000     0.223404255      0.5454545    0.807339450 0.4285714
51     0.40000000     0.228723404      0.5454545    0.798165138 0.4285714
52     0.40000000     0.215425532      0.5454545    0.798165138 0.4285714
53     0.46666667     0.114361702      0.5454545    0.779816514 0.4285714
54     0.46666667     0.186170213      0.5454545    0.798165138 0.4285714
55     0.40000000     0.202127660      0.5454545    0.816513761 0.4285714
56     0.33333333     0.172872340      0.5454545    0.798165138 0.5000000
57     0.26666667     0.164893617      0.5454545    0.779816514 0.4285714
58     0.26666667     0.170212766      0.4545455    0.779816514 0.5000000
59     0.26666667     0.207446809      0.3636364    0.816513761 0.5714286
60     0.26666667     0.202127660      0.2727273    0.816513761 0.6428571
61     0.26666667     0.196808511      0.3636364    0.844036697 0.7142857
62     0.26666667     0.191489362      0.3636364    0.853211009 0.6428571
63     0.26666667     0.148936170      0.3636364    0.844036697 0.6428571
64     0.26666667     0.204787234      0.3636364    0.862385321 0.6428571
65     0.26666667     0.220744681      0.4545455    0.853211009 0.5714286
66     0.20000000     0.226063830      0.5454545    0.871559633 0.5000000
67     0.13333333     0.130319149      0.4545455    0.871559633 0.4285714
68     0.13333333     0.090425532      0.4545455    0.889908257 0.4285714
69     0.06666667     0.061170213      0.4545455    0.899082569 0.5000000
70     0.06666667     0.050531915      0.4545455    0.899082569 0.5000000
71     0.06666667     0.029255319      0.4545455    0.908256881 0.5000000
72     0.00000000     0.023936170      0.6363636    0.917431193 0.5714286
73     0.00000000     0.042553191      0.4545455    0.944954128 0.3571429
74     0.00000000     0.039893617      0.0000000    0.954128440 0.5714286
75     0.00000000     0.026595745      0.1818182    0.963302752 1.0000000
76     0.00000000     0.007978723      0.2727273    0.963302752 0.7857143
77     0.00000000     0.010638298      0.3636364    0.981651376 0.7142857
78     0.00000000     0.021276596      0.5454545    1.000000000 0.6428571
79     0.00000000     0.082446809      1.0000000    0.972477064 0.4285714
80     0.00000000     0.023936170      0.5454545    0.972477064 0.0000000
81     0.00000000     0.000000000      0.4545455    0.972477064 0.5000000
82     0.06666667     0.029255319      0.4545455    0.972477064 0.5000000
83     0.06666667     0.042553191      0.4545455    0.944954128 0.5000000
84     0.06666667     0.055851064      0.5454545    0.935779817 0.5000000
85     0.06666667     0.045212766      0.4545455    0.926605505 0.5000000
86     0.06666667     0.058510638      0.4545455    0.935779817 0.5000000
87     0.06666667     0.087765957      0.4545455    0.926605505 0.5000000
88     0.06666667     0.069148936      0.5454545    0.926605505 0.5000000
89     0.06666667     0.085106383      0.5454545    0.917431193 0.4285714
90     0.06666667     0.119680851      0.5454545    0.889908257 0.4285714
91     0.06666667     0.162234043      0.4545455    0.889908257 0.5000000
92     0.06666667     0.156914894      0.4545455    0.889908257 0.5714286
93     0.06666667     0.159574468      0.4545455    0.880733945 0.5000000
94     0.13333333     0.135638298      0.4545455    0.871559633 0.5714286
95     0.13333333     0.180851064      0.4545455    0.889908257 0.5714286
96     0.13333333     0.188829787      0.4545455    0.880733945 0.5714286
97     0.20000000     0.098404255      0.4545455    0.871559633 0.5714286
98     0.13333333     0.159574468      0.5454545    0.862385321 0.5714286
99     0.13333333     0.154255319      0.4545455    0.862385321 0.5714286
100    0.13333333     0.188829787      0.4545455    0.853211009 0.5714286
101    0.13333333     0.223404255      0.4545455    0.844036697 0.5000000

$model.list
$model.list$response
[1] "B_PLNT_PRES_OP"

$model.list$variables
 [1] "B_CL2_VAL"       "B_TURB_VAL"      "B_PH_VAL"        "B_COND_VAL"     
 [5] "B_TEMP_VAL"      "B_PRES_OP"       "B_PLNT_PH_VAL"   "B_PLNT_TURB_VAL"
 [9] "B_PLNT_FLOW_OP"  "B_PLNT_CL2_VAL"  "past_data"      


$err.fct
function (x, y) 
{
    1/2 * (y - x)^2
}
<bytecode: 0x7fd6aa25d4a8>
<environment: 0x7fd6af869b60>
attr(,"type")
[1] "sse"

$act.fct
function (x) 
{
    1/(1 + exp(-x))
}
<bytecode: 0x7fd6aa25ca88>
<environment: 0x7fd6af8660e8>
attr(,"type")
[1] "logistic"

$linear.output
[1] TRUE

$data
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.00000000 0.61538462
3   0.996138996 0.34415584 0.27272727 0.33333333 0.00000000 0.61538462
4   0.988416988 0.24675325 0.31818182 0.52777778 0.04545455 0.69230769
5   0.984555985 0.29220779 0.36363636 0.50000000 0.04545455 0.61538462
6   0.984555985 0.22077922 0.36363636 0.55555556 0.04545455 0.69230769
7   0.949806950 0.22077922 0.40909091 0.22222222 0.09090909 0.69230769
8   0.972972973 0.12987013 0.40909091 0.41666667 0.13636364 0.69230769
9   0.969111969 0.12987013 0.45454545 0.22222222 0.22727273 0.76923077
10  0.961389961 0.16883117 0.45454545 0.41666667 0.22727273 0.69230769
11  0.965250965 0.18831169 0.45454545 0.25000000 0.27272727 0.53846154
12  0.949806950 0.29870130 0.45454545 0.38888889 0.27272727 0.46153846
13  0.961389961 0.52597403 0.50000000 0.11111111 0.36363636 0.46153846
14  0.961389961 0.50649351 0.45454545 0.36111111 0.36363636 0.46153846
15  0.961389961 0.51948052 0.50000000 0.16666667 0.45454545 0.46153846
16  0.961389961 0.31818182 0.45454545 0.36111111 0.36363636 0.38461538
17  0.976833977 0.43506494 0.45454545 0.47222222 0.45454545 0.38461538
18  0.980694981 0.51298701 0.36363636 0.55555556 0.36363636 0.38461538
19  0.980694981 0.50000000 0.36363636 0.47222222 0.45454545 0.30769231
20  0.980694981 0.44805195 0.40909091 0.50000000 0.40909091 0.30769231
21  0.972972973 0.43506494 0.40909091 0.52777778 0.45454545 0.23076923
22  0.976833977 0.33116883 0.45454545 0.44444444 0.36363636 0.23076923
23  0.980694981 0.19480519 0.50000000 0.58333333 0.45454545 0.61538462
24  0.976833977 0.25324675 0.50000000 0.50000000 0.40909091 0.61538462
25  0.969111969 0.06493506 0.54545455 0.55555556 0.40909091 0.53846154
26  0.969111969 0.22077922 0.59090909 0.50000000 0.40909091 0.53846154
27  0.965250965 0.10389610 0.63636364 0.47222222 0.36363636 0.53846154
28  0.961389961 0.05194805 0.63636364 0.47222222 0.50000000 0.53846154
29  0.961389961 0.30519481 0.72727273 0.47222222 0.40909091 0.46153846
30  0.961389961 0.00000000 0.72727273 0.55555556 0.45454545 0.46153846
31  0.961389961 0.16233766 0.72727273 0.36111111 0.40909091 0.46153846
32  0.953667954 0.18181818 0.68181818 0.58333333 0.40909091 0.53846154
33  0.957528958 0.14285714 0.72727273 0.41666667 0.45454545 0.53846154
34  0.667953668 0.46753247 0.68181818 0.61111111 0.31818182 0.53846154
35  0.019305019 0.47402597 0.72727273 0.66666667 0.36363636 0.53846154
36  0.015444015 0.61038961 0.72727273 0.50000000 0.31818182 0.53846154
37  0.030888031 0.42207792 0.72727273 0.52777778 0.36363636 0.53846154
38  0.023166023 0.53896104 0.77272727 0.33333333 0.36363636 0.53846154
39  0.003861004 0.48051948 0.77272727 0.63888889 0.27272727 0.46153846
40  0.023166023 0.57792208 0.81818182 0.50000000 0.31818182 0.53846154
41  0.000000000 0.74025974 0.81818182 0.50000000 0.27272727 0.53846154
42  0.019305019 0.60389610 0.81818182 0.55555556 0.27272727 0.61538462
43  0.023166023 0.56493506 0.86363636 0.58333333 0.22727273 0.53846154
44  0.023166023 0.37012987 0.90909091 0.63888889 0.27272727 0.46153846
45  0.023166023 0.62337662 0.90909091 0.58333333 0.22727273 0.46153846
46  0.023166023 0.53246753 0.95454545 0.69444444 0.22727273 0.38461538
47  0.019305019 0.34415584 0.95454545 0.47222222 0.27272727 0.23076923
48  0.023166023 0.50000000 1.00000000 0.55555556 0.22727273 0.15384615
49  0.023166023 0.21428571 0.95454545 0.61111111 0.27272727 0.15384615
50  0.023166023 0.28571429 1.00000000 0.50000000 0.22727273 0.15384615
51  0.023166023 0.25324675 0.95454545 0.66666667 0.27272727 0.15384615
52  0.019305019 0.38311688 0.95454545 0.58333333 0.27272727 0.15384615
53  0.023166023 0.37012987 0.90909091 0.83333333 0.18181818 0.00000000
54  0.023166023 0.48051948 0.81818182 0.61111111 0.18181818 0.00000000
55  0.019305019 0.77272727 0.72727273 0.88888889 0.09090909 0.15384615
56  0.019305019 0.70129870 0.68181818 0.63888889 0.13636364 0.07692308
57  0.023166023 0.79870130 0.63636364 0.83333333 0.09090909 0.30769231
58  0.023166023 0.91558442 0.63636364 0.77777778 0.18181818 0.53846154
59  0.019305019 1.00000000 0.59090909 0.83333333 0.09090909 0.69230769
60  0.023166023 0.82467532 0.63636364 0.75000000 0.18181818 0.84615385
61  0.023166023 0.85714286 0.63636364 0.72222222 0.13636364 0.84615385
62  0.019305019 0.72727273 0.63636364 0.75000000 0.18181818 0.76923077
63  0.023166023 0.80519481 0.59090909 0.69444444 0.09090909 0.69230769
64  0.023166023 0.87662338 0.54545455 0.86111111 0.13636364 0.69230769
65  0.023166023 0.79870130 0.50000000 0.69444444 0.04545455 0.53846154
66  0.019305019 0.70129870 0.50000000 0.80555556 0.13636364 0.46153846
67  0.023166023 0.77922078 0.45454545 0.80555556 0.13636364 0.53846154
68  0.023166023 0.70129870 0.45454545 0.88888889 0.13636364 0.53846154
69  0.023166023 0.62987013 0.40909091 0.77777778 0.09090909 0.61538462
70  0.023166023 0.57142857 0.40909091 0.94444444 0.09090909 0.61538462
71  0.023166023 0.72727273 0.40909091 0.77777778 0.09090909 0.69230769
72  0.027027027 0.61688312 0.36363636 1.00000000 0.09090909 0.46153846
73  0.027027027 0.80519481 0.36363636 0.66666667 0.09090909 0.69230769
74  0.027027027 0.77922078 0.36363636 0.94444444 0.09090909 1.00000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.18181818 0.76923077
76  0.027027027 0.38311688 0.40909091 0.94444444 0.09090909 0.76923077
77  0.027027027 0.62987013 0.40909091 0.75000000 0.18181818 0.69230769
78  0.027027027 0.55844156 0.45454545 0.83333333 0.09090909 0.53846154
79  0.027027027 0.45454545 0.45454545 0.69444444 0.22727273 0.23076923
80  0.027027027 0.61038961 0.40909091 0.80555556 0.18181818 0.53846154
81  0.030888031 0.64935065 0.45454545 0.72222222 0.31818182 0.53846154
82  0.027027027 0.82467532 0.45454545 0.69444444 0.31818182 0.53846154
83  0.027027027 0.57792208 0.45454545 0.66666667 0.45454545 0.53846154
84  0.023166023 0.85714286 0.45454545 0.52777778 0.40909091 0.46153846
85  0.011583012 0.33766234 0.45454545 0.58333333 0.50000000 0.38461538
86  0.023166023 0.33116883 0.40909091 0.47222222 0.54545455 0.38461538
87  0.030888031 0.55194805 0.31818182 0.72222222 0.59090909 0.30769231
88  0.030888031 0.44805195 0.22727273 0.33333333 0.72727273 0.23076923
89  0.034749035 0.64285714 0.18181818 0.38888889 0.68181818 0.15384615
90  0.034749035 0.39610390 0.18181818 0.44444444 0.77272727 0.15384615
91  0.034749035 0.42857143 0.18181818 0.33333333 0.77272727 0.15384615
92  0.034749035 0.26623377 0.13636364 0.38888889 0.81818182 0.15384615
93  0.034749035 0.32467532 0.09090909 0.22222222 0.81818182 0.53846154
94  0.034749035 0.25324675 0.00000000 0.16666667 0.81818182 0.61538462
95  0.034749035 0.24675325 0.00000000 0.27777778 0.95454545 0.61538462
96  0.034749035 0.39610390 0.04545455 0.19444444 1.00000000 0.53846154
97  0.034749035 0.12337662 0.04545455 0.30555556 0.95454545 0.53846154
98  0.030888031 0.15584416 0.00000000 0.27777778 0.95454545 0.53846154
99  0.030888031 0.07792208 0.00000000 0.00000000 0.95454545 0.53846154
100 0.027027027 0.07792208 0.00000000 0.05555556 0.86363636 0.53846154
101 0.023166023 0.07142857 0.00000000 0.25000000 0.90909091 0.53846154
    B_PLNT_PRES_OP B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL
2        0.5000000    0.93333333     0.194148936      0.4545455    0.284403670
3        0.5714286    0.93333333     0.199468085      0.3636364    0.284403670
4        0.5714286    0.93333333     0.242021277      0.3636364    0.284403670
5        0.5000000    0.86666667     0.260638298      0.3636364    0.284403670
6        0.5714286    0.86666667     0.289893617      0.3636364    0.238532110
7        0.6428571    0.86666667     0.276595745      0.3636364    0.220183486
8        0.5714286    0.86666667     0.303191489      0.3636364    0.201834862
9        0.7142857    0.80000000     0.348404255      0.2727273    0.174311927
10       0.5714286    0.80000000     0.345744681      0.3636364    0.155963303
11       0.5000000    0.80000000     0.377659574      0.3636364    0.137614679
12       0.5000000    0.80000000     0.375000000      0.4545455    0.100917431
13       0.5000000    0.80000000     0.396276596      0.4545455    0.082568807
14       0.5000000    0.80000000     0.375000000      0.4545455    0.064220183
15       0.5000000    0.73333333     0.375000000      0.4545455    0.045871560
16       0.5000000    0.73333333     0.359042553      0.4545455    0.045871560
17       0.5000000    0.73333333     0.351063830      0.4545455    0.036697248
18       0.5000000    0.73333333     0.327127660      0.4545455    0.018348624
19       0.5000000    0.73333333     0.324468085      0.3636364    0.009174312
20       0.5714286    0.66666667     0.321808511      0.4545455    0.009174312
21       0.5000000    0.66666667     0.297872340      0.3636364    0.009174312
22       0.5000000    0.60000000     0.279255319      0.4545455    0.018348624
23       0.5714286    0.60000000     0.265957447      0.3636364    0.000000000
24       0.5714286    0.53333333     0.247340426      0.3636364    0.000000000
25       0.5000000    0.53333333     0.234042553      0.4545455    0.009174312
26       0.5000000    0.53333333     0.228723404      0.4545455    0.009174312
27       0.5000000    0.46666667     0.228723404      0.4545455    0.027522936
28       0.5000000    0.46666667     0.228723404      0.3636364    0.045871560
29       0.5000000    0.46666667     0.223404255      0.3636364    0.064220183
30       0.4285714    0.40000000     0.226063830      0.4545455    0.082568807
31       0.4285714    0.40000000     0.204787234      0.4545455    0.064220183
32       0.5000000    0.40000000     1.000000000      0.3636364    0.357798165
33       0.5000000    0.33333333     0.319148936      0.4545455    0.568807339
34       0.5000000    0.33333333     0.194148936      0.4545455    0.568807339
35       0.5000000    0.33333333     0.175531915      0.4545455    0.596330275
36       0.5000000    0.33333333     0.172872340      0.3636364    0.605504587
37       0.5000000    0.33333333     0.170212766      0.3636364    0.605504587
38       0.5000000    0.33333333     0.170212766      0.4545455    0.577981651
39       0.5000000    0.33333333     0.164893617      0.4545455    0.577981651
40       0.5000000    0.33333333     0.175531915      0.3636364    0.605504587
41       0.5714286    0.33333333     0.180851064      0.3636364    0.642201835
42       0.5714286    0.33333333     0.196808511      0.3636364    0.669724771
43       0.5714286    0.33333333     0.215425532      0.3636364    0.724770642
44       0.5714286    0.33333333     0.231382979      0.3636364    0.770642202
45       0.5714286    0.33333333     0.226063830      0.4545455    0.752293578
46       0.5000000    0.33333333     0.207446809      0.5454545    0.770642202
47       0.4285714    0.33333333     0.204787234      0.4545455    0.770642202
48       0.4285714    0.40000000     0.156914894      0.5454545    0.761467890
49       0.4285714    0.40000000     0.167553191      0.5454545    0.779816514
50       0.4285714    0.40000000     0.223404255      0.5454545    0.807339450
51       0.4285714    0.40000000     0.228723404      0.5454545    0.798165138
52       0.4285714    0.40000000     0.215425532      0.5454545    0.798165138
53       0.4285714    0.46666667     0.114361702      0.5454545    0.779816514
54       0.4285714    0.46666667     0.186170213      0.5454545    0.798165138
55       0.5000000    0.40000000     0.202127660      0.5454545    0.816513761
56       0.4285714    0.33333333     0.172872340      0.5454545    0.798165138
57       0.5000000    0.26666667     0.164893617      0.5454545    0.779816514
58       0.5714286    0.26666667     0.170212766      0.4545455    0.779816514
59       0.6428571    0.26666667     0.207446809      0.3636364    0.816513761
60       0.7142857    0.26666667     0.202127660      0.2727273    0.816513761
61       0.6428571    0.26666667     0.196808511      0.3636364    0.844036697
62       0.6428571    0.26666667     0.191489362      0.3636364    0.853211009
63       0.6428571    0.26666667     0.148936170      0.3636364    0.844036697
64       0.5714286    0.26666667     0.204787234      0.3636364    0.862385321
65       0.5000000    0.26666667     0.220744681      0.4545455    0.853211009
66       0.4285714    0.20000000     0.226063830      0.5454545    0.871559633
67       0.4285714    0.13333333     0.130319149      0.4545455    0.871559633
68       0.5000000    0.13333333     0.090425532      0.4545455    0.889908257
69       0.5000000    0.06666667     0.061170213      0.4545455    0.899082569
70       0.5000000    0.06666667     0.050531915      0.4545455    0.899082569
71       0.5714286    0.06666667     0.029255319      0.4545455    0.908256881
72       0.3571429    0.00000000     0.023936170      0.6363636    0.917431193
73       0.5714286    0.00000000     0.042553191      0.4545455    0.944954128
74       1.0000000    0.00000000     0.039893617      0.0000000    0.954128440
75       0.7857143    0.00000000     0.026595745      0.1818182    0.963302752
76       0.7142857    0.00000000     0.007978723      0.2727273    0.963302752
77       0.6428571    0.00000000     0.010638298      0.3636364    0.981651376
78       0.4285714    0.00000000     0.021276596      0.5454545    1.000000000
79       0.0000000    0.00000000     0.082446809      1.0000000    0.972477064
80       0.5000000    0.00000000     0.023936170      0.5454545    0.972477064
81       0.5000000    0.00000000     0.000000000      0.4545455    0.972477064
82       0.5000000    0.06666667     0.029255319      0.4545455    0.972477064
83       0.5000000    0.06666667     0.042553191      0.4545455    0.944954128
84       0.5000000    0.06666667     0.055851064      0.5454545    0.935779817
85       0.5000000    0.06666667     0.045212766      0.4545455    0.926605505
86       0.5000000    0.06666667     0.058510638      0.4545455    0.935779817
87       0.5000000    0.06666667     0.087765957      0.4545455    0.926605505
88       0.4285714    0.06666667     0.069148936      0.5454545    0.926605505
89       0.4285714    0.06666667     0.085106383      0.5454545    0.917431193
90       0.5000000    0.06666667     0.119680851      0.5454545    0.889908257
91       0.5714286    0.06666667     0.162234043      0.4545455    0.889908257
92       0.5000000    0.06666667     0.156914894      0.4545455    0.889908257
93       0.5714286    0.06666667     0.159574468      0.4545455    0.880733945
94       0.5714286    0.13333333     0.135638298      0.4545455    0.871559633
95       0.5714286    0.13333333     0.180851064      0.4545455    0.889908257
96       0.5714286    0.13333333     0.188829787      0.4545455    0.880733945
97       0.5714286    0.20000000     0.098404255      0.4545455    0.871559633
98       0.5714286    0.13333333     0.159574468      0.5454545    0.862385321
99       0.5714286    0.13333333     0.154255319      0.4545455    0.862385321
100      0.5000000    0.13333333     0.188829787      0.4545455    0.853211009
101      0.5000000    0.13333333     0.223404255      0.4545455    0.844036697
    past_data
2   0.6428571
3   0.5000000
4   0.5714286
5   0.5714286
6   0.5000000
7   0.5714286
8   0.6428571
9   0.5714286
10  0.7142857
11  0.5714286
12  0.5000000
13  0.5000000
14  0.5000000
15  0.5000000
16  0.5000000
17  0.5000000
18  0.5000000
19  0.5000000
20  0.5000000
21  0.5714286
22  0.5000000
23  0.5000000
24  0.5714286
25  0.5714286
26  0.5000000
27  0.5000000
28  0.5000000
29  0.5000000
30  0.5000000
31  0.4285714
32  0.4285714
33  0.5000000
34  0.5000000
35  0.5000000
36  0.5000000
37  0.5000000
38  0.5000000
39  0.5000000
40  0.5000000
41  0.5000000
42  0.5714286
43  0.5714286
44  0.5714286
45  0.5714286
46  0.5714286
47  0.5000000
48  0.4285714
49  0.4285714
50  0.4285714
51  0.4285714
52  0.4285714
53  0.4285714
54  0.4285714
55  0.4285714
56  0.5000000
57  0.4285714
58  0.5000000
59  0.5714286
60  0.6428571
61  0.7142857
62  0.6428571
63  0.6428571
64  0.6428571
65  0.5714286
66  0.5000000
67  0.4285714
68  0.4285714
69  0.5000000
70  0.5000000
71  0.5000000
72  0.5714286
73  0.3571429
74  0.5714286
75  1.0000000
76  0.7857143
77  0.7142857
78  0.6428571
79  0.4285714
80  0.0000000
81  0.5000000
82  0.5000000
83  0.5000000
84  0.5000000
85  0.5000000
86  0.5000000
87  0.5000000
88  0.5000000
89  0.4285714
90  0.4285714
91  0.5000000
92  0.5714286
93  0.5000000
94  0.5714286
95  0.5714286
96  0.5714286
97  0.5714286
98  0.5714286
99  0.5714286
100 0.5714286
101 0.5000000

$exclude
NULL

$net.result
$net.result[[1]]
         [,1]
2   0.5363854
3   0.5935795
4   0.6188494
5   0.5982098
6   0.5897693
7   0.5648532
8   0.5815446
9   0.6376803
10  0.5780627
11  0.5459828
12  0.4753452
13  0.4863581
14  0.5053859
15  0.4914715
16  0.4623235
17  0.5052646
18  0.4952653
19  0.5703805
20  0.4717120
21  0.5533403
22  0.4316997
23  0.5697989
24  0.5465290
25  0.4557214
26  0.4663811
27  0.4346040
28  0.5387801
29  0.5433393
30  0.4477302
31  0.4308408
32  0.5072352
33  0.5455440
34  0.5489491
35  0.5101745
36  0.5732355
37  0.5700930
38  0.4821850
39  0.4765627
40  0.5748428
41  0.5856478
42  0.5944562
43  0.5881981
44  0.5877262
45  0.5183443
46  0.4460216
47  0.4721944
48  0.4210676
49  0.4106140
50  0.3985703
51  0.4165255
52  0.4218010
53  0.4279350
54  0.4083426
55  0.4434634
56  0.3991947
57  0.4218793
58  0.5488606
59  0.6344149
60  0.7154440
61  0.6492435
62  0.6426657
63  0.6185826
64  0.6456044
65  0.5051767
66  0.4318297
67  0.5168702
68  0.5268941
69  0.4984656
70  0.5106949
71  0.5224954
72  0.3515226
73  0.5072029
74  0.8588149
75  0.7387172
76  0.6665280
77  0.6145351
78  0.4342342
79  0.1272516
80  0.4343303
81  0.5509156
82  0.5747382
83  0.5708432
84  0.4861977
85  0.5266662
86  0.5248191
87  0.5628751
88  0.4596710
89  0.4576891
90  0.4492523
91  0.5124867
92  0.5126396
93  0.5385043
94  0.5467352
95  0.5859255
96  0.5923921
97  0.5900928
98  0.4899763
99  0.5306331
100 0.5089392
101 0.5294771


$weights
$weights[[1]]
$weights[[1]][[1]]
             [,1]
 [1,] -0.43760208
 [2,]  0.41024666
 [3,]  0.38567437
 [4,]  0.18981771
 [5,]  0.39870341
 [6,]  0.90276698
 [7,]  0.44936307
 [8,]  0.84891839
 [9,] -0.49261532
[10,] -3.31872644
[11,]  0.95468160
[12,]  0.08465635

$weights[[1]][[2]]
            [,1]
[1,] 0.005848307
[2,] 0.995287808



$generalized.weights
$generalized.weights[[1]]
         [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
2   0.4086939 0.3842146 0.1890993 0.3971943 0.8993500 0.4476622 0.8457052
3   0.4092687 0.3847550 0.1893652 0.3977530 0.9006150 0.4482919 0.8468948
4   0.4095107 0.3849825 0.1894772 0.3979881 0.9011474 0.4485569 0.8473955
5   0.4093134 0.3847970 0.1893859 0.3977964 0.9007133 0.4483408 0.8469872
6   0.4092318 0.3847203 0.1893481 0.3977171 0.9005338 0.4482515 0.8468184
7   0.4089863 0.3844895 0.1892346 0.3974785 0.8999936 0.4479826 0.8463104
8   0.4091516 0.3846449 0.1893111 0.3976392 0.9003573 0.4481636 0.8466525
9   0.4096893 0.3851504 0.1895598 0.3981618 0.9015406 0.4487526 0.8477651
10  0.4091175 0.3846128 0.1892952 0.3976060 0.9002821 0.4481262 0.8465818
11  0.4087942 0.3843089 0.1891457 0.3972918 0.8995708 0.4477721 0.8459128
12  0.4079993 0.3835616 0.1887779 0.3965193 0.8978215 0.4469014 0.8442679
13  0.4081333 0.3836876 0.1888399 0.3966495 0.8981164 0.4470482 0.8445452
14  0.4083550 0.3838960 0.1889424 0.3968649 0.8986042 0.4472910 0.8450039
15  0.4081940 0.3837447 0.1888680 0.3967085 0.8982500 0.4471147 0.8446709
16  0.4078348 0.3834070 0.1887018 0.3963594 0.8974596 0.4467212 0.8439276
17  0.4083536 0.3838947 0.1889418 0.3968636 0.8986012 0.4472895 0.8450011
18  0.4082385 0.3837865 0.1888886 0.3967518 0.8983480 0.4471635 0.8447630
19  0.4090415 0.3845414 0.1892601 0.3975322 0.9001150 0.4480430 0.8464246
20  0.4079541 0.3835191 0.1887570 0.3964753 0.8977221 0.4468519 0.8441744
21  0.4088699 0.3843800 0.1891807 0.3973654 0.8997373 0.4478550 0.8460694
22  0.4074178 0.3830150 0.1885088 0.3959542 0.8965420 0.4462645 0.8430648
23  0.4090357 0.3845360 0.1892574 0.3975265 0.9001022 0.4480367 0.8464126
24  0.4087999 0.3843142 0.1891483 0.3972973 0.8995832 0.4477783 0.8459245
25  0.4077487 0.3833260 0.1886619 0.3962757 0.8972700 0.4466269 0.8437493
26  0.4078868 0.3834559 0.1887258 0.3964099 0.8975740 0.4467782 0.8440352
27  0.4074594 0.3830541 0.1885281 0.3959946 0.8966335 0.4463101 0.8431508
28  0.4087191 0.3842383 0.1891109 0.3972188 0.8994055 0.4476899 0.8457574
29  0.4087668 0.3842831 0.1891330 0.3972651 0.8995104 0.4477421 0.8458560
30  0.4076418 0.3832255 0.1886125 0.3961718 0.8970348 0.4465098 0.8435281
31  0.4074055 0.3830033 0.1885031 0.3959422 0.8965148 0.4462510 0.8430391
32  0.4083759 0.3839157 0.1889521 0.3968853 0.8986503 0.4473139 0.8450473
33  0.4087897 0.3843046 0.1891436 0.3972874 0.8995608 0.4477671 0.8459034
34  0.4088248 0.3843377 0.1891598 0.3973216 0.8996382 0.4478057 0.8459762
35  0.4084090 0.3839468 0.1889674 0.3969174 0.8987231 0.4473502 0.8451157
36  0.4090698 0.3845680 0.1892732 0.3975597 0.9001773 0.4480740 0.8464832
37  0.4090386 0.3845387 0.1892588 0.3975294 0.9001087 0.4480399 0.8464187
38  0.4080830 0.3836403 0.1888166 0.3966007 0.8980058 0.4469931 0.8444412
39  0.4080143 0.3835757 0.1887848 0.3965339 0.8978546 0.4469179 0.8442990
40  0.4090857 0.3845830 0.1892806 0.3975751 0.9002123 0.4480914 0.8465161
41  0.4091917 0.3846826 0.1893296 0.3976782 0.9004456 0.4482076 0.8467354
42  0.4092772 0.3847630 0.1893691 0.3977612 0.9006336 0.4483012 0.8469123
43  0.4092166 0.3847060 0.1893411 0.3977023 0.9005002 0.4482347 0.8467868
44  0.4092120 0.3847016 0.1893390 0.3976978 0.9004901 0.4482297 0.8467773
45  0.4084997 0.3840320 0.1890094 0.3970056 0.8989227 0.4474495 0.8453034
46  0.4076185 0.3832037 0.1886017 0.3961492 0.8969837 0.4464844 0.8434800
47  0.4079601 0.3835248 0.1887597 0.3964812 0.8977353 0.4468585 0.8441869
48  0.4072616 0.3828681 0.1884366 0.3958024 0.8961983 0.4460934 0.8427415
49  0.4071015 0.3827176 0.1883625 0.3956467 0.8958458 0.4459180 0.8424101
50  0.4069080 0.3825357 0.1882730 0.3954587 0.8954202 0.4457061 0.8420098
51  0.4071929 0.3828035 0.1884047 0.3957356 0.8960470 0.4460181 0.8425992
52  0.4072726 0.3828785 0.1884416 0.3958131 0.8962225 0.4461055 0.8427643
53  0.4073633 0.3829637 0.1884836 0.3959012 0.8964220 0.4462048 0.8429518
54  0.4070657 0.3826840 0.1883459 0.3956120 0.8957672 0.4458789 0.8423361
55  0.4075835 0.3831707 0.1885855 0.3961151 0.8969065 0.4464459 0.8434074
56  0.4069183 0.3825454 0.1882777 0.3954687 0.8954428 0.4457174 0.8420311
57  0.4072738 0.3828796 0.1884422 0.3958142 0.8962251 0.4461068 0.8427667
58  0.4088239 0.3843368 0.1891594 0.3973207 0.8996362 0.4478047 0.8459743
59  0.4096584 0.3851213 0.1895455 0.3981317 0.9014724 0.4487187 0.8477011
60  0.4104518 0.3858673 0.1899126 0.3989028 0.9032185 0.4495878 0.8493430
61  0.4097991 0.3852536 0.1896106 0.3982684 0.9017821 0.4488728 0.8479923
62  0.4097366 0.3851949 0.1895817 0.3982077 0.9016446 0.4488044 0.8478630
63  0.4095082 0.3849801 0.1894760 0.3979857 0.9011419 0.4485541 0.8473902
64  0.4097645 0.3852211 0.1895946 0.3982348 0.9017060 0.4488350 0.8479207
65  0.4083526 0.3838937 0.1889413 0.3968626 0.8985990 0.4472884 0.8449990
66  0.4074197 0.3830167 0.1885097 0.3959560 0.8965462 0.4462666 0.8430686
67  0.4084834 0.3840168 0.1890019 0.3969898 0.8988869 0.4474317 0.8452698
68  0.4085927 0.3841195 0.1890524 0.3970960 0.8991273 0.4475514 0.8454958
69  0.4082757 0.3838214 0.1889058 0.3967879 0.8984298 0.4472042 0.8448399
70  0.4084148 0.3839522 0.1889701 0.3969231 0.8987359 0.4473566 0.8451278
71  0.4085451 0.3840747 0.1890304 0.3970497 0.8990225 0.4474992 0.8453973
72  0.4060415 0.3817211 0.1878720 0.3946166 0.8935133 0.4447569 0.8402167
73  0.4083755 0.3839153 0.1889520 0.3968849 0.8986495 0.4473135 0.8450465
74  0.4126764 0.3879585 0.1909419 0.4010647 0.9081137 0.4520244 0.8539461
75  0.4107038 0.3861042 0.1900292 0.3991477 0.9037730 0.4498638 0.8498644
76  0.4099643 0.3854089 0.1896871 0.3984290 0.9021456 0.4490538 0.8483341
77  0.4094696 0.3849439 0.1894582 0.3979483 0.9010571 0.4485120 0.8473105
78  0.4074541 0.3830491 0.1885256 0.3959895 0.8966219 0.4463043 0.8431399
79  0.3937573 0.3701726 0.1821882 0.3826780 0.8664813 0.4313014 0.8147971
80  0.4074555 0.3830504 0.1885263 0.3959908 0.8966249 0.4463058 0.8431427
81  0.4088450 0.3843567 0.1891692 0.3973412 0.8996827 0.4478278 0.8460180
82  0.4090847 0.3845820 0.1892801 0.3975741 0.9002100 0.4480903 0.8465139
83  0.4090461 0.3845457 0.1892622 0.3975366 0.9001251 0.4480480 0.8464341
84  0.4081314 0.3836858 0.1888390 0.3966476 0.8981122 0.4470461 0.8445412
85  0.4085902 0.3841172 0.1890513 0.3970936 0.8991219 0.4475487 0.8454908
86  0.4085703 0.3840984 0.1890421 0.3970742 0.8990780 0.4475269 0.8454495
87  0.4089665 0.3844709 0.1892254 0.3974592 0.8999499 0.4479608 0.8462693
88  0.4078004 0.3833747 0.1886859 0.3963260 0.8973839 0.4466836 0.8438564
89  0.4077745 0.3833503 0.1886739 0.3963009 0.8973270 0.4466552 0.8438029
90  0.4076624 0.3832449 0.1886220 0.3961918 0.8970801 0.4465324 0.8435708
91  0.4084348 0.3839711 0.1889794 0.3969426 0.8987800 0.4473785 0.8451692
92  0.4084365 0.3839727 0.1889802 0.3969442 0.8987837 0.4473804 0.8451727
93  0.4087162 0.3842356 0.1891096 0.3972160 0.8993991 0.4476867 0.8457514
94  0.4088020 0.3843162 0.1891493 0.3972994 0.8995879 0.4477806 0.8459289
95  0.4091944 0.3846852 0.1893309 0.3976808 0.9004515 0.4482105 0.8467410
96  0.4092572 0.3847442 0.1893599 0.3977418 0.9005897 0.4482793 0.8468710
97  0.4092350 0.3847233 0.1893496 0.3977202 0.9005407 0.4482549 0.8468249
98  0.4081763 0.3837281 0.1888598 0.3966914 0.8982112 0.4470954 0.8446343
99  0.4086328 0.3841572 0.1890710 0.3971350 0.8992156 0.4475953 0.8455789
100 0.4083951 0.3839337 0.1889610 0.3969040 0.8986926 0.4473350 0.8450870
101 0.4086204 0.3841455 0.1890653 0.3971229 0.8991884 0.4475818 0.8455533
          [,8]      [,9]     [,10]      [,11]
2   -0.4907508 -3.306165 0.9510681 0.08433593
3   -0.4914410 -3.310815 0.9524058 0.08445455
4   -0.4917316 -3.312773 0.9529689 0.08450448
5   -0.4914947 -3.311177 0.9525098 0.08446377
6   -0.4913967 -3.310517 0.9523200 0.08444693
7   -0.4911020 -3.308531 0.9517487 0.08439627
8   -0.4913004 -3.309868 0.9521334 0.08443039
9   -0.4919461 -3.314218 0.9533846 0.08454134
10  -0.4912594 -3.309592 0.9520538 0.08442333
11  -0.4908712 -3.306977 0.9513016 0.08435663
12  -0.4899167 -3.300546 0.9494518 0.08419259
13  -0.4900776 -3.301630 0.9497636 0.08422024
14  -0.4903438 -3.303423 0.9502795 0.08426599
15  -0.4901506 -3.302121 0.9499049 0.08423278
16  -0.4897192 -3.299215 0.9490690 0.08415865
17  -0.4903422 -3.303412 0.9502763 0.08426571
18  -0.4902040 -3.302481 0.9500085 0.08424196
19  -0.4911682 -3.308977 0.9518771 0.08440766
20  -0.4898624 -3.300180 0.9493466 0.08418326
21  -0.4909621 -3.307589 0.9514777 0.08437224
22  -0.4892185 -3.295842 0.9480987 0.08407261
23  -0.4911613 -3.308930 0.9518636 0.08440647
24  -0.4908780 -3.307022 0.9513147 0.08435779
25  -0.4896158 -3.298519 0.9488686 0.08414088
26  -0.4897817 -3.299636 0.9491900 0.08416938
27  -0.4892685 -3.296179 0.9481954 0.08408119
28  -0.4907811 -3.306369 0.9511268 0.08434113
29  -0.4908383 -3.306755 0.9512377 0.08435096
30  -0.4894874 -3.297654 0.9486198 0.08411882
31  -0.4892037 -3.295742 0.9480699 0.08407005
32  -0.4903690 -3.303593 0.9503282 0.08427031
33  -0.4908658 -3.306940 0.9512910 0.08435569
34  -0.4909080 -3.307224 0.9513729 0.08436295
35  -0.4904087 -3.303860 0.9504052 0.08427714
36  -0.4912022 -3.309206 0.9519430 0.08441350
37  -0.4911648 -3.308954 0.9518704 0.08440707
38  -0.4900173 -3.301224 0.9496466 0.08420987
39  -0.4899348 -3.300668 0.9494867 0.08419570
40  -0.4912213 -3.309335 0.9519800 0.08441678
41  -0.4913486 -3.310193 0.9522267 0.08443866
42  -0.4914512 -3.310884 0.9524256 0.08445630
43  -0.4913784 -3.310393 0.9522845 0.08444378
44  -0.4913729 -3.310356 0.9522738 0.08444284
45  -0.4905176 -3.304594 0.9506162 0.08429585
46  -0.4894595 -3.297466 0.9485657 0.08411402
47  -0.4898697 -3.300229 0.9493606 0.08418451
48  -0.4890310 -3.294579 0.9477352 0.08404038
49  -0.4888386 -3.293283 0.9473624 0.08400732
50  -0.4886064 -3.291718 0.9469123 0.08396741
51  -0.4889484 -3.294023 0.9475752 0.08402619
52  -0.4890442 -3.294668 0.9477607 0.08404264
53  -0.4891530 -3.295401 0.9479717 0.08406135
54  -0.4887957 -3.292994 0.9472793 0.08399995
55  -0.4894174 -3.297182 0.9484841 0.08410678
56  -0.4886187 -3.291802 0.9469362 0.08396953
57  -0.4890456 -3.294677 0.9477635 0.08404289
58  -0.4909069 -3.307217 0.9513707 0.08436276
59  -0.4919089 -3.313967 0.9533126 0.08453495
60  -0.4928617 -3.320386 0.9551591 0.08469869
61  -0.4920779 -3.315106 0.9536401 0.08456399
62  -0.4920029 -3.314600 0.9534947 0.08455110
63  -0.4917285 -3.312752 0.9529630 0.08450395
64  -0.4920364 -3.314826 0.9535596 0.08455686
65  -0.4903410 -3.303404 0.9502739 0.08426550
66  -0.4892208 -3.295858 0.9481030 0.08407300
67  -0.4904981 -3.304463 0.9505784 0.08429250
68  -0.4906293 -3.305346 0.9508327 0.08431504
69  -0.4902486 -3.302782 0.9500950 0.08424963
70  -0.4904157 -3.303908 0.9504187 0.08427834
71  -0.4905721 -3.304961 0.9507218 0.08430522
72  -0.4875658 -3.284708 0.9448958 0.08378859
73  -0.4903685 -3.303590 0.9503273 0.08427024
74  -0.4955329 -3.338382 0.9603357 0.08515773
75  -0.4931643 -3.322425 0.9557455 0.08475069
76  -0.4922763 -3.316442 0.9540245 0.08459808
77  -0.4916823 -3.312441 0.9528734 0.08449601
78  -0.4892621 -3.296136 0.9481832 0.08408010
79  -0.4728152 -3.185334 0.9163092 0.08125368
80  -0.4892638 -3.296147 0.9481863 0.08408038
81  -0.4909323 -3.307388 0.9514199 0.08436712
82  -0.4912201 -3.309327 0.9519776 0.08441657
83  -0.4911737 -3.309014 0.9518878 0.08440861
84  -0.4900753 -3.301615 0.9497591 0.08421985
85  -0.4906263 -3.305327 0.9508269 0.08431454
86  -0.4906024 -3.305165 0.9507805 0.08431042
87  -0.4910781 -3.308370 0.9517025 0.08439218
88  -0.4896779 -3.298937 0.9489890 0.08415156
89  -0.4896469 -3.298728 0.9489288 0.08414622
90  -0.4895122 -3.297821 0.9486677 0.08412307
91  -0.4904397 -3.304070 0.9504653 0.08428247
92  -0.4904418 -3.304083 0.9504693 0.08428282
93  -0.4907776 -3.306346 0.9511201 0.08434053
94  -0.4908806 -3.307040 0.9513197 0.08435823
95  -0.4913518 -3.310214 0.9522330 0.08443922
96  -0.4914272 -3.310722 0.9523791 0.08445218
97  -0.4914005 -3.310542 0.9523273 0.08444758
98  -0.4901293 -3.301978 0.9498638 0.08422913
99  -0.4906774 -3.305671 0.9509260 0.08432332
100 -0.4903920 -3.303748 0.9503729 0.08427427
101 -0.4906626 -3.305571 0.9508972 0.08432077


$startweights
$startweights[[1]]
$startweights[[1]][[1]]
            [,1]
 [1,]  0.5939462
 [2,]  0.3329504
 [3,]  1.0630998
 [4,] -0.3041839
 [5,]  0.3700188
 [6,]  0.2670988
 [7,] -0.5425200
 [8,]  1.2078678
 [9,]  1.1604026
[10,]  0.7002136
[11,]  1.5868335
[12,]  0.5584864

$startweights[[1]][[2]]
           [,1]
[1,] -1.2765922
[2,] -0.5732654



$result.matrix
                                     [,1]
error                         0.106717308
reached.threshold             0.008838321
steps                       539.000000000
Intercept.to.1layhid1        -0.437602084
B_CL2_VAL.to.1layhid1         0.410246659
B_TURB_VAL.to.1layhid1        0.385674366
B_PH_VAL.to.1layhid1          0.189817708
B_COND_VAL.to.1layhid1        0.398703409
B_TEMP_VAL.to.1layhid1        0.902766981
B_PRES_OP.to.1layhid1         0.449363071
B_PLNT_PH_VAL.to.1layhid1     0.848918391
B_PLNT_TURB_VAL.to.1layhid1  -0.492615324
B_PLNT_FLOW_OP.to.1layhid1   -3.318726436
B_PLNT_CL2_VAL.to.1layhid1    0.954681595
past_data.to.1layhid1         0.084656349
Intercept.to.B_PLNT_PRES_OP   0.005848307
1layhid1.to.B_PLNT_PRES_OP    0.995287808

attr(,"class")
[1] "nn"

$modelList$model8
$call
neuralnet(formula = nn_input, data = model_input, hidden = hidden, 
    threshold = threshold, stepmax = stepmax, rep = rep, startweights = unlist(control))

$response
    B_PLNT_PH_VAL
2      0.93333333
3      0.93333333
4      0.93333333
5      0.86666667
6      0.86666667
7      0.86666667
8      0.86666667
9      0.80000000
10     0.80000000
11     0.80000000
12     0.80000000
13     0.80000000
14     0.80000000
15     0.73333333
16     0.73333333
17     0.73333333
18     0.73333333
19     0.73333333
20     0.66666667
21     0.66666667
22     0.60000000
23     0.60000000
24     0.53333333
25     0.53333333
26     0.53333333
27     0.46666667
28     0.46666667
29     0.46666667
30     0.40000000
31     0.40000000
32     0.40000000
33     0.33333333
34     0.33333333
35     0.33333333
36     0.33333333
37     0.33333333
38     0.33333333
39     0.33333333
40     0.33333333
41     0.33333333
42     0.33333333
43     0.33333333
44     0.33333333
45     0.33333333
46     0.33333333
47     0.33333333
48     0.40000000
49     0.40000000
50     0.40000000
51     0.40000000
52     0.40000000
53     0.46666667
54     0.46666667
55     0.40000000
56     0.33333333
57     0.26666667
58     0.26666667
59     0.26666667
60     0.26666667
61     0.26666667
62     0.26666667
63     0.26666667
64     0.26666667
65     0.26666667
66     0.20000000
67     0.13333333
68     0.13333333
69     0.06666667
70     0.06666667
71     0.06666667
72     0.00000000
73     0.00000000
74     0.00000000
75     0.00000000
76     0.00000000
77     0.00000000
78     0.00000000
79     0.00000000
80     0.00000000
81     0.00000000
82     0.06666667
83     0.06666667
84     0.06666667
85     0.06666667
86     0.06666667
87     0.06666667
88     0.06666667
89     0.06666667
90     0.06666667
91     0.06666667
92     0.06666667
93     0.06666667
94     0.13333333
95     0.13333333
96     0.13333333
97     0.20000000
98     0.13333333
99     0.13333333
100    0.13333333
101    0.13333333

$covariate
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.00000000 0.61538462
3   0.996138996 0.34415584 0.27272727 0.33333333 0.00000000 0.61538462
4   0.988416988 0.24675325 0.31818182 0.52777778 0.04545455 0.69230769
5   0.984555985 0.29220779 0.36363636 0.50000000 0.04545455 0.61538462
6   0.984555985 0.22077922 0.36363636 0.55555556 0.04545455 0.69230769
7   0.949806950 0.22077922 0.40909091 0.22222222 0.09090909 0.69230769
8   0.972972973 0.12987013 0.40909091 0.41666667 0.13636364 0.69230769
9   0.969111969 0.12987013 0.45454545 0.22222222 0.22727273 0.76923077
10  0.961389961 0.16883117 0.45454545 0.41666667 0.22727273 0.69230769
11  0.965250965 0.18831169 0.45454545 0.25000000 0.27272727 0.53846154
12  0.949806950 0.29870130 0.45454545 0.38888889 0.27272727 0.46153846
13  0.961389961 0.52597403 0.50000000 0.11111111 0.36363636 0.46153846
14  0.961389961 0.50649351 0.45454545 0.36111111 0.36363636 0.46153846
15  0.961389961 0.51948052 0.50000000 0.16666667 0.45454545 0.46153846
16  0.961389961 0.31818182 0.45454545 0.36111111 0.36363636 0.38461538
17  0.976833977 0.43506494 0.45454545 0.47222222 0.45454545 0.38461538
18  0.980694981 0.51298701 0.36363636 0.55555556 0.36363636 0.38461538
19  0.980694981 0.50000000 0.36363636 0.47222222 0.45454545 0.30769231
20  0.980694981 0.44805195 0.40909091 0.50000000 0.40909091 0.30769231
21  0.972972973 0.43506494 0.40909091 0.52777778 0.45454545 0.23076923
22  0.976833977 0.33116883 0.45454545 0.44444444 0.36363636 0.23076923
23  0.980694981 0.19480519 0.50000000 0.58333333 0.45454545 0.61538462
24  0.976833977 0.25324675 0.50000000 0.50000000 0.40909091 0.61538462
25  0.969111969 0.06493506 0.54545455 0.55555556 0.40909091 0.53846154
26  0.969111969 0.22077922 0.59090909 0.50000000 0.40909091 0.53846154
27  0.965250965 0.10389610 0.63636364 0.47222222 0.36363636 0.53846154
28  0.961389961 0.05194805 0.63636364 0.47222222 0.50000000 0.53846154
29  0.961389961 0.30519481 0.72727273 0.47222222 0.40909091 0.46153846
30  0.961389961 0.00000000 0.72727273 0.55555556 0.45454545 0.46153846
31  0.961389961 0.16233766 0.72727273 0.36111111 0.40909091 0.46153846
32  0.953667954 0.18181818 0.68181818 0.58333333 0.40909091 0.53846154
33  0.957528958 0.14285714 0.72727273 0.41666667 0.45454545 0.53846154
34  0.667953668 0.46753247 0.68181818 0.61111111 0.31818182 0.53846154
35  0.019305019 0.47402597 0.72727273 0.66666667 0.36363636 0.53846154
36  0.015444015 0.61038961 0.72727273 0.50000000 0.31818182 0.53846154
37  0.030888031 0.42207792 0.72727273 0.52777778 0.36363636 0.53846154
38  0.023166023 0.53896104 0.77272727 0.33333333 0.36363636 0.53846154
39  0.003861004 0.48051948 0.77272727 0.63888889 0.27272727 0.46153846
40  0.023166023 0.57792208 0.81818182 0.50000000 0.31818182 0.53846154
41  0.000000000 0.74025974 0.81818182 0.50000000 0.27272727 0.53846154
42  0.019305019 0.60389610 0.81818182 0.55555556 0.27272727 0.61538462
43  0.023166023 0.56493506 0.86363636 0.58333333 0.22727273 0.53846154
44  0.023166023 0.37012987 0.90909091 0.63888889 0.27272727 0.46153846
45  0.023166023 0.62337662 0.90909091 0.58333333 0.22727273 0.46153846
46  0.023166023 0.53246753 0.95454545 0.69444444 0.22727273 0.38461538
47  0.019305019 0.34415584 0.95454545 0.47222222 0.27272727 0.23076923
48  0.023166023 0.50000000 1.00000000 0.55555556 0.22727273 0.15384615
49  0.023166023 0.21428571 0.95454545 0.61111111 0.27272727 0.15384615
50  0.023166023 0.28571429 1.00000000 0.50000000 0.22727273 0.15384615
51  0.023166023 0.25324675 0.95454545 0.66666667 0.27272727 0.15384615
52  0.019305019 0.38311688 0.95454545 0.58333333 0.27272727 0.15384615
53  0.023166023 0.37012987 0.90909091 0.83333333 0.18181818 0.00000000
54  0.023166023 0.48051948 0.81818182 0.61111111 0.18181818 0.00000000
55  0.019305019 0.77272727 0.72727273 0.88888889 0.09090909 0.15384615
56  0.019305019 0.70129870 0.68181818 0.63888889 0.13636364 0.07692308
57  0.023166023 0.79870130 0.63636364 0.83333333 0.09090909 0.30769231
58  0.023166023 0.91558442 0.63636364 0.77777778 0.18181818 0.53846154
59  0.019305019 1.00000000 0.59090909 0.83333333 0.09090909 0.69230769
60  0.023166023 0.82467532 0.63636364 0.75000000 0.18181818 0.84615385
61  0.023166023 0.85714286 0.63636364 0.72222222 0.13636364 0.84615385
62  0.019305019 0.72727273 0.63636364 0.75000000 0.18181818 0.76923077
63  0.023166023 0.80519481 0.59090909 0.69444444 0.09090909 0.69230769
64  0.023166023 0.87662338 0.54545455 0.86111111 0.13636364 0.69230769
65  0.023166023 0.79870130 0.50000000 0.69444444 0.04545455 0.53846154
66  0.019305019 0.70129870 0.50000000 0.80555556 0.13636364 0.46153846
67  0.023166023 0.77922078 0.45454545 0.80555556 0.13636364 0.53846154
68  0.023166023 0.70129870 0.45454545 0.88888889 0.13636364 0.53846154
69  0.023166023 0.62987013 0.40909091 0.77777778 0.09090909 0.61538462
70  0.023166023 0.57142857 0.40909091 0.94444444 0.09090909 0.61538462
71  0.023166023 0.72727273 0.40909091 0.77777778 0.09090909 0.69230769
72  0.027027027 0.61688312 0.36363636 1.00000000 0.09090909 0.46153846
73  0.027027027 0.80519481 0.36363636 0.66666667 0.09090909 0.69230769
74  0.027027027 0.77922078 0.36363636 0.94444444 0.09090909 1.00000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.18181818 0.76923077
76  0.027027027 0.38311688 0.40909091 0.94444444 0.09090909 0.76923077
77  0.027027027 0.62987013 0.40909091 0.75000000 0.18181818 0.69230769
78  0.027027027 0.55844156 0.45454545 0.83333333 0.09090909 0.53846154
79  0.027027027 0.45454545 0.45454545 0.69444444 0.22727273 0.23076923
80  0.027027027 0.61038961 0.40909091 0.80555556 0.18181818 0.53846154
81  0.030888031 0.64935065 0.45454545 0.72222222 0.31818182 0.53846154
82  0.027027027 0.82467532 0.45454545 0.69444444 0.31818182 0.53846154
83  0.027027027 0.57792208 0.45454545 0.66666667 0.45454545 0.53846154
84  0.023166023 0.85714286 0.45454545 0.52777778 0.40909091 0.46153846
85  0.011583012 0.33766234 0.45454545 0.58333333 0.50000000 0.38461538
86  0.023166023 0.33116883 0.40909091 0.47222222 0.54545455 0.38461538
87  0.030888031 0.55194805 0.31818182 0.72222222 0.59090909 0.30769231
88  0.030888031 0.44805195 0.22727273 0.33333333 0.72727273 0.23076923
89  0.034749035 0.64285714 0.18181818 0.38888889 0.68181818 0.15384615
90  0.034749035 0.39610390 0.18181818 0.44444444 0.77272727 0.15384615
91  0.034749035 0.42857143 0.18181818 0.33333333 0.77272727 0.15384615
92  0.034749035 0.26623377 0.13636364 0.38888889 0.81818182 0.15384615
93  0.034749035 0.32467532 0.09090909 0.22222222 0.81818182 0.53846154
94  0.034749035 0.25324675 0.00000000 0.16666667 0.81818182 0.61538462
95  0.034749035 0.24675325 0.00000000 0.27777778 0.95454545 0.61538462
96  0.034749035 0.39610390 0.04545455 0.19444444 1.00000000 0.53846154
97  0.034749035 0.12337662 0.04545455 0.30555556 0.95454545 0.53846154
98  0.030888031 0.15584416 0.00000000 0.27777778 0.95454545 0.53846154
99  0.030888031 0.07792208 0.00000000 0.00000000 0.95454545 0.53846154
100 0.027027027 0.07792208 0.00000000 0.05555556 0.86363636 0.53846154
101 0.023166023 0.07142857 0.00000000 0.25000000 0.90909091 0.53846154
    B_PLNT_PRES_OP B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL  past_data
2        0.5000000     0.194148936      0.4545455    0.284403670 1.00000000
3        0.5714286     0.199468085      0.3636364    0.284403670 0.93333333
4        0.5714286     0.242021277      0.3636364    0.284403670 0.93333333
5        0.5000000     0.260638298      0.3636364    0.284403670 0.93333333
6        0.5714286     0.289893617      0.3636364    0.238532110 0.86666667
7        0.6428571     0.276595745      0.3636364    0.220183486 0.86666667
8        0.5714286     0.303191489      0.3636364    0.201834862 0.86666667
9        0.7142857     0.348404255      0.2727273    0.174311927 0.86666667
10       0.5714286     0.345744681      0.3636364    0.155963303 0.80000000
11       0.5000000     0.377659574      0.3636364    0.137614679 0.80000000
12       0.5000000     0.375000000      0.4545455    0.100917431 0.80000000
13       0.5000000     0.396276596      0.4545455    0.082568807 0.80000000
14       0.5000000     0.375000000      0.4545455    0.064220183 0.80000000
15       0.5000000     0.375000000      0.4545455    0.045871560 0.80000000
16       0.5000000     0.359042553      0.4545455    0.045871560 0.73333333
17       0.5000000     0.351063830      0.4545455    0.036697248 0.73333333
18       0.5000000     0.327127660      0.4545455    0.018348624 0.73333333
19       0.5000000     0.324468085      0.3636364    0.009174312 0.73333333
20       0.5714286     0.321808511      0.4545455    0.009174312 0.73333333
21       0.5000000     0.297872340      0.3636364    0.009174312 0.66666667
22       0.5000000     0.279255319      0.4545455    0.018348624 0.66666667
23       0.5714286     0.265957447      0.3636364    0.000000000 0.60000000
24       0.5714286     0.247340426      0.3636364    0.000000000 0.60000000
25       0.5000000     0.234042553      0.4545455    0.009174312 0.53333333
26       0.5000000     0.228723404      0.4545455    0.009174312 0.53333333
27       0.5000000     0.228723404      0.4545455    0.027522936 0.53333333
28       0.5000000     0.228723404      0.3636364    0.045871560 0.46666667
29       0.5000000     0.223404255      0.3636364    0.064220183 0.46666667
30       0.4285714     0.226063830      0.4545455    0.082568807 0.46666667
31       0.4285714     0.204787234      0.4545455    0.064220183 0.40000000
32       0.5000000     1.000000000      0.3636364    0.357798165 0.40000000
33       0.5000000     0.319148936      0.4545455    0.568807339 0.40000000
34       0.5000000     0.194148936      0.4545455    0.568807339 0.33333333
35       0.5000000     0.175531915      0.4545455    0.596330275 0.33333333
36       0.5000000     0.172872340      0.3636364    0.605504587 0.33333333
37       0.5000000     0.170212766      0.3636364    0.605504587 0.33333333
38       0.5000000     0.170212766      0.4545455    0.577981651 0.33333333
39       0.5000000     0.164893617      0.4545455    0.577981651 0.33333333
40       0.5000000     0.175531915      0.3636364    0.605504587 0.33333333
41       0.5714286     0.180851064      0.3636364    0.642201835 0.33333333
42       0.5714286     0.196808511      0.3636364    0.669724771 0.33333333
43       0.5714286     0.215425532      0.3636364    0.724770642 0.33333333
44       0.5714286     0.231382979      0.3636364    0.770642202 0.33333333
45       0.5714286     0.226063830      0.4545455    0.752293578 0.33333333
46       0.5000000     0.207446809      0.5454545    0.770642202 0.33333333
47       0.4285714     0.204787234      0.4545455    0.770642202 0.33333333
48       0.4285714     0.156914894      0.5454545    0.761467890 0.33333333
49       0.4285714     0.167553191      0.5454545    0.779816514 0.40000000
50       0.4285714     0.223404255      0.5454545    0.807339450 0.40000000
51       0.4285714     0.228723404      0.5454545    0.798165138 0.40000000
52       0.4285714     0.215425532      0.5454545    0.798165138 0.40000000
53       0.4285714     0.114361702      0.5454545    0.779816514 0.40000000
54       0.4285714     0.186170213      0.5454545    0.798165138 0.46666667
55       0.5000000     0.202127660      0.5454545    0.816513761 0.46666667
56       0.4285714     0.172872340      0.5454545    0.798165138 0.40000000
57       0.5000000     0.164893617      0.5454545    0.779816514 0.33333333
58       0.5714286     0.170212766      0.4545455    0.779816514 0.26666667
59       0.6428571     0.207446809      0.3636364    0.816513761 0.26666667
60       0.7142857     0.202127660      0.2727273    0.816513761 0.26666667
61       0.6428571     0.196808511      0.3636364    0.844036697 0.26666667
62       0.6428571     0.191489362      0.3636364    0.853211009 0.26666667
63       0.6428571     0.148936170      0.3636364    0.844036697 0.26666667
64       0.5714286     0.204787234      0.3636364    0.862385321 0.26666667
65       0.5000000     0.220744681      0.4545455    0.853211009 0.26666667
66       0.4285714     0.226063830      0.5454545    0.871559633 0.26666667
67       0.4285714     0.130319149      0.4545455    0.871559633 0.20000000
68       0.5000000     0.090425532      0.4545455    0.889908257 0.13333333
69       0.5000000     0.061170213      0.4545455    0.899082569 0.13333333
70       0.5000000     0.050531915      0.4545455    0.899082569 0.06666667
71       0.5714286     0.029255319      0.4545455    0.908256881 0.06666667
72       0.3571429     0.023936170      0.6363636    0.917431193 0.06666667
73       0.5714286     0.042553191      0.4545455    0.944954128 0.00000000
74       1.0000000     0.039893617      0.0000000    0.954128440 0.00000000
75       0.7857143     0.026595745      0.1818182    0.963302752 0.00000000
76       0.7142857     0.007978723      0.2727273    0.963302752 0.00000000
77       0.6428571     0.010638298      0.3636364    0.981651376 0.00000000
78       0.4285714     0.021276596      0.5454545    1.000000000 0.00000000
79       0.0000000     0.082446809      1.0000000    0.972477064 0.00000000
80       0.5000000     0.023936170      0.5454545    0.972477064 0.00000000
81       0.5000000     0.000000000      0.4545455    0.972477064 0.00000000
82       0.5000000     0.029255319      0.4545455    0.972477064 0.00000000
83       0.5000000     0.042553191      0.4545455    0.944954128 0.06666667
84       0.5000000     0.055851064      0.5454545    0.935779817 0.06666667
85       0.5000000     0.045212766      0.4545455    0.926605505 0.06666667
86       0.5000000     0.058510638      0.4545455    0.935779817 0.06666667
87       0.5000000     0.087765957      0.4545455    0.926605505 0.06666667
88       0.4285714     0.069148936      0.5454545    0.926605505 0.06666667
89       0.4285714     0.085106383      0.5454545    0.917431193 0.06666667
90       0.5000000     0.119680851      0.5454545    0.889908257 0.06666667
91       0.5714286     0.162234043      0.4545455    0.889908257 0.06666667
92       0.5000000     0.156914894      0.4545455    0.889908257 0.06666667
93       0.5714286     0.159574468      0.4545455    0.880733945 0.06666667
94       0.5714286     0.135638298      0.4545455    0.871559633 0.06666667
95       0.5714286     0.180851064      0.4545455    0.889908257 0.13333333
96       0.5714286     0.188829787      0.4545455    0.880733945 0.13333333
97       0.5714286     0.098404255      0.4545455    0.871559633 0.13333333
98       0.5714286     0.159574468      0.5454545    0.862385321 0.20000000
99       0.5714286     0.154255319      0.4545455    0.862385321 0.13333333
100      0.5000000     0.188829787      0.4545455    0.853211009 0.13333333
101      0.5000000     0.223404255      0.4545455    0.844036697 0.13333333

$model.list
$model.list$response
[1] "B_PLNT_PH_VAL"

$model.list$variables
 [1] "B_CL2_VAL"       "B_TURB_VAL"      "B_PH_VAL"        "B_COND_VAL"     
 [5] "B_TEMP_VAL"      "B_PRES_OP"       "B_PLNT_PRES_OP"  "B_PLNT_TURB_VAL"
 [9] "B_PLNT_FLOW_OP"  "B_PLNT_CL2_VAL"  "past_data"      


$err.fct
function (x, y) 
{
    1/2 * (y - x)^2
}
<bytecode: 0x7fd6aa25d4a8>
<environment: 0x7fd6aa208890>
attr(,"type")
[1] "sse"

$act.fct
function (x) 
{
    1/(1 + exp(-x))
}
<bytecode: 0x7fd6aa25ca88>
<environment: 0x7fd6aa2083c0>
attr(,"type")
[1] "logistic"

$linear.output
[1] TRUE

$data
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.00000000 0.61538462
3   0.996138996 0.34415584 0.27272727 0.33333333 0.00000000 0.61538462
4   0.988416988 0.24675325 0.31818182 0.52777778 0.04545455 0.69230769
5   0.984555985 0.29220779 0.36363636 0.50000000 0.04545455 0.61538462
6   0.984555985 0.22077922 0.36363636 0.55555556 0.04545455 0.69230769
7   0.949806950 0.22077922 0.40909091 0.22222222 0.09090909 0.69230769
8   0.972972973 0.12987013 0.40909091 0.41666667 0.13636364 0.69230769
9   0.969111969 0.12987013 0.45454545 0.22222222 0.22727273 0.76923077
10  0.961389961 0.16883117 0.45454545 0.41666667 0.22727273 0.69230769
11  0.965250965 0.18831169 0.45454545 0.25000000 0.27272727 0.53846154
12  0.949806950 0.29870130 0.45454545 0.38888889 0.27272727 0.46153846
13  0.961389961 0.52597403 0.50000000 0.11111111 0.36363636 0.46153846
14  0.961389961 0.50649351 0.45454545 0.36111111 0.36363636 0.46153846
15  0.961389961 0.51948052 0.50000000 0.16666667 0.45454545 0.46153846
16  0.961389961 0.31818182 0.45454545 0.36111111 0.36363636 0.38461538
17  0.976833977 0.43506494 0.45454545 0.47222222 0.45454545 0.38461538
18  0.980694981 0.51298701 0.36363636 0.55555556 0.36363636 0.38461538
19  0.980694981 0.50000000 0.36363636 0.47222222 0.45454545 0.30769231
20  0.980694981 0.44805195 0.40909091 0.50000000 0.40909091 0.30769231
21  0.972972973 0.43506494 0.40909091 0.52777778 0.45454545 0.23076923
22  0.976833977 0.33116883 0.45454545 0.44444444 0.36363636 0.23076923
23  0.980694981 0.19480519 0.50000000 0.58333333 0.45454545 0.61538462
24  0.976833977 0.25324675 0.50000000 0.50000000 0.40909091 0.61538462
25  0.969111969 0.06493506 0.54545455 0.55555556 0.40909091 0.53846154
26  0.969111969 0.22077922 0.59090909 0.50000000 0.40909091 0.53846154
27  0.965250965 0.10389610 0.63636364 0.47222222 0.36363636 0.53846154
28  0.961389961 0.05194805 0.63636364 0.47222222 0.50000000 0.53846154
29  0.961389961 0.30519481 0.72727273 0.47222222 0.40909091 0.46153846
30  0.961389961 0.00000000 0.72727273 0.55555556 0.45454545 0.46153846
31  0.961389961 0.16233766 0.72727273 0.36111111 0.40909091 0.46153846
32  0.953667954 0.18181818 0.68181818 0.58333333 0.40909091 0.53846154
33  0.957528958 0.14285714 0.72727273 0.41666667 0.45454545 0.53846154
34  0.667953668 0.46753247 0.68181818 0.61111111 0.31818182 0.53846154
35  0.019305019 0.47402597 0.72727273 0.66666667 0.36363636 0.53846154
36  0.015444015 0.61038961 0.72727273 0.50000000 0.31818182 0.53846154
37  0.030888031 0.42207792 0.72727273 0.52777778 0.36363636 0.53846154
38  0.023166023 0.53896104 0.77272727 0.33333333 0.36363636 0.53846154
39  0.003861004 0.48051948 0.77272727 0.63888889 0.27272727 0.46153846
40  0.023166023 0.57792208 0.81818182 0.50000000 0.31818182 0.53846154
41  0.000000000 0.74025974 0.81818182 0.50000000 0.27272727 0.53846154
42  0.019305019 0.60389610 0.81818182 0.55555556 0.27272727 0.61538462
43  0.023166023 0.56493506 0.86363636 0.58333333 0.22727273 0.53846154
44  0.023166023 0.37012987 0.90909091 0.63888889 0.27272727 0.46153846
45  0.023166023 0.62337662 0.90909091 0.58333333 0.22727273 0.46153846
46  0.023166023 0.53246753 0.95454545 0.69444444 0.22727273 0.38461538
47  0.019305019 0.34415584 0.95454545 0.47222222 0.27272727 0.23076923
48  0.023166023 0.50000000 1.00000000 0.55555556 0.22727273 0.15384615
49  0.023166023 0.21428571 0.95454545 0.61111111 0.27272727 0.15384615
50  0.023166023 0.28571429 1.00000000 0.50000000 0.22727273 0.15384615
51  0.023166023 0.25324675 0.95454545 0.66666667 0.27272727 0.15384615
52  0.019305019 0.38311688 0.95454545 0.58333333 0.27272727 0.15384615
53  0.023166023 0.37012987 0.90909091 0.83333333 0.18181818 0.00000000
54  0.023166023 0.48051948 0.81818182 0.61111111 0.18181818 0.00000000
55  0.019305019 0.77272727 0.72727273 0.88888889 0.09090909 0.15384615
56  0.019305019 0.70129870 0.68181818 0.63888889 0.13636364 0.07692308
57  0.023166023 0.79870130 0.63636364 0.83333333 0.09090909 0.30769231
58  0.023166023 0.91558442 0.63636364 0.77777778 0.18181818 0.53846154
59  0.019305019 1.00000000 0.59090909 0.83333333 0.09090909 0.69230769
60  0.023166023 0.82467532 0.63636364 0.75000000 0.18181818 0.84615385
61  0.023166023 0.85714286 0.63636364 0.72222222 0.13636364 0.84615385
62  0.019305019 0.72727273 0.63636364 0.75000000 0.18181818 0.76923077
63  0.023166023 0.80519481 0.59090909 0.69444444 0.09090909 0.69230769
64  0.023166023 0.87662338 0.54545455 0.86111111 0.13636364 0.69230769
65  0.023166023 0.79870130 0.50000000 0.69444444 0.04545455 0.53846154
66  0.019305019 0.70129870 0.50000000 0.80555556 0.13636364 0.46153846
67  0.023166023 0.77922078 0.45454545 0.80555556 0.13636364 0.53846154
68  0.023166023 0.70129870 0.45454545 0.88888889 0.13636364 0.53846154
69  0.023166023 0.62987013 0.40909091 0.77777778 0.09090909 0.61538462
70  0.023166023 0.57142857 0.40909091 0.94444444 0.09090909 0.61538462
71  0.023166023 0.72727273 0.40909091 0.77777778 0.09090909 0.69230769
72  0.027027027 0.61688312 0.36363636 1.00000000 0.09090909 0.46153846
73  0.027027027 0.80519481 0.36363636 0.66666667 0.09090909 0.69230769
74  0.027027027 0.77922078 0.36363636 0.94444444 0.09090909 1.00000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.18181818 0.76923077
76  0.027027027 0.38311688 0.40909091 0.94444444 0.09090909 0.76923077
77  0.027027027 0.62987013 0.40909091 0.75000000 0.18181818 0.69230769
78  0.027027027 0.55844156 0.45454545 0.83333333 0.09090909 0.53846154
79  0.027027027 0.45454545 0.45454545 0.69444444 0.22727273 0.23076923
80  0.027027027 0.61038961 0.40909091 0.80555556 0.18181818 0.53846154
81  0.030888031 0.64935065 0.45454545 0.72222222 0.31818182 0.53846154
82  0.027027027 0.82467532 0.45454545 0.69444444 0.31818182 0.53846154
83  0.027027027 0.57792208 0.45454545 0.66666667 0.45454545 0.53846154
84  0.023166023 0.85714286 0.45454545 0.52777778 0.40909091 0.46153846
85  0.011583012 0.33766234 0.45454545 0.58333333 0.50000000 0.38461538
86  0.023166023 0.33116883 0.40909091 0.47222222 0.54545455 0.38461538
87  0.030888031 0.55194805 0.31818182 0.72222222 0.59090909 0.30769231
88  0.030888031 0.44805195 0.22727273 0.33333333 0.72727273 0.23076923
89  0.034749035 0.64285714 0.18181818 0.38888889 0.68181818 0.15384615
90  0.034749035 0.39610390 0.18181818 0.44444444 0.77272727 0.15384615
91  0.034749035 0.42857143 0.18181818 0.33333333 0.77272727 0.15384615
92  0.034749035 0.26623377 0.13636364 0.38888889 0.81818182 0.15384615
93  0.034749035 0.32467532 0.09090909 0.22222222 0.81818182 0.53846154
94  0.034749035 0.25324675 0.00000000 0.16666667 0.81818182 0.61538462
95  0.034749035 0.24675325 0.00000000 0.27777778 0.95454545 0.61538462
96  0.034749035 0.39610390 0.04545455 0.19444444 1.00000000 0.53846154
97  0.034749035 0.12337662 0.04545455 0.30555556 0.95454545 0.53846154
98  0.030888031 0.15584416 0.00000000 0.27777778 0.95454545 0.53846154
99  0.030888031 0.07792208 0.00000000 0.00000000 0.95454545 0.53846154
100 0.027027027 0.07792208 0.00000000 0.05555556 0.86363636 0.53846154
101 0.023166023 0.07142857 0.00000000 0.25000000 0.90909091 0.53846154
    B_PLNT_PRES_OP B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL
2        0.5000000    0.93333333     0.194148936      0.4545455    0.284403670
3        0.5714286    0.93333333     0.199468085      0.3636364    0.284403670
4        0.5714286    0.93333333     0.242021277      0.3636364    0.284403670
5        0.5000000    0.86666667     0.260638298      0.3636364    0.284403670
6        0.5714286    0.86666667     0.289893617      0.3636364    0.238532110
7        0.6428571    0.86666667     0.276595745      0.3636364    0.220183486
8        0.5714286    0.86666667     0.303191489      0.3636364    0.201834862
9        0.7142857    0.80000000     0.348404255      0.2727273    0.174311927
10       0.5714286    0.80000000     0.345744681      0.3636364    0.155963303
11       0.5000000    0.80000000     0.377659574      0.3636364    0.137614679
12       0.5000000    0.80000000     0.375000000      0.4545455    0.100917431
13       0.5000000    0.80000000     0.396276596      0.4545455    0.082568807
14       0.5000000    0.80000000     0.375000000      0.4545455    0.064220183
15       0.5000000    0.73333333     0.375000000      0.4545455    0.045871560
16       0.5000000    0.73333333     0.359042553      0.4545455    0.045871560
17       0.5000000    0.73333333     0.351063830      0.4545455    0.036697248
18       0.5000000    0.73333333     0.327127660      0.4545455    0.018348624
19       0.5000000    0.73333333     0.324468085      0.3636364    0.009174312
20       0.5714286    0.66666667     0.321808511      0.4545455    0.009174312
21       0.5000000    0.66666667     0.297872340      0.3636364    0.009174312
22       0.5000000    0.60000000     0.279255319      0.4545455    0.018348624
23       0.5714286    0.60000000     0.265957447      0.3636364    0.000000000
24       0.5714286    0.53333333     0.247340426      0.3636364    0.000000000
25       0.5000000    0.53333333     0.234042553      0.4545455    0.009174312
26       0.5000000    0.53333333     0.228723404      0.4545455    0.009174312
27       0.5000000    0.46666667     0.228723404      0.4545455    0.027522936
28       0.5000000    0.46666667     0.228723404      0.3636364    0.045871560
29       0.5000000    0.46666667     0.223404255      0.3636364    0.064220183
30       0.4285714    0.40000000     0.226063830      0.4545455    0.082568807
31       0.4285714    0.40000000     0.204787234      0.4545455    0.064220183
32       0.5000000    0.40000000     1.000000000      0.3636364    0.357798165
33       0.5000000    0.33333333     0.319148936      0.4545455    0.568807339
34       0.5000000    0.33333333     0.194148936      0.4545455    0.568807339
35       0.5000000    0.33333333     0.175531915      0.4545455    0.596330275
36       0.5000000    0.33333333     0.172872340      0.3636364    0.605504587
37       0.5000000    0.33333333     0.170212766      0.3636364    0.605504587
38       0.5000000    0.33333333     0.170212766      0.4545455    0.577981651
39       0.5000000    0.33333333     0.164893617      0.4545455    0.577981651
40       0.5000000    0.33333333     0.175531915      0.3636364    0.605504587
41       0.5714286    0.33333333     0.180851064      0.3636364    0.642201835
42       0.5714286    0.33333333     0.196808511      0.3636364    0.669724771
43       0.5714286    0.33333333     0.215425532      0.3636364    0.724770642
44       0.5714286    0.33333333     0.231382979      0.3636364    0.770642202
45       0.5714286    0.33333333     0.226063830      0.4545455    0.752293578
46       0.5000000    0.33333333     0.207446809      0.5454545    0.770642202
47       0.4285714    0.33333333     0.204787234      0.4545455    0.770642202
48       0.4285714    0.40000000     0.156914894      0.5454545    0.761467890
49       0.4285714    0.40000000     0.167553191      0.5454545    0.779816514
50       0.4285714    0.40000000     0.223404255      0.5454545    0.807339450
51       0.4285714    0.40000000     0.228723404      0.5454545    0.798165138
52       0.4285714    0.40000000     0.215425532      0.5454545    0.798165138
53       0.4285714    0.46666667     0.114361702      0.5454545    0.779816514
54       0.4285714    0.46666667     0.186170213      0.5454545    0.798165138
55       0.5000000    0.40000000     0.202127660      0.5454545    0.816513761
56       0.4285714    0.33333333     0.172872340      0.5454545    0.798165138
57       0.5000000    0.26666667     0.164893617      0.5454545    0.779816514
58       0.5714286    0.26666667     0.170212766      0.4545455    0.779816514
59       0.6428571    0.26666667     0.207446809      0.3636364    0.816513761
60       0.7142857    0.26666667     0.202127660      0.2727273    0.816513761
61       0.6428571    0.26666667     0.196808511      0.3636364    0.844036697
62       0.6428571    0.26666667     0.191489362      0.3636364    0.853211009
63       0.6428571    0.26666667     0.148936170      0.3636364    0.844036697
64       0.5714286    0.26666667     0.204787234      0.3636364    0.862385321
65       0.5000000    0.26666667     0.220744681      0.4545455    0.853211009
66       0.4285714    0.20000000     0.226063830      0.5454545    0.871559633
67       0.4285714    0.13333333     0.130319149      0.4545455    0.871559633
68       0.5000000    0.13333333     0.090425532      0.4545455    0.889908257
69       0.5000000    0.06666667     0.061170213      0.4545455    0.899082569
70       0.5000000    0.06666667     0.050531915      0.4545455    0.899082569
71       0.5714286    0.06666667     0.029255319      0.4545455    0.908256881
72       0.3571429    0.00000000     0.023936170      0.6363636    0.917431193
73       0.5714286    0.00000000     0.042553191      0.4545455    0.944954128
74       1.0000000    0.00000000     0.039893617      0.0000000    0.954128440
75       0.7857143    0.00000000     0.026595745      0.1818182    0.963302752
76       0.7142857    0.00000000     0.007978723      0.2727273    0.963302752
77       0.6428571    0.00000000     0.010638298      0.3636364    0.981651376
78       0.4285714    0.00000000     0.021276596      0.5454545    1.000000000
79       0.0000000    0.00000000     0.082446809      1.0000000    0.972477064
80       0.5000000    0.00000000     0.023936170      0.5454545    0.972477064
81       0.5000000    0.00000000     0.000000000      0.4545455    0.972477064
82       0.5000000    0.06666667     0.029255319      0.4545455    0.972477064
83       0.5000000    0.06666667     0.042553191      0.4545455    0.944954128
84       0.5000000    0.06666667     0.055851064      0.5454545    0.935779817
85       0.5000000    0.06666667     0.045212766      0.4545455    0.926605505
86       0.5000000    0.06666667     0.058510638      0.4545455    0.935779817
87       0.5000000    0.06666667     0.087765957      0.4545455    0.926605505
88       0.4285714    0.06666667     0.069148936      0.5454545    0.926605505
89       0.4285714    0.06666667     0.085106383      0.5454545    0.917431193
90       0.5000000    0.06666667     0.119680851      0.5454545    0.889908257
91       0.5714286    0.06666667     0.162234043      0.4545455    0.889908257
92       0.5000000    0.06666667     0.156914894      0.4545455    0.889908257
93       0.5714286    0.06666667     0.159574468      0.4545455    0.880733945
94       0.5714286    0.13333333     0.135638298      0.4545455    0.871559633
95       0.5714286    0.13333333     0.180851064      0.4545455    0.889908257
96       0.5714286    0.13333333     0.188829787      0.4545455    0.880733945
97       0.5714286    0.20000000     0.098404255      0.4545455    0.871559633
98       0.5714286    0.13333333     0.159574468      0.5454545    0.862385321
99       0.5714286    0.13333333     0.154255319      0.4545455    0.862385321
100      0.5000000    0.13333333     0.188829787      0.4545455    0.853211009
101      0.5000000    0.13333333     0.223404255      0.4545455    0.844036697
     past_data
2   1.00000000
3   0.93333333
4   0.93333333
5   0.93333333
6   0.86666667
7   0.86666667
8   0.86666667
9   0.86666667
10  0.80000000
11  0.80000000
12  0.80000000
13  0.80000000
14  0.80000000
15  0.80000000
16  0.73333333
17  0.73333333
18  0.73333333
19  0.73333333
20  0.73333333
21  0.66666667
22  0.66666667
23  0.60000000
24  0.60000000
25  0.53333333
26  0.53333333
27  0.53333333
28  0.46666667
29  0.46666667
30  0.46666667
31  0.40000000
32  0.40000000
33  0.40000000
34  0.33333333
35  0.33333333
36  0.33333333
37  0.33333333
38  0.33333333
39  0.33333333
40  0.33333333
41  0.33333333
42  0.33333333
43  0.33333333
44  0.33333333
45  0.33333333
46  0.33333333
47  0.33333333
48  0.33333333
49  0.40000000
50  0.40000000
51  0.40000000
52  0.40000000
53  0.40000000
54  0.46666667
55  0.46666667
56  0.40000000
57  0.33333333
58  0.26666667
59  0.26666667
60  0.26666667
61  0.26666667
62  0.26666667
63  0.26666667
64  0.26666667
65  0.26666667
66  0.26666667
67  0.20000000
68  0.13333333
69  0.13333333
70  0.06666667
71  0.06666667
72  0.06666667
73  0.00000000
74  0.00000000
75  0.00000000
76  0.00000000
77  0.00000000
78  0.00000000
79  0.00000000
80  0.00000000
81  0.00000000
82  0.00000000
83  0.06666667
84  0.06666667
85  0.06666667
86  0.06666667
87  0.06666667
88  0.06666667
89  0.06666667
90  0.06666667
91  0.06666667
92  0.06666667
93  0.06666667
94  0.06666667
95  0.13333333
96  0.13333333
97  0.13333333
98  0.20000000
99  0.13333333
100 0.13333333
101 0.13333333

$exclude
NULL

$net.result
$net.result[[1]]
          [,1]
2   0.91299178
3   0.88604936
4   0.88368661
5   0.88568698
6   0.84203625
7   0.85358170
8   0.84956795
9   0.86073646
10  0.80072404
11  0.80782953
12  0.79247619
13  0.79826395
14  0.78730604
15  0.79481452
16  0.73145200
17  0.72031845
18  0.71317319
19  0.72448529
20  0.71412511
21  0.65520765
22  0.65387312
23  0.58849419
24  0.59177175
25  0.50879702
26  0.50748228
27  0.51476994
28  0.44585636
29  0.43880032
30  0.43501673
31  0.36253271
32  0.38560231
33  0.35412122
34  0.27851003
35  0.32879078
36  0.34573112
37  0.34805336
38  0.34663665
39  0.33258214
40  0.34783749
41  0.34189902
42  0.34281422
43  0.34242791
44  0.34433600
45  0.32933714
46  0.31676602
47  0.34672177
48  0.32428119
49  0.40680790
50  0.41459917
51  0.40439045
52  0.40481506
53  0.38441762
54  0.47456734
55  0.44774131
56  0.38530063
57  0.29428007
58  0.23155053
59  0.23707301
60  0.25479356
61  0.24825186
62  0.24885633
63  0.24738306
64  0.23950975
65  0.24286666
66  0.23063318
67  0.16920776
68  0.10645476
69  0.11246891
70  0.05779070
71  0.05881988
72  0.04346874
73  0.01887474
74  0.03160529
75  0.03413866
76  0.02563899
77  0.02187767
78  0.01454472
79  0.00125319
80  0.01218220
81  0.01777434
82  0.01650239
83  0.06251198
84  0.05589513
85  0.06937426
86  0.07214038
87  0.05728719
88  0.06465828
89  0.05851012
90  0.05972764
91  0.06869595
92  0.07072175
93  0.07696845
94  0.07969990
95  0.12720716
96  0.12669253
97  0.12649361
98  0.17967111
99  0.14228768
100 0.14474151
101 0.13715684


$weights
$weights[[1]]
$weights[[1]][[1]]
             [,1]
 [1,] -1.33987768
 [2,] -0.29934303
 [3,] -0.11275812
 [4,]  0.06052808
 [5,] -0.20102915
 [6,] -0.05932276
 [7,]  0.05207596
 [8,] -0.14620097
 [9,]  0.13882820
[10,] -0.41064395
[11,] -0.05463831
[12,]  3.96529786

$weights[[1]][[2]]
           [,1]
[1,] -0.1470382
[2,]  1.2064536



$generalized.weights
$generalized.weights[[1]]
           [,1]        [,2]       [,3]        [,4]        [,5]       [,6]
2    -0.4847978  -0.1826162 0.09802760  -0.3255746 -0.09607554 0.08433906
3    -0.4401341  -0.1657920 0.08899645  -0.2955799 -0.08722423 0.07656902
4    -0.4372362  -0.1647005 0.08841051  -0.2936338 -0.08664996 0.07606490
5    -0.4396815  -0.1656216 0.08890494  -0.2952759 -0.08713455 0.07649029
6    -0.4010672  -0.1510761 0.08109702  -0.2693438 -0.07948210 0.06977266
7    -0.4088873  -0.1540219 0.08267827  -0.2745956 -0.08103187 0.07113311
8    -0.4060198  -0.1529417 0.08209846  -0.2726699 -0.08046360 0.07063426
9    -0.4144443  -0.1561151 0.08380190  -0.2783274 -0.08213312 0.07209984
10   -0.3812432  -0.1436087 0.07708853  -0.2560306 -0.07555344 0.06632392
11   -0.3839561  -0.1446306 0.07763710  -0.2578526 -0.07609109 0.06679589
12   -0.3783730  -0.1425276 0.07650818  -0.2541031 -0.07498465 0.06582461
13   -0.3803571  -0.1432749 0.07690938  -0.2554356 -0.07537785 0.06616978
14   -0.3767126  -0.1419021 0.07617244  -0.2529881 -0.07465559 0.06553575
15   -0.3791581  -0.1428233 0.07666693  -0.2546304 -0.07514024 0.06596119
16   -0.3639260  -0.1370856 0.07358695  -0.2444010 -0.07212158 0.06331129
17   -0.3622361  -0.1364490 0.07324525  -0.2432661 -0.07178669 0.06301731
18   -0.3612676  -0.1360842 0.07304940  -0.2426157 -0.07159475 0.06284882
19   -0.3628419  -0.1366772 0.07336774  -0.2436729 -0.07190674 0.06312270
20   -0.3613916  -0.1361309 0.07307449  -0.2426990 -0.07161933 0.06287040
21   -0.3561509  -0.1341568 0.07201480  -0.2391795 -0.07058074 0.06195868
22   -0.3560822  -0.1341309 0.07200091  -0.2391333 -0.07056713 0.06194673
23   -0.3548873  -0.1336808 0.07175929  -0.2383309 -0.07033032 0.06173885
24   -0.3548534  -0.1336681 0.07175245  -0.2383081 -0.07032362 0.06173297
25   -0.3585076  -0.1350446 0.07249134  -0.2407622 -0.07104779 0.06236868
26   -0.3586125  -0.1350841 0.07251255  -0.2408326 -0.07106858 0.06238693
27   -0.3580500  -0.1348722 0.07239880  -0.2404548 -0.07095709 0.06228906
28   -0.3653213  -0.1376112 0.07386909  -0.2453380 -0.07239811 0.06355404
29   -0.3663316  -0.1379917 0.07407337  -0.2460165 -0.07259832 0.06372980
30   -0.3668959  -0.1382043 0.07418748  -0.2463955 -0.07271016 0.06382797
31   -0.3812569  -0.1436139 0.07709131  -0.2560399 -0.07555616 0.06632631
32   -0.3758746  -0.1415864 0.07600299  -0.2524253 -0.07448951 0.06538996
33   -0.3834438  -0.1444376 0.07753351  -0.2575085 -0.07598956 0.06670676
34   -0.4103312  -0.1545657 0.08297023  -0.2755652 -0.08131801 0.07138430
35   -0.3908644  -0.1472329 0.07903398  -0.2624920 -0.07746015 0.06799771
36   -0.3857568  -0.1453089 0.07800120  -0.2590618 -0.07644793 0.06710914
37   -0.3851029  -0.1450626 0.07786899  -0.2586227 -0.07631836 0.06699540
38   -0.3855005  -0.1452124 0.07794939  -0.2588898 -0.07639716 0.06706457
39   -0.3896675  -0.1467820 0.07879195  -0.2616881 -0.07722294 0.06778948
40   -0.3851633  -0.1450853 0.07788119  -0.2586633 -0.07633032 0.06700589
41   -0.3868593  -0.1457242 0.07822413  -0.2598022 -0.07666643 0.06730095
42   -0.3865933  -0.1456240 0.07817034  -0.2596236 -0.07661371 0.06725467
43   -0.3867053  -0.1456662 0.07819300  -0.2596989 -0.07663592 0.06727417
44   -0.3861547  -0.1454588 0.07808167  -0.2593291 -0.07652680 0.06717837
45   -0.3906899  -0.1471672 0.07899870  -0.2623748 -0.07742557 0.06796735
46   -0.3948835  -0.1487468 0.07984665  -0.2651910 -0.07825663 0.06869690
47   -0.3854765  -0.1452034 0.07794454  -0.2588736 -0.07639240 0.06706039
48   -0.3923310  -0.1477853 0.07933054  -0.2634769 -0.07775080 0.06825285
49   -0.3716336  -0.1399889 0.07514544  -0.2495771 -0.07364905 0.06465216
50   -0.3702275  -0.1394593 0.07486114  -0.2486329 -0.07337040 0.06440756
51   -0.3720858  -0.1401593 0.07523689  -0.2498809 -0.07373867 0.06473084
52   -0.3720058  -0.1401291 0.07522072  -0.2498271 -0.07372282 0.06471693
53   -0.3761305  -0.1416828 0.07605474  -0.2525971 -0.07454023 0.06543449
54   -0.3617442  -0.1362637 0.07314578  -0.2429357 -0.07168920 0.06293173
55   -0.3650605  -0.1375129 0.07381635  -0.2451629 -0.07234642 0.06350867
56   -0.3759395  -0.1416109 0.07601613  -0.2524689 -0.07450239 0.06540126
57   -0.4034181  -0.1519617 0.08157238  -0.2709226 -0.07994800 0.07018165
58   -0.4370434  -0.1646278 0.08837151  -0.2935043 -0.08661173 0.07603134
59   -0.4333143  -0.1632231 0.08761749  -0.2910000 -0.08587273 0.07538262
60   -0.4225027  -0.1591506 0.08543135  -0.2837392 -0.08373012 0.07350175
61   -0.4263026  -0.1605819 0.08619968  -0.2862911 -0.08448316 0.07416279
62   -0.4259425  -0.1604463 0.08612687  -0.2860493 -0.08441180 0.07410015
63   -0.4268234  -0.1607781 0.08630499  -0.2866408 -0.08458637 0.07425340
64   -0.4317267  -0.1626251 0.08729646  -0.2899338 -0.08555809 0.07510642
65   -0.4295948  -0.1618220 0.08686538  -0.2885020 -0.08513560 0.07473553
66   -0.4376811  -0.1648680 0.08850045  -0.2939325 -0.08673811 0.07614228
67   -0.4968921  -0.1871719 0.10047310  -0.3336967 -0.09847234 0.08644308
68   -0.6301119  -0.2373539 0.12741056  -0.4231629 -0.12487339 0.10961900
69   -0.6108254  -0.2300890 0.12351078  -0.4102107 -0.12105126 0.10626378
70   -0.9348660  -0.3521503 0.18903277  -0.6278259 -0.18526849 0.16263631
71   -0.9231836  -0.3477497 0.18667054  -0.6199804 -0.18295330 0.16060394
72   -1.1549520  -0.4350534 0.23353482  -0.7756286 -0.22888436 0.20092411
73   -2.3130893  -0.8713067 0.46771374  -1.5533964 -0.45839999 0.40240238
74   -1.4884914  -0.5606928 0.30097752  -0.9996229 -0.29498404 0.25894914
75   -1.3977872  -0.5265259 0.28263686  -0.9387089 -0.27700861 0.24316956
76   -1.7729615  -0.6678485 0.35849823  -1.1906639 -0.35135933 0.30843769
77   -2.0320694  -0.7654507 0.41089066  -1.3646724 -0.40270844 0.35351405
78   -2.9226314  -1.1009123 0.59096501  -1.9627452 -0.57919691 0.50844289
79  -31.1067233 -11.7174455 6.28987467 -20.8902746 -6.16462213 5.41155911
80   -3.4379370  -1.2950204 0.69516139  -2.3088079 -0.68131839 0.59808933
81   -2.4398433  -0.9190531 0.49334378  -1.6385203 -0.48351965 0.42445345
82   -2.6074262  -0.9821791 0.52722957  -1.7510636 -0.51673065 0.45360744
83   -0.8844446  -0.3331573 0.17883740  -0.5939645 -0.17527615 0.15386462
84   -0.9575110  -0.3606803 0.19361165  -0.6430336 -0.18975619 0.16657580
85   -0.8234184  -0.3101696 0.16649771  -0.5529813 -0.16318218 0.14324804
86   -0.8021102  -0.3021431 0.16218913  -0.5386714 -0.15895940 0.13954111
87   -0.9407346  -0.3543609 0.19021942  -0.6317671 -0.18643151 0.16365726
88   -0.8639622  -0.3254418 0.17469579  -0.5802092 -0.17121701 0.15030134
89   -0.9266564  -0.3490578 0.18737276  -0.6223126 -0.18364154 0.16120810
90   -0.9132141  -0.3439943 0.18465468  -0.6132852 -0.18097759 0.15886958
91   -0.8289063  -0.3122368 0.16760739  -0.5566668 -0.16426976 0.14420276
92   -0.8128295  -0.3061809 0.16435661  -0.5458701 -0.16108372 0.14140592
93   -0.7685979  -0.2895195 0.15541285  -0.5161656 -0.15231806 0.13371107
94   -0.7514424  -0.2830573 0.15194396  -0.5046446 -0.14891825 0.13072657
95   -0.5713312  -0.2152121 0.11552493  -0.3836877 -0.11322444 0.09939307
96   -0.5725540  -0.2156727 0.11577218  -0.3845089 -0.11346676 0.09960580
97   -0.5730294  -0.2158517 0.11586829  -0.3848281 -0.11356097 0.09968849
98   -0.4838494  -0.1822590 0.09783583  -0.3249377 -0.09588759 0.08417407
99   -0.5394692  -0.2032101 0.10908232  -0.3622901 -0.10691012 0.09385011
100  -0.5349206  -0.2014967 0.10816259  -0.3592355 -0.10600871 0.09305881
101  -0.5495135  -0.2069936 0.11111330  -0.3690356 -0.10890066 0.09559749
           [,7]       [,8]        [,9]       [,10]      [,11]
2    -0.2367782  0.2248377  -0.6650540 -0.08848888   6.421956
3    -0.2149642  0.2041237  -0.6037835 -0.08033653   5.830310
4    -0.2135489  0.2027798  -0.5998083 -0.07980760   5.791924
5    -0.2147431  0.2039139  -0.6031627 -0.08025392   5.824315
6    -0.1958837  0.1860055  -0.5501909 -0.07320576   5.312804
7    -0.1997031  0.1896323  -0.5609187 -0.07463315   5.416395
8    -0.1983026  0.1883024  -0.5569851 -0.07410975   5.378410
9    -0.2024171  0.1922094  -0.5685418 -0.07564744   5.490006
10   -0.1862015  0.1768115  -0.5229960 -0.06958732   5.050202
11   -0.1875265  0.1780697  -0.5267176 -0.07008251   5.086139
12   -0.1847997  0.1754804  -0.5190587 -0.06906345   5.012182
13   -0.1857688  0.1764006  -0.5217805 -0.06942560   5.038465
14   -0.1839888  0.1747104  -0.5167809 -0.06876038   4.990187
15   -0.1851832  0.1758446  -0.5201357 -0.06920675   5.022582
16   -0.1777437  0.1687802  -0.4992400 -0.06642646   4.820807
17   -0.1769183  0.1679965  -0.4969218 -0.06611802   4.798422
18   -0.1764453  0.1675473  -0.4955931 -0.06594123   4.785592
19   -0.1772142  0.1682775  -0.4977528 -0.06622859   4.806446
20   -0.1765059  0.1676049  -0.4957633 -0.06596388   4.787235
21   -0.1739463  0.1651743  -0.4885740 -0.06500730   4.717813
22   -0.1739127  0.1651425  -0.4884797 -0.06499476   4.716903
23   -0.1733291  0.1645883  -0.4868405 -0.06477665   4.701074
24   -0.1733126  0.1645726  -0.4867941 -0.06477048   4.700626
25   -0.1750973  0.1662673  -0.4918070 -0.06543747   4.749032
26   -0.1751486  0.1663160  -0.4919509 -0.06545662   4.750421
27   -0.1748738  0.1660551  -0.4911791 -0.06535393   4.742969
28   -0.1784252  0.1694274  -0.5011541 -0.06668115   4.839290
29   -0.1789186  0.1698959  -0.5025401 -0.06686556   4.852674
30   -0.1791942  0.1701576  -0.5033142 -0.06696856   4.860149
31   -0.1862082  0.1768179  -0.5230148 -0.06958983   5.050384
32   -0.1835794  0.1743217  -0.5156312 -0.06860741   4.979086
33   -0.1872763  0.1778321  -0.5260149 -0.06998900   5.079353
34   -0.2004083  0.1903019  -0.5628995 -0.07489669   5.435522
35   -0.1909006  0.1812737  -0.5361946 -0.07134347   5.177652
36   -0.1884060  0.1789048  -0.5291878 -0.07041118   5.109992
37   -0.1880866  0.1786016  -0.5282909 -0.07029184   5.101331
38   -0.1882808  0.1787860  -0.5288363 -0.07036442   5.106598
39   -0.1903160  0.1807185  -0.5345526 -0.07112499   5.161796
40   -0.1881161  0.1786296  -0.5283736 -0.07030285   5.102130
41   -0.1889445  0.1794162  -0.5307003 -0.07061242   5.124597
42   -0.1888145  0.1792928  -0.5303353 -0.07056387   5.121073
43   -0.1888693  0.1793448  -0.5304891 -0.07058432   5.122558
44   -0.1886003  0.1790894  -0.5297337 -0.07048382   5.115264
45   -0.1908154  0.1811927  -0.5359552 -0.07131162   5.175340
46   -0.1928635  0.1831376  -0.5417080 -0.07207706   5.230891
47   -0.1882691  0.1787749  -0.5288034 -0.07036003   5.106280
48   -0.1916169  0.1819538  -0.5382065 -0.07161117   5.197079
49   -0.1815081  0.1723548  -0.5098134 -0.06783331   4.922907
50   -0.1808214  0.1717027  -0.5078845 -0.06757667   4.904281
51   -0.1817290  0.1725646  -0.5104338 -0.06791586   4.928898
52   -0.1816899  0.1725275  -0.5103240 -0.06790126   4.927838
53   -0.1837044  0.1744404  -0.5159823 -0.06865412   4.982476
54   -0.1766781  0.1677684  -0.4962469 -0.06602822   4.791905
55   -0.1782978  0.1693064  -0.5007963 -0.06663355   4.835836
56   -0.1836112  0.1743518  -0.5157204 -0.06861927   4.979946
57   -0.1970319  0.1870958  -0.5534160 -0.07363487   5.343946
58   -0.2134547  0.2026904  -0.5995437 -0.07977239   5.789369
59   -0.2116334  0.2009609  -0.5944281 -0.07909174   5.739971
60   -0.2063529  0.1959468  -0.5795966 -0.07711833   5.596754
61   -0.2082088  0.1977090  -0.5848092 -0.07781190   5.647089
62   -0.2080329  0.1975420  -0.5843153 -0.07774618   5.642319
63   -0.2084632  0.1979506  -0.5855237 -0.07790696   5.653988
64   -0.2108580  0.2002246  -0.5922501 -0.07880195   5.718940
65   -0.2098167  0.1992359  -0.5893255 -0.07841282   5.690700
66   -0.2137661  0.2029861  -0.6004185 -0.07988879   5.797816
67   -0.2426852  0.2304468  -0.6816452 -0.09069642   6.582165
68   -0.3077505  0.2922310  -0.8643985 -0.11501270   8.346884
69   -0.2983309  0.2832864  -0.8379409 -0.11149239   8.091402
70   -0.4565943  0.4335687  -1.2824654 -0.17063867  12.383860
71   -0.4508885  0.4281507  -1.2664392 -0.16850630  12.229107
72   -0.5640856  0.5356393  -1.5843831 -0.21081039  15.299266
73   -1.1297270  1.0727560  -3.1731360 -0.42220219  30.640727
74   -0.7269883  0.6903270  -2.0419383 -0.27169047  19.717552
75   -0.6826879  0.6482606  -1.9175087 -0.25513448  18.516024
76   -0.8659253  0.8222575  -2.4321792 -0.32361406  23.485833
77   -0.9924752  0.9424256  -2.7876280 -0.37090836  26.918150
78   -1.4274311  1.3554471  -4.0093163 -0.53346033  38.715129
79  -15.1927149 14.4265609 -42.6727418 -5.67782956 412.060454
80   -1.6791096  1.5944337  -4.7162216 -0.62751773  45.541212
81   -1.1916345  1.1315415  -3.3470193 -0.44533827  32.319795
82   -1.2734830  1.2092625  -3.5769125 -0.47592675  34.539711
83   -0.4319682  0.4101844  -1.2132964 -0.16143538  11.715944
84   -0.4676542  0.4440709  -1.3135301 -0.17477200  12.683831
85   -0.4021626  0.3818819  -1.1295796 -0.15029642  10.907550
86   -0.3917555  0.3719997  -1.1003486 -0.14640709  10.625288
87   -0.4594606  0.4362904  -1.2905161 -0.17170985  12.461600
88   -0.4219644  0.4006852  -1.1851982 -0.15769677  11.444620
89   -0.4525847  0.4297613  -1.2712033 -0.16914019  12.275110
90   -0.4460194  0.4235270  -1.2527629 -0.16668660  12.097044
91   -0.4048429  0.3844271  -1.1371080 -0.15129811  10.980247
92   -0.3969909  0.3769710  -1.1150536 -0.14836366  10.767283
93   -0.3753880  0.3564575  -1.0543759 -0.14029019  10.181362
94   -0.3670091  0.3485012  -1.0308418 -0.13715884   9.954109
95   -0.2790417  0.2649699  -0.7837621 -0.10428361   7.568236
96   -0.2796389  0.2655370  -0.7854395 -0.10450680   7.584433
97   -0.2798711  0.2657574  -0.7860916 -0.10459357   7.590730
98   -0.2363150  0.2243979  -0.6637530 -0.08831577   6.409393
99   -0.2634801  0.2501930  -0.7400532 -0.09846791   7.146169
100  -0.2612585  0.2480835  -0.7338134 -0.09763768   7.085916
101  -0.2683858  0.2548513  -0.7538321 -0.10030127   7.279223


$startweights
$startweights[[1]]
$startweights[[1]][[1]]
             [,1]
 [1,] -1.22461261
 [2,] -0.47340064
 [3,] -0.62036668
 [4,]  0.04211587
 [5,] -0.91092165
 [6,]  0.15802877
 [7,] -0.65458464
 [8,]  1.76728727
 [9,]  0.71670748
[10,]  0.91017423
[11,]  0.38418536
[12,]  1.68217608

$startweights[[1]][[2]]
           [,1]
[1,] -0.6357365
[2,] -0.4616447



$result.matrix
                                     [,1]
error                        4.241187e-02
reached.threshold            7.392663e-03
steps                        1.200000e+03
Intercept.to.1layhid1       -1.339878e+00
B_CL2_VAL.to.1layhid1       -2.993430e-01
B_TURB_VAL.to.1layhid1      -1.127581e-01
B_PH_VAL.to.1layhid1         6.052808e-02
B_COND_VAL.to.1layhid1      -2.010291e-01
B_TEMP_VAL.to.1layhid1      -5.932276e-02
B_PRES_OP.to.1layhid1        5.207596e-02
B_PLNT_PRES_OP.to.1layhid1  -1.462010e-01
B_PLNT_TURB_VAL.to.1layhid1  1.388282e-01
B_PLNT_FLOW_OP.to.1layhid1  -4.106439e-01
B_PLNT_CL2_VAL.to.1layhid1  -5.463831e-02
past_data.to.1layhid1        3.965298e+00
Intercept.to.B_PLNT_PH_VAL  -1.470382e-01
1layhid1.to.B_PLNT_PH_VAL    1.206454e+00

attr(,"class")
[1] "nn"

$modelList$model9
$call
neuralnet(formula = nn_input, data = model_input, hidden = hidden, 
    threshold = threshold, stepmax = stepmax, rep = rep, startweights = unlist(control))

$response
    B_PLNT_TURB_VAL
2       0.194148936
3       0.199468085
4       0.242021277
5       0.260638298
6       0.289893617
7       0.276595745
8       0.303191489
9       0.348404255
10      0.345744681
11      0.377659574
12      0.375000000
13      0.396276596
14      0.375000000
15      0.375000000
16      0.359042553
17      0.351063830
18      0.327127660
19      0.324468085
20      0.321808511
21      0.297872340
22      0.279255319
23      0.265957447
24      0.247340426
25      0.234042553
26      0.228723404
27      0.228723404
28      0.228723404
29      0.223404255
30      0.226063830
31      0.204787234
32      1.000000000
33      0.319148936
34      0.194148936
35      0.175531915
36      0.172872340
37      0.170212766
38      0.170212766
39      0.164893617
40      0.175531915
41      0.180851064
42      0.196808511
43      0.215425532
44      0.231382979
45      0.226063830
46      0.207446809
47      0.204787234
48      0.156914894
49      0.167553191
50      0.223404255
51      0.228723404
52      0.215425532
53      0.114361702
54      0.186170213
55      0.202127660
56      0.172872340
57      0.164893617
58      0.170212766
59      0.207446809
60      0.202127660
61      0.196808511
62      0.191489362
63      0.148936170
64      0.204787234
65      0.220744681
66      0.226063830
67      0.130319149
68      0.090425532
69      0.061170213
70      0.050531915
71      0.029255319
72      0.023936170
73      0.042553191
74      0.039893617
75      0.026595745
76      0.007978723
77      0.010638298
78      0.021276596
79      0.082446809
80      0.023936170
81      0.000000000
82      0.029255319
83      0.042553191
84      0.055851064
85      0.045212766
86      0.058510638
87      0.087765957
88      0.069148936
89      0.085106383
90      0.119680851
91      0.162234043
92      0.156914894
93      0.159574468
94      0.135638298
95      0.180851064
96      0.188829787
97      0.098404255
98      0.159574468
99      0.154255319
100     0.188829787
101     0.223404255

$covariate
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.00000000 0.61538462
3   0.996138996 0.34415584 0.27272727 0.33333333 0.00000000 0.61538462
4   0.988416988 0.24675325 0.31818182 0.52777778 0.04545455 0.69230769
5   0.984555985 0.29220779 0.36363636 0.50000000 0.04545455 0.61538462
6   0.984555985 0.22077922 0.36363636 0.55555556 0.04545455 0.69230769
7   0.949806950 0.22077922 0.40909091 0.22222222 0.09090909 0.69230769
8   0.972972973 0.12987013 0.40909091 0.41666667 0.13636364 0.69230769
9   0.969111969 0.12987013 0.45454545 0.22222222 0.22727273 0.76923077
10  0.961389961 0.16883117 0.45454545 0.41666667 0.22727273 0.69230769
11  0.965250965 0.18831169 0.45454545 0.25000000 0.27272727 0.53846154
12  0.949806950 0.29870130 0.45454545 0.38888889 0.27272727 0.46153846
13  0.961389961 0.52597403 0.50000000 0.11111111 0.36363636 0.46153846
14  0.961389961 0.50649351 0.45454545 0.36111111 0.36363636 0.46153846
15  0.961389961 0.51948052 0.50000000 0.16666667 0.45454545 0.46153846
16  0.961389961 0.31818182 0.45454545 0.36111111 0.36363636 0.38461538
17  0.976833977 0.43506494 0.45454545 0.47222222 0.45454545 0.38461538
18  0.980694981 0.51298701 0.36363636 0.55555556 0.36363636 0.38461538
19  0.980694981 0.50000000 0.36363636 0.47222222 0.45454545 0.30769231
20  0.980694981 0.44805195 0.40909091 0.50000000 0.40909091 0.30769231
21  0.972972973 0.43506494 0.40909091 0.52777778 0.45454545 0.23076923
22  0.976833977 0.33116883 0.45454545 0.44444444 0.36363636 0.23076923
23  0.980694981 0.19480519 0.50000000 0.58333333 0.45454545 0.61538462
24  0.976833977 0.25324675 0.50000000 0.50000000 0.40909091 0.61538462
25  0.969111969 0.06493506 0.54545455 0.55555556 0.40909091 0.53846154
26  0.969111969 0.22077922 0.59090909 0.50000000 0.40909091 0.53846154
27  0.965250965 0.10389610 0.63636364 0.47222222 0.36363636 0.53846154
28  0.961389961 0.05194805 0.63636364 0.47222222 0.50000000 0.53846154
29  0.961389961 0.30519481 0.72727273 0.47222222 0.40909091 0.46153846
30  0.961389961 0.00000000 0.72727273 0.55555556 0.45454545 0.46153846
31  0.961389961 0.16233766 0.72727273 0.36111111 0.40909091 0.46153846
32  0.953667954 0.18181818 0.68181818 0.58333333 0.40909091 0.53846154
33  0.957528958 0.14285714 0.72727273 0.41666667 0.45454545 0.53846154
34  0.667953668 0.46753247 0.68181818 0.61111111 0.31818182 0.53846154
35  0.019305019 0.47402597 0.72727273 0.66666667 0.36363636 0.53846154
36  0.015444015 0.61038961 0.72727273 0.50000000 0.31818182 0.53846154
37  0.030888031 0.42207792 0.72727273 0.52777778 0.36363636 0.53846154
38  0.023166023 0.53896104 0.77272727 0.33333333 0.36363636 0.53846154
39  0.003861004 0.48051948 0.77272727 0.63888889 0.27272727 0.46153846
40  0.023166023 0.57792208 0.81818182 0.50000000 0.31818182 0.53846154
41  0.000000000 0.74025974 0.81818182 0.50000000 0.27272727 0.53846154
42  0.019305019 0.60389610 0.81818182 0.55555556 0.27272727 0.61538462
43  0.023166023 0.56493506 0.86363636 0.58333333 0.22727273 0.53846154
44  0.023166023 0.37012987 0.90909091 0.63888889 0.27272727 0.46153846
45  0.023166023 0.62337662 0.90909091 0.58333333 0.22727273 0.46153846
46  0.023166023 0.53246753 0.95454545 0.69444444 0.22727273 0.38461538
47  0.019305019 0.34415584 0.95454545 0.47222222 0.27272727 0.23076923
48  0.023166023 0.50000000 1.00000000 0.55555556 0.22727273 0.15384615
49  0.023166023 0.21428571 0.95454545 0.61111111 0.27272727 0.15384615
50  0.023166023 0.28571429 1.00000000 0.50000000 0.22727273 0.15384615
51  0.023166023 0.25324675 0.95454545 0.66666667 0.27272727 0.15384615
52  0.019305019 0.38311688 0.95454545 0.58333333 0.27272727 0.15384615
53  0.023166023 0.37012987 0.90909091 0.83333333 0.18181818 0.00000000
54  0.023166023 0.48051948 0.81818182 0.61111111 0.18181818 0.00000000
55  0.019305019 0.77272727 0.72727273 0.88888889 0.09090909 0.15384615
56  0.019305019 0.70129870 0.68181818 0.63888889 0.13636364 0.07692308
57  0.023166023 0.79870130 0.63636364 0.83333333 0.09090909 0.30769231
58  0.023166023 0.91558442 0.63636364 0.77777778 0.18181818 0.53846154
59  0.019305019 1.00000000 0.59090909 0.83333333 0.09090909 0.69230769
60  0.023166023 0.82467532 0.63636364 0.75000000 0.18181818 0.84615385
61  0.023166023 0.85714286 0.63636364 0.72222222 0.13636364 0.84615385
62  0.019305019 0.72727273 0.63636364 0.75000000 0.18181818 0.76923077
63  0.023166023 0.80519481 0.59090909 0.69444444 0.09090909 0.69230769
64  0.023166023 0.87662338 0.54545455 0.86111111 0.13636364 0.69230769
65  0.023166023 0.79870130 0.50000000 0.69444444 0.04545455 0.53846154
66  0.019305019 0.70129870 0.50000000 0.80555556 0.13636364 0.46153846
67  0.023166023 0.77922078 0.45454545 0.80555556 0.13636364 0.53846154
68  0.023166023 0.70129870 0.45454545 0.88888889 0.13636364 0.53846154
69  0.023166023 0.62987013 0.40909091 0.77777778 0.09090909 0.61538462
70  0.023166023 0.57142857 0.40909091 0.94444444 0.09090909 0.61538462
71  0.023166023 0.72727273 0.40909091 0.77777778 0.09090909 0.69230769
72  0.027027027 0.61688312 0.36363636 1.00000000 0.09090909 0.46153846
73  0.027027027 0.80519481 0.36363636 0.66666667 0.09090909 0.69230769
74  0.027027027 0.77922078 0.36363636 0.94444444 0.09090909 1.00000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.18181818 0.76923077
76  0.027027027 0.38311688 0.40909091 0.94444444 0.09090909 0.76923077
77  0.027027027 0.62987013 0.40909091 0.75000000 0.18181818 0.69230769
78  0.027027027 0.55844156 0.45454545 0.83333333 0.09090909 0.53846154
79  0.027027027 0.45454545 0.45454545 0.69444444 0.22727273 0.23076923
80  0.027027027 0.61038961 0.40909091 0.80555556 0.18181818 0.53846154
81  0.030888031 0.64935065 0.45454545 0.72222222 0.31818182 0.53846154
82  0.027027027 0.82467532 0.45454545 0.69444444 0.31818182 0.53846154
83  0.027027027 0.57792208 0.45454545 0.66666667 0.45454545 0.53846154
84  0.023166023 0.85714286 0.45454545 0.52777778 0.40909091 0.46153846
85  0.011583012 0.33766234 0.45454545 0.58333333 0.50000000 0.38461538
86  0.023166023 0.33116883 0.40909091 0.47222222 0.54545455 0.38461538
87  0.030888031 0.55194805 0.31818182 0.72222222 0.59090909 0.30769231
88  0.030888031 0.44805195 0.22727273 0.33333333 0.72727273 0.23076923
89  0.034749035 0.64285714 0.18181818 0.38888889 0.68181818 0.15384615
90  0.034749035 0.39610390 0.18181818 0.44444444 0.77272727 0.15384615
91  0.034749035 0.42857143 0.18181818 0.33333333 0.77272727 0.15384615
92  0.034749035 0.26623377 0.13636364 0.38888889 0.81818182 0.15384615
93  0.034749035 0.32467532 0.09090909 0.22222222 0.81818182 0.53846154
94  0.034749035 0.25324675 0.00000000 0.16666667 0.81818182 0.61538462
95  0.034749035 0.24675325 0.00000000 0.27777778 0.95454545 0.61538462
96  0.034749035 0.39610390 0.04545455 0.19444444 1.00000000 0.53846154
97  0.034749035 0.12337662 0.04545455 0.30555556 0.95454545 0.53846154
98  0.030888031 0.15584416 0.00000000 0.27777778 0.95454545 0.53846154
99  0.030888031 0.07792208 0.00000000 0.00000000 0.95454545 0.53846154
100 0.027027027 0.07792208 0.00000000 0.05555556 0.86363636 0.53846154
101 0.023166023 0.07142857 0.00000000 0.25000000 0.90909091 0.53846154
    B_PLNT_PRES_OP B_PLNT_PH_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL   past_data
2        0.5000000    0.93333333      0.4545455    0.284403670 0.210106383
3        0.5714286    0.93333333      0.3636364    0.284403670 0.194148936
4        0.5714286    0.93333333      0.3636364    0.284403670 0.199468085
5        0.5000000    0.86666667      0.3636364    0.284403670 0.242021277
6        0.5714286    0.86666667      0.3636364    0.238532110 0.260638298
7        0.6428571    0.86666667      0.3636364    0.220183486 0.289893617
8        0.5714286    0.86666667      0.3636364    0.201834862 0.276595745
9        0.7142857    0.80000000      0.2727273    0.174311927 0.303191489
10       0.5714286    0.80000000      0.3636364    0.155963303 0.348404255
11       0.5000000    0.80000000      0.3636364    0.137614679 0.345744681
12       0.5000000    0.80000000      0.4545455    0.100917431 0.377659574
13       0.5000000    0.80000000      0.4545455    0.082568807 0.375000000
14       0.5000000    0.80000000      0.4545455    0.064220183 0.396276596
15       0.5000000    0.73333333      0.4545455    0.045871560 0.375000000
16       0.5000000    0.73333333      0.4545455    0.045871560 0.375000000
17       0.5000000    0.73333333      0.4545455    0.036697248 0.359042553
18       0.5000000    0.73333333      0.4545455    0.018348624 0.351063830
19       0.5000000    0.73333333      0.3636364    0.009174312 0.327127660
20       0.5714286    0.66666667      0.4545455    0.009174312 0.324468085
21       0.5000000    0.66666667      0.3636364    0.009174312 0.321808511
22       0.5000000    0.60000000      0.4545455    0.018348624 0.297872340
23       0.5714286    0.60000000      0.3636364    0.000000000 0.279255319
24       0.5714286    0.53333333      0.3636364    0.000000000 0.265957447
25       0.5000000    0.53333333      0.4545455    0.009174312 0.247340426
26       0.5000000    0.53333333      0.4545455    0.009174312 0.234042553
27       0.5000000    0.46666667      0.4545455    0.027522936 0.228723404
28       0.5000000    0.46666667      0.3636364    0.045871560 0.228723404
29       0.5000000    0.46666667      0.3636364    0.064220183 0.228723404
30       0.4285714    0.40000000      0.4545455    0.082568807 0.223404255
31       0.4285714    0.40000000      0.4545455    0.064220183 0.226063830
32       0.5000000    0.40000000      0.3636364    0.357798165 0.204787234
33       0.5000000    0.33333333      0.4545455    0.568807339 1.000000000
34       0.5000000    0.33333333      0.4545455    0.568807339 0.319148936
35       0.5000000    0.33333333      0.4545455    0.596330275 0.194148936
36       0.5000000    0.33333333      0.3636364    0.605504587 0.175531915
37       0.5000000    0.33333333      0.3636364    0.605504587 0.172872340
38       0.5000000    0.33333333      0.4545455    0.577981651 0.170212766
39       0.5000000    0.33333333      0.4545455    0.577981651 0.170212766
40       0.5000000    0.33333333      0.3636364    0.605504587 0.164893617
41       0.5714286    0.33333333      0.3636364    0.642201835 0.175531915
42       0.5714286    0.33333333      0.3636364    0.669724771 0.180851064
43       0.5714286    0.33333333      0.3636364    0.724770642 0.196808511
44       0.5714286    0.33333333      0.3636364    0.770642202 0.215425532
45       0.5714286    0.33333333      0.4545455    0.752293578 0.231382979
46       0.5000000    0.33333333      0.5454545    0.770642202 0.226063830
47       0.4285714    0.33333333      0.4545455    0.770642202 0.207446809
48       0.4285714    0.40000000      0.5454545    0.761467890 0.204787234
49       0.4285714    0.40000000      0.5454545    0.779816514 0.156914894
50       0.4285714    0.40000000      0.5454545    0.807339450 0.167553191
51       0.4285714    0.40000000      0.5454545    0.798165138 0.223404255
52       0.4285714    0.40000000      0.5454545    0.798165138 0.228723404
53       0.4285714    0.46666667      0.5454545    0.779816514 0.215425532
54       0.4285714    0.46666667      0.5454545    0.798165138 0.114361702
55       0.5000000    0.40000000      0.5454545    0.816513761 0.186170213
56       0.4285714    0.33333333      0.5454545    0.798165138 0.202127660
57       0.5000000    0.26666667      0.5454545    0.779816514 0.172872340
58       0.5714286    0.26666667      0.4545455    0.779816514 0.164893617
59       0.6428571    0.26666667      0.3636364    0.816513761 0.170212766
60       0.7142857    0.26666667      0.2727273    0.816513761 0.207446809
61       0.6428571    0.26666667      0.3636364    0.844036697 0.202127660
62       0.6428571    0.26666667      0.3636364    0.853211009 0.196808511
63       0.6428571    0.26666667      0.3636364    0.844036697 0.191489362
64       0.5714286    0.26666667      0.3636364    0.862385321 0.148936170
65       0.5000000    0.26666667      0.4545455    0.853211009 0.204787234
66       0.4285714    0.20000000      0.5454545    0.871559633 0.220744681
67       0.4285714    0.13333333      0.4545455    0.871559633 0.226063830
68       0.5000000    0.13333333      0.4545455    0.889908257 0.130319149
69       0.5000000    0.06666667      0.4545455    0.899082569 0.090425532
70       0.5000000    0.06666667      0.4545455    0.899082569 0.061170213
71       0.5714286    0.06666667      0.4545455    0.908256881 0.050531915
72       0.3571429    0.00000000      0.6363636    0.917431193 0.029255319
73       0.5714286    0.00000000      0.4545455    0.944954128 0.023936170
74       1.0000000    0.00000000      0.0000000    0.954128440 0.042553191
75       0.7857143    0.00000000      0.1818182    0.963302752 0.039893617
76       0.7142857    0.00000000      0.2727273    0.963302752 0.026595745
77       0.6428571    0.00000000      0.3636364    0.981651376 0.007978723
78       0.4285714    0.00000000      0.5454545    1.000000000 0.010638298
79       0.0000000    0.00000000      1.0000000    0.972477064 0.021276596
80       0.5000000    0.00000000      0.5454545    0.972477064 0.082446809
81       0.5000000    0.00000000      0.4545455    0.972477064 0.023936170
82       0.5000000    0.06666667      0.4545455    0.972477064 0.000000000
83       0.5000000    0.06666667      0.4545455    0.944954128 0.029255319
84       0.5000000    0.06666667      0.5454545    0.935779817 0.042553191
85       0.5000000    0.06666667      0.4545455    0.926605505 0.055851064
86       0.5000000    0.06666667      0.4545455    0.935779817 0.045212766
87       0.5000000    0.06666667      0.4545455    0.926605505 0.058510638
88       0.4285714    0.06666667      0.5454545    0.926605505 0.087765957
89       0.4285714    0.06666667      0.5454545    0.917431193 0.069148936
90       0.5000000    0.06666667      0.5454545    0.889908257 0.085106383
91       0.5714286    0.06666667      0.4545455    0.889908257 0.119680851
92       0.5000000    0.06666667      0.4545455    0.889908257 0.162234043
93       0.5714286    0.06666667      0.4545455    0.880733945 0.156914894
94       0.5714286    0.13333333      0.4545455    0.871559633 0.159574468
95       0.5714286    0.13333333      0.4545455    0.889908257 0.135638298
96       0.5714286    0.13333333      0.4545455    0.880733945 0.180851064
97       0.5714286    0.20000000      0.4545455    0.871559633 0.188829787
98       0.5714286    0.13333333      0.5454545    0.862385321 0.098404255
99       0.5714286    0.13333333      0.4545455    0.862385321 0.159574468
100      0.5000000    0.13333333      0.4545455    0.853211009 0.154255319
101      0.5000000    0.13333333      0.4545455    0.844036697 0.188829787

$model.list
$model.list$response
[1] "B_PLNT_TURB_VAL"

$model.list$variables
 [1] "B_CL2_VAL"      "B_TURB_VAL"     "B_PH_VAL"       "B_COND_VAL"    
 [5] "B_TEMP_VAL"     "B_PRES_OP"      "B_PLNT_PRES_OP" "B_PLNT_PH_VAL" 
 [9] "B_PLNT_FLOW_OP" "B_PLNT_CL2_VAL" "past_data"     


$err.fct
function (x, y) 
{
    1/2 * (y - x)^2
}
<bytecode: 0x7fd6aa25d4a8>
<environment: 0x7fd6afa562e0>
attr(,"type")
[1] "sse"

$act.fct
function (x) 
{
    1/(1 + exp(-x))
}
<bytecode: 0x7fd6aa25ca88>
<environment: 0x7fd6afa56778>
attr(,"type")
[1] "logistic"

$linear.output
[1] TRUE

$data
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.00000000 0.61538462
3   0.996138996 0.34415584 0.27272727 0.33333333 0.00000000 0.61538462
4   0.988416988 0.24675325 0.31818182 0.52777778 0.04545455 0.69230769
5   0.984555985 0.29220779 0.36363636 0.50000000 0.04545455 0.61538462
6   0.984555985 0.22077922 0.36363636 0.55555556 0.04545455 0.69230769
7   0.949806950 0.22077922 0.40909091 0.22222222 0.09090909 0.69230769
8   0.972972973 0.12987013 0.40909091 0.41666667 0.13636364 0.69230769
9   0.969111969 0.12987013 0.45454545 0.22222222 0.22727273 0.76923077
10  0.961389961 0.16883117 0.45454545 0.41666667 0.22727273 0.69230769
11  0.965250965 0.18831169 0.45454545 0.25000000 0.27272727 0.53846154
12  0.949806950 0.29870130 0.45454545 0.38888889 0.27272727 0.46153846
13  0.961389961 0.52597403 0.50000000 0.11111111 0.36363636 0.46153846
14  0.961389961 0.50649351 0.45454545 0.36111111 0.36363636 0.46153846
15  0.961389961 0.51948052 0.50000000 0.16666667 0.45454545 0.46153846
16  0.961389961 0.31818182 0.45454545 0.36111111 0.36363636 0.38461538
17  0.976833977 0.43506494 0.45454545 0.47222222 0.45454545 0.38461538
18  0.980694981 0.51298701 0.36363636 0.55555556 0.36363636 0.38461538
19  0.980694981 0.50000000 0.36363636 0.47222222 0.45454545 0.30769231
20  0.980694981 0.44805195 0.40909091 0.50000000 0.40909091 0.30769231
21  0.972972973 0.43506494 0.40909091 0.52777778 0.45454545 0.23076923
22  0.976833977 0.33116883 0.45454545 0.44444444 0.36363636 0.23076923
23  0.980694981 0.19480519 0.50000000 0.58333333 0.45454545 0.61538462
24  0.976833977 0.25324675 0.50000000 0.50000000 0.40909091 0.61538462
25  0.969111969 0.06493506 0.54545455 0.55555556 0.40909091 0.53846154
26  0.969111969 0.22077922 0.59090909 0.50000000 0.40909091 0.53846154
27  0.965250965 0.10389610 0.63636364 0.47222222 0.36363636 0.53846154
28  0.961389961 0.05194805 0.63636364 0.47222222 0.50000000 0.53846154
29  0.961389961 0.30519481 0.72727273 0.47222222 0.40909091 0.46153846
30  0.961389961 0.00000000 0.72727273 0.55555556 0.45454545 0.46153846
31  0.961389961 0.16233766 0.72727273 0.36111111 0.40909091 0.46153846
32  0.953667954 0.18181818 0.68181818 0.58333333 0.40909091 0.53846154
33  0.957528958 0.14285714 0.72727273 0.41666667 0.45454545 0.53846154
34  0.667953668 0.46753247 0.68181818 0.61111111 0.31818182 0.53846154
35  0.019305019 0.47402597 0.72727273 0.66666667 0.36363636 0.53846154
36  0.015444015 0.61038961 0.72727273 0.50000000 0.31818182 0.53846154
37  0.030888031 0.42207792 0.72727273 0.52777778 0.36363636 0.53846154
38  0.023166023 0.53896104 0.77272727 0.33333333 0.36363636 0.53846154
39  0.003861004 0.48051948 0.77272727 0.63888889 0.27272727 0.46153846
40  0.023166023 0.57792208 0.81818182 0.50000000 0.31818182 0.53846154
41  0.000000000 0.74025974 0.81818182 0.50000000 0.27272727 0.53846154
42  0.019305019 0.60389610 0.81818182 0.55555556 0.27272727 0.61538462
43  0.023166023 0.56493506 0.86363636 0.58333333 0.22727273 0.53846154
44  0.023166023 0.37012987 0.90909091 0.63888889 0.27272727 0.46153846
45  0.023166023 0.62337662 0.90909091 0.58333333 0.22727273 0.46153846
46  0.023166023 0.53246753 0.95454545 0.69444444 0.22727273 0.38461538
47  0.019305019 0.34415584 0.95454545 0.47222222 0.27272727 0.23076923
48  0.023166023 0.50000000 1.00000000 0.55555556 0.22727273 0.15384615
49  0.023166023 0.21428571 0.95454545 0.61111111 0.27272727 0.15384615
50  0.023166023 0.28571429 1.00000000 0.50000000 0.22727273 0.15384615
51  0.023166023 0.25324675 0.95454545 0.66666667 0.27272727 0.15384615
52  0.019305019 0.38311688 0.95454545 0.58333333 0.27272727 0.15384615
53  0.023166023 0.37012987 0.90909091 0.83333333 0.18181818 0.00000000
54  0.023166023 0.48051948 0.81818182 0.61111111 0.18181818 0.00000000
55  0.019305019 0.77272727 0.72727273 0.88888889 0.09090909 0.15384615
56  0.019305019 0.70129870 0.68181818 0.63888889 0.13636364 0.07692308
57  0.023166023 0.79870130 0.63636364 0.83333333 0.09090909 0.30769231
58  0.023166023 0.91558442 0.63636364 0.77777778 0.18181818 0.53846154
59  0.019305019 1.00000000 0.59090909 0.83333333 0.09090909 0.69230769
60  0.023166023 0.82467532 0.63636364 0.75000000 0.18181818 0.84615385
61  0.023166023 0.85714286 0.63636364 0.72222222 0.13636364 0.84615385
62  0.019305019 0.72727273 0.63636364 0.75000000 0.18181818 0.76923077
63  0.023166023 0.80519481 0.59090909 0.69444444 0.09090909 0.69230769
64  0.023166023 0.87662338 0.54545455 0.86111111 0.13636364 0.69230769
65  0.023166023 0.79870130 0.50000000 0.69444444 0.04545455 0.53846154
66  0.019305019 0.70129870 0.50000000 0.80555556 0.13636364 0.46153846
67  0.023166023 0.77922078 0.45454545 0.80555556 0.13636364 0.53846154
68  0.023166023 0.70129870 0.45454545 0.88888889 0.13636364 0.53846154
69  0.023166023 0.62987013 0.40909091 0.77777778 0.09090909 0.61538462
70  0.023166023 0.57142857 0.40909091 0.94444444 0.09090909 0.61538462
71  0.023166023 0.72727273 0.40909091 0.77777778 0.09090909 0.69230769
72  0.027027027 0.61688312 0.36363636 1.00000000 0.09090909 0.46153846
73  0.027027027 0.80519481 0.36363636 0.66666667 0.09090909 0.69230769
74  0.027027027 0.77922078 0.36363636 0.94444444 0.09090909 1.00000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.18181818 0.76923077
76  0.027027027 0.38311688 0.40909091 0.94444444 0.09090909 0.76923077
77  0.027027027 0.62987013 0.40909091 0.75000000 0.18181818 0.69230769
78  0.027027027 0.55844156 0.45454545 0.83333333 0.09090909 0.53846154
79  0.027027027 0.45454545 0.45454545 0.69444444 0.22727273 0.23076923
80  0.027027027 0.61038961 0.40909091 0.80555556 0.18181818 0.53846154
81  0.030888031 0.64935065 0.45454545 0.72222222 0.31818182 0.53846154
82  0.027027027 0.82467532 0.45454545 0.69444444 0.31818182 0.53846154
83  0.027027027 0.57792208 0.45454545 0.66666667 0.45454545 0.53846154
84  0.023166023 0.85714286 0.45454545 0.52777778 0.40909091 0.46153846
85  0.011583012 0.33766234 0.45454545 0.58333333 0.50000000 0.38461538
86  0.023166023 0.33116883 0.40909091 0.47222222 0.54545455 0.38461538
87  0.030888031 0.55194805 0.31818182 0.72222222 0.59090909 0.30769231
88  0.030888031 0.44805195 0.22727273 0.33333333 0.72727273 0.23076923
89  0.034749035 0.64285714 0.18181818 0.38888889 0.68181818 0.15384615
90  0.034749035 0.39610390 0.18181818 0.44444444 0.77272727 0.15384615
91  0.034749035 0.42857143 0.18181818 0.33333333 0.77272727 0.15384615
92  0.034749035 0.26623377 0.13636364 0.38888889 0.81818182 0.15384615
93  0.034749035 0.32467532 0.09090909 0.22222222 0.81818182 0.53846154
94  0.034749035 0.25324675 0.00000000 0.16666667 0.81818182 0.61538462
95  0.034749035 0.24675325 0.00000000 0.27777778 0.95454545 0.61538462
96  0.034749035 0.39610390 0.04545455 0.19444444 1.00000000 0.53846154
97  0.034749035 0.12337662 0.04545455 0.30555556 0.95454545 0.53846154
98  0.030888031 0.15584416 0.00000000 0.27777778 0.95454545 0.53846154
99  0.030888031 0.07792208 0.00000000 0.00000000 0.95454545 0.53846154
100 0.027027027 0.07792208 0.00000000 0.05555556 0.86363636 0.53846154
101 0.023166023 0.07142857 0.00000000 0.25000000 0.90909091 0.53846154
    B_PLNT_PRES_OP B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL
2        0.5000000    0.93333333     0.194148936      0.4545455    0.284403670
3        0.5714286    0.93333333     0.199468085      0.3636364    0.284403670
4        0.5714286    0.93333333     0.242021277      0.3636364    0.284403670
5        0.5000000    0.86666667     0.260638298      0.3636364    0.284403670
6        0.5714286    0.86666667     0.289893617      0.3636364    0.238532110
7        0.6428571    0.86666667     0.276595745      0.3636364    0.220183486
8        0.5714286    0.86666667     0.303191489      0.3636364    0.201834862
9        0.7142857    0.80000000     0.348404255      0.2727273    0.174311927
10       0.5714286    0.80000000     0.345744681      0.3636364    0.155963303
11       0.5000000    0.80000000     0.377659574      0.3636364    0.137614679
12       0.5000000    0.80000000     0.375000000      0.4545455    0.100917431
13       0.5000000    0.80000000     0.396276596      0.4545455    0.082568807
14       0.5000000    0.80000000     0.375000000      0.4545455    0.064220183
15       0.5000000    0.73333333     0.375000000      0.4545455    0.045871560
16       0.5000000    0.73333333     0.359042553      0.4545455    0.045871560
17       0.5000000    0.73333333     0.351063830      0.4545455    0.036697248
18       0.5000000    0.73333333     0.327127660      0.4545455    0.018348624
19       0.5000000    0.73333333     0.324468085      0.3636364    0.009174312
20       0.5714286    0.66666667     0.321808511      0.4545455    0.009174312
21       0.5000000    0.66666667     0.297872340      0.3636364    0.009174312
22       0.5000000    0.60000000     0.279255319      0.4545455    0.018348624
23       0.5714286    0.60000000     0.265957447      0.3636364    0.000000000
24       0.5714286    0.53333333     0.247340426      0.3636364    0.000000000
25       0.5000000    0.53333333     0.234042553      0.4545455    0.009174312
26       0.5000000    0.53333333     0.228723404      0.4545455    0.009174312
27       0.5000000    0.46666667     0.228723404      0.4545455    0.027522936
28       0.5000000    0.46666667     0.228723404      0.3636364    0.045871560
29       0.5000000    0.46666667     0.223404255      0.3636364    0.064220183
30       0.4285714    0.40000000     0.226063830      0.4545455    0.082568807
31       0.4285714    0.40000000     0.204787234      0.4545455    0.064220183
32       0.5000000    0.40000000     1.000000000      0.3636364    0.357798165
33       0.5000000    0.33333333     0.319148936      0.4545455    0.568807339
34       0.5000000    0.33333333     0.194148936      0.4545455    0.568807339
35       0.5000000    0.33333333     0.175531915      0.4545455    0.596330275
36       0.5000000    0.33333333     0.172872340      0.3636364    0.605504587
37       0.5000000    0.33333333     0.170212766      0.3636364    0.605504587
38       0.5000000    0.33333333     0.170212766      0.4545455    0.577981651
39       0.5000000    0.33333333     0.164893617      0.4545455    0.577981651
40       0.5000000    0.33333333     0.175531915      0.3636364    0.605504587
41       0.5714286    0.33333333     0.180851064      0.3636364    0.642201835
42       0.5714286    0.33333333     0.196808511      0.3636364    0.669724771
43       0.5714286    0.33333333     0.215425532      0.3636364    0.724770642
44       0.5714286    0.33333333     0.231382979      0.3636364    0.770642202
45       0.5714286    0.33333333     0.226063830      0.4545455    0.752293578
46       0.5000000    0.33333333     0.207446809      0.5454545    0.770642202
47       0.4285714    0.33333333     0.204787234      0.4545455    0.770642202
48       0.4285714    0.40000000     0.156914894      0.5454545    0.761467890
49       0.4285714    0.40000000     0.167553191      0.5454545    0.779816514
50       0.4285714    0.40000000     0.223404255      0.5454545    0.807339450
51       0.4285714    0.40000000     0.228723404      0.5454545    0.798165138
52       0.4285714    0.40000000     0.215425532      0.5454545    0.798165138
53       0.4285714    0.46666667     0.114361702      0.5454545    0.779816514
54       0.4285714    0.46666667     0.186170213      0.5454545    0.798165138
55       0.5000000    0.40000000     0.202127660      0.5454545    0.816513761
56       0.4285714    0.33333333     0.172872340      0.5454545    0.798165138
57       0.5000000    0.26666667     0.164893617      0.5454545    0.779816514
58       0.5714286    0.26666667     0.170212766      0.4545455    0.779816514
59       0.6428571    0.26666667     0.207446809      0.3636364    0.816513761
60       0.7142857    0.26666667     0.202127660      0.2727273    0.816513761
61       0.6428571    0.26666667     0.196808511      0.3636364    0.844036697
62       0.6428571    0.26666667     0.191489362      0.3636364    0.853211009
63       0.6428571    0.26666667     0.148936170      0.3636364    0.844036697
64       0.5714286    0.26666667     0.204787234      0.3636364    0.862385321
65       0.5000000    0.26666667     0.220744681      0.4545455    0.853211009
66       0.4285714    0.20000000     0.226063830      0.5454545    0.871559633
67       0.4285714    0.13333333     0.130319149      0.4545455    0.871559633
68       0.5000000    0.13333333     0.090425532      0.4545455    0.889908257
69       0.5000000    0.06666667     0.061170213      0.4545455    0.899082569
70       0.5000000    0.06666667     0.050531915      0.4545455    0.899082569
71       0.5714286    0.06666667     0.029255319      0.4545455    0.908256881
72       0.3571429    0.00000000     0.023936170      0.6363636    0.917431193
73       0.5714286    0.00000000     0.042553191      0.4545455    0.944954128
74       1.0000000    0.00000000     0.039893617      0.0000000    0.954128440
75       0.7857143    0.00000000     0.026595745      0.1818182    0.963302752
76       0.7142857    0.00000000     0.007978723      0.2727273    0.963302752
77       0.6428571    0.00000000     0.010638298      0.3636364    0.981651376
78       0.4285714    0.00000000     0.021276596      0.5454545    1.000000000
79       0.0000000    0.00000000     0.082446809      1.0000000    0.972477064
80       0.5000000    0.00000000     0.023936170      0.5454545    0.972477064
81       0.5000000    0.00000000     0.000000000      0.4545455    0.972477064
82       0.5000000    0.06666667     0.029255319      0.4545455    0.972477064
83       0.5000000    0.06666667     0.042553191      0.4545455    0.944954128
84       0.5000000    0.06666667     0.055851064      0.5454545    0.935779817
85       0.5000000    0.06666667     0.045212766      0.4545455    0.926605505
86       0.5000000    0.06666667     0.058510638      0.4545455    0.935779817
87       0.5000000    0.06666667     0.087765957      0.4545455    0.926605505
88       0.4285714    0.06666667     0.069148936      0.5454545    0.926605505
89       0.4285714    0.06666667     0.085106383      0.5454545    0.917431193
90       0.5000000    0.06666667     0.119680851      0.5454545    0.889908257
91       0.5714286    0.06666667     0.162234043      0.4545455    0.889908257
92       0.5000000    0.06666667     0.156914894      0.4545455    0.889908257
93       0.5714286    0.06666667     0.159574468      0.4545455    0.880733945
94       0.5714286    0.13333333     0.135638298      0.4545455    0.871559633
95       0.5714286    0.13333333     0.180851064      0.4545455    0.889908257
96       0.5714286    0.13333333     0.188829787      0.4545455    0.880733945
97       0.5714286    0.20000000     0.098404255      0.4545455    0.871559633
98       0.5714286    0.13333333     0.159574468      0.5454545    0.862385321
99       0.5714286    0.13333333     0.154255319      0.4545455    0.862385321
100      0.5000000    0.13333333     0.188829787      0.4545455    0.853211009
101      0.5000000    0.13333333     0.223404255      0.4545455    0.844036697
      past_data
2   0.210106383
3   0.194148936
4   0.199468085
5   0.242021277
6   0.260638298
7   0.289893617
8   0.276595745
9   0.303191489
10  0.348404255
11  0.345744681
12  0.377659574
13  0.375000000
14  0.396276596
15  0.375000000
16  0.375000000
17  0.359042553
18  0.351063830
19  0.327127660
20  0.324468085
21  0.321808511
22  0.297872340
23  0.279255319
24  0.265957447
25  0.247340426
26  0.234042553
27  0.228723404
28  0.228723404
29  0.228723404
30  0.223404255
31  0.226063830
32  0.204787234
33  1.000000000
34  0.319148936
35  0.194148936
36  0.175531915
37  0.172872340
38  0.170212766
39  0.170212766
40  0.164893617
41  0.175531915
42  0.180851064
43  0.196808511
44  0.215425532
45  0.231382979
46  0.226063830
47  0.207446809
48  0.204787234
49  0.156914894
50  0.167553191
51  0.223404255
52  0.228723404
53  0.215425532
54  0.114361702
55  0.186170213
56  0.202127660
57  0.172872340
58  0.164893617
59  0.170212766
60  0.207446809
61  0.202127660
62  0.196808511
63  0.191489362
64  0.148936170
65  0.204787234
66  0.220744681
67  0.226063830
68  0.130319149
69  0.090425532
70  0.061170213
71  0.050531915
72  0.029255319
73  0.023936170
74  0.042553191
75  0.039893617
76  0.026595745
77  0.007978723
78  0.010638298
79  0.021276596
80  0.082446809
81  0.023936170
82  0.000000000
83  0.029255319
84  0.042553191
85  0.055851064
86  0.045212766
87  0.058510638
88  0.087765957
89  0.069148936
90  0.085106383
91  0.119680851
92  0.162234043
93  0.156914894
94  0.159574468
95  0.135638298
96  0.180851064
97  0.188829787
98  0.098404255
99  0.159574468
100 0.154255319
101 0.188829787

$exclude
NULL

$net.result
$net.result[[1]]
          [,1]
2   0.30712693
3   0.30712847
4   0.30711156
5   0.30710317
6   0.30712578
7   0.30714235
8   0.30713816
9   0.30713699
10  0.30714604
11  0.30715067
12  0.30715124
13  0.30716035
14  0.30716133
15  0.30713989
16  0.30713771
17  0.30712057
18  0.30712834
19  0.30710797
20  0.30707842
21  0.30705331
22  0.30701959
23  0.30701448
24  0.30696598
25  0.30692085
26  0.30688563
27  0.30680383
28  0.30674213
29  0.30665666
30  0.30654334
31  0.30663455
32  0.30604243
33  0.30719800
34  0.30321203
35  0.21229521
36  0.20866351
37  0.21329917
38  0.21867308
39  0.20065174
40  0.20273003
41  0.19135946
42  0.19978419
43  0.19536310
44  0.18956230
45  0.19911537
46  0.18846308
47  0.18621088
48  0.19253162
49  0.17660453
50  0.18025361
51  0.19536504
52  0.19726323
53  0.19866564
54  0.17372969
55  0.17697733
56  0.18457876
57  0.16300296
58  0.16234174
59  0.16369023
60  0.18430385
61  0.18490341
62  0.17620960
63  0.18222090
64  0.15345793
65  0.19248698
66  0.17206983
67  0.16234132
68  0.11256074
69  0.09387053
70  0.07082935
71  0.07346615
72  0.03652716
73  0.04768030
74  0.03151525
75  0.03968525
76  0.03190408
77  0.02175101
78  0.01988686
79  0.03901646
80  0.05399555
81  0.01991585
82  0.02189350
83  0.03998375
84  0.04831046
85  0.04961506
86  0.05704866
87  0.04717003
88  0.08927513
89  0.07710424
90  0.08591104
91  0.10423537
92  0.12753113
93  0.15663053
94  0.18932092
95  0.16505165
96  0.17658739
97  0.19770962
98  0.15313251
99  0.19227122
100 0.19241358
101 0.19306759


$weights
$weights[[1]]
$weights[[1]][[1]]
            [,1]
 [1,]  1.4189688
 [2,]  4.1919873
 [3,] -0.2571093
 [4,] -0.7825590
 [5,] -0.5962117
 [6,] -0.5189235
 [7,]  0.4790959
 [8,] -0.1788755
 [9,]  2.5030857
[10,]  0.2897895
[11,] -1.5036647
[12,]  4.2793355

$weights[[1]][[2]]
           [,1]
[1,] -0.1331952
[2,]  0.4404532



$generalized.weights
$generalized.weights[[1]]
            [,1]          [,2]          [,3]          [,4]          [,5]
2    0.002580835 -0.0001582916 -0.0004817895 -0.0003670631 -0.0003194799
3    0.002550482 -0.0001564300 -0.0004761232 -0.0003627462 -0.0003157226
4    0.002883590 -0.0001768607 -0.0005383077 -0.0004101229 -0.0003569578
5    0.003048789 -0.0001869929 -0.0005691470 -0.0004336186 -0.0003774076
6    0.002603465 -0.0001596796 -0.0004860141 -0.0003702818 -0.0003222813
7    0.002277254 -0.0001396720 -0.0004251172 -0.0003238859 -0.0002818999
8    0.002359690 -0.0001447281 -0.0004405063 -0.0003356105 -0.0002921046
9    0.002382732 -0.0001461413 -0.0004448077 -0.0003388876 -0.0002949569
10   0.002204443 -0.0001352062 -0.0004115248 -0.0003135302 -0.0002728866
11   0.002113300 -0.0001296161 -0.0003945103 -0.0003005674 -0.0002616041
12   0.002102101 -0.0001289292 -0.0003924195 -0.0002989744 -0.0002602177
13   0.001922762 -0.0001179297 -0.0003589406 -0.0002734677 -0.0002380174
14   0.001903318 -0.0001167372 -0.0003553109 -0.0002707023 -0.0002356106
15   0.002325713 -0.0001426442 -0.0004341635 -0.0003307781 -0.0002878986
16   0.002368609 -0.0001452751 -0.0004421713 -0.0003368790 -0.0002932087
17   0.002706022 -0.0001659698 -0.0005051594 -0.0003848680 -0.0003349768
18   0.002553005 -0.0001565848 -0.0004765943 -0.0003631050 -0.0003160349
19   0.002954120 -0.0001811866 -0.0005514743 -0.0004201542 -0.0003656887
20   0.003535995 -0.0002168750 -0.0006600985 -0.0005029122 -0.0004377186
21   0.004030575 -0.0002472093 -0.0007524265 -0.0005732546 -0.0004989423
22   0.004694467 -0.0002879281 -0.0008763617 -0.0006676776 -0.0005811251
23   0.004795173 -0.0002941048 -0.0008951616 -0.0006820008 -0.0005935915
24   0.005749974 -0.0003526661 -0.0010734035 -0.0008177987 -0.0007117857
25   0.006638696 -0.0004071745 -0.0012393098 -0.0009441986 -0.0008218000
26   0.007331957 -0.0004496946 -0.0013687277 -0.0010427987 -0.0009076184
27   0.008942362 -0.0005484664 -0.0016693576 -0.0012718410 -0.0011069694
28   0.010156942 -0.0006229608 -0.0018960949 -0.0014445864 -0.0012573215
29   0.011839564 -0.0007261620 -0.0022102064 -0.0016838999 -0.0014656122
30   0.014069997 -0.0008629622 -0.0026265829 -0.0020011265 -0.0017417161
31   0.012274735 -0.0007528525 -0.0022914441 -0.0017457928 -0.0015194818
32   0.023926538 -0.0014674984 -0.0044665992 -0.0034029880 -0.0029618512
33   0.001181235 -0.0000724493 -0.0002205126 -0.0001680030 -0.0001462244
34   0.079539970 -0.0048784651 -0.0148484986 -0.0113126923 -0.0098462031
35   1.867264666 -0.1145258863 -0.3485804282 -0.2655745358 -0.2311475257
36   1.942726698 -0.1191542372 -0.3626676585 -0.2763072372 -0.2404889234
37   1.846524705 -0.1132538318 -0.3447086983 -0.2626247636 -0.2285801389
38   1.736328512 -0.1064951130 -0.3241373047 -0.2469519436 -0.2149390210
39   2.111889958 -0.1295296128 -0.3942470070 -0.3003667372 -0.2614295376
40   2.067625085 -0.1268146930 -0.3859836532 -0.2940710988 -0.2559500166
41   2.313558623 -0.1418986588 -0.4318944550 -0.3290493675 -0.2863939756
42   2.130452731 -0.1306681327 -0.3977123000 -0.3030068556 -0.2637274117
43   2.225873090 -0.1365205977 -0.4155253450 -0.3165781601 -0.2755394382
44   2.353344307 -0.1443388542 -0.4393216350 -0.3347079464 -0.2913190205
45   2.144798435 -0.1315480050 -0.4003903520 -0.3050471950 -0.2655032574
46   2.377815608 -0.1458397649 -0.4438899305 -0.3381884142 -0.2943483076
47   2.428291737 -0.1489356428 -0.4533127995 -0.3453674578 -0.3005967160
48   2.287754081 -0.1403159758 -0.4270772705 -0.3253792775 -0.2831996474
49   2.649182138 -0.1624836253 -0.4945485558 -0.3767839286 -0.3279406007
50   2.564141605 -0.1572677913 -0.4786732136 -0.3646889103 -0.3174134862
51   2.225830895 -0.1365180098 -0.4155174681 -0.3165721589 -0.2755342149
52   2.184689335 -0.1339946537 -0.4078371735 -0.3107207384 -0.2704413269
53   2.154462200 -0.1321407176 -0.4021943807 -0.3064216385 -0.2666995288
54   2.717248893 -0.1666583979 -0.5072552379 -0.3864648254 -0.3363665417
55   2.640426202 -0.1619465930 -0.4929140002 -0.3755386023 -0.3268567088
56   2.465163734 -0.1511971316 -0.4601960534 -0.3506116333 -0.3051610775
57   2.980671253 -0.1828150144 -0.5564308479 -0.4239304682 -0.3689754309
58   2.997450099 -0.1838441199 -0.5595631181 -0.4263168650 -0.3710524738
59   2.963302909 -0.1817497530 -0.5531885305 -0.4214602293 -0.3668254145
60   2.471399429 -0.1515795886 -0.4613601311 -0.3514985144 -0.3059329903
61   2.457809333 -0.1507460604 -0.4588231359 -0.3495656425 -0.3042506808
62   2.658475252 -0.1630536045 -0.4962833917 -0.3781056558 -0.3290909895
63   2.518887028 -0.1544921695 -0.4702251024 -0.3582525099 -0.3118114505
64   3.229947654 -0.1981040098 -0.6029656945 -0.4593841807 -0.3998332009
65   2.288734863 -0.1403761306 -0.4272603627 -0.3255187708 -0.2833210578
66   2.757004291 -0.1690967358 -0.5146767642 -0.3921190970 -0.3412878376
67   2.997460820 -0.1838447775 -0.5595651195 -0.4263183898 -0.3710538010
68   4.558883208 -0.2796122849 -0.8510509996 -0.6483940459 -0.5643413023
69   5.421520924 -0.3325208793 -1.0120879590 -0.7710839972 -0.6711266858
70   6.975799022 -0.4278502025 -1.3022401451 -0.9921435459 -0.8635297999
71   6.755542376 -0.4143410904 -1.2611226980 -0.9608172119 -0.8362643673
72  12.426292014 -0.7621480403 -2.3197366014 -1.7673481392 -1.5382429198
73   9.841143730 -0.6035918357 -1.8371418670 -1.3996715222 -1.2182290299
74  14.162236993 -0.8686196299 -2.6438023084 -2.0142455343 -1.7531344636
75  11.552212839 -0.7085377011 -2.1565637537 -1.6430309092 -1.4300412053
76  14.008513876 -0.8591912524 -2.6151053213 -1.9923820319 -1.7341051750
77  19.787417966 -1.2136316939 -3.6939094665 -2.8142953894 -2.4494720995
78  21.480543345 -1.3174770073 -4.0099816227 -3.0551027021 -2.6590630316
79  11.725866169 -0.7191884684 -2.1889813072 -1.6677290162 -1.4515376424
80   8.833325845 -0.5417788327 -1.6490027155 -1.2563331022 -1.0934718840
81  21.451802092 -1.3157142056 -4.0046162141 -3.0510149341 -2.6555051700
82  19.669757127 -1.2064151422 -3.6719445751 -2.7975608990 -2.4349069379
83  11.476522415 -0.7038953421 -2.1424338872 -1.6322657243 -1.4206715350
84   9.729391237 -0.5967376637 -1.8162799440 -1.3837773553 -1.2043952587
85   9.506614770 -0.5830740022 -1.7746920974 -1.3520926359 -1.1768178991
86   8.421697431 -0.5165322194 -1.5721600422 -1.1977886297 -1.0425166600
87   9.933715388 -0.6092695800 -1.8544231174 -1.4128376661 -1.2296884177
88   5.676713411 -0.3481727290 -1.0597272187 -0.8073791339 -0.7027168042
89   6.473594214 -0.3970482215 -1.2084886967 -0.9207167090 -0.8013621807
90   5.877749048 -0.3605029491 -1.0972564933 -0.8359717308 -0.7276028800
91   4.913514496 -0.3013630647 -0.9172534658 -0.6988320161 -0.6082408876
92   4.008223254 -0.2458383800 -0.7482539585 -0.5700756027 -0.4961754508
93   3.145335417 -0.1929144447 -0.5871703065 -0.4473500776 -0.3893591049
94   2.358708958 -0.1446678871 -0.4403231065 -0.3354709421 -0.2919831073
95   2.929108953 -0.1796525179 -0.5468052127 -0.4165969423 -0.3625925661
96   2.649584983 -0.1625083331 -0.4946237587 -0.3768412237 -0.3279904686
97   2.175052761 -0.1334036089 -0.4060382208 -0.3093501622 -0.2692484215
98   3.238732863 -0.1986428374 -0.6046057147 -0.4606336703 -0.4009207163
99   2.293477134 -0.1406669907 -0.4281456485 -0.3261932475 -0.2839081007
100  2.290347657 -0.1404750489 -0.4275614386 -0.3257481528 -0.2835207046
101  2.275992179 -0.1395945772 -0.4248815622 -0.3237064233 -0.2817436490
            [,6]          [,7]         [,8]         [,9]         [,10]
2   0.0002949597 -1.101263e-04 1.541047e-03 1.784115e-04 -0.0009257448
3   0.0002914908 -1.088311e-04 1.522923e-03 1.763133e-04 -0.0009148572
4   0.0003295612 -1.230451e-04 1.721826e-03 1.993408e-04 -0.0010343429
5   0.0003484415 -1.300943e-04 1.820468e-03 2.107609e-04 -0.0010935996
6   0.0002975461 -1.110920e-04 1.554560e-03 1.799760e-04 -0.0009338623
7   0.0002602640 -9.717227e-05 1.359776e-03 1.574252e-04 -0.0008168505
8   0.0002696854 -1.006899e-04 1.408999e-03 1.631239e-04 -0.0008464202
9   0.0002723189 -1.016731e-04 1.422758e-03 1.647168e-04 -0.0008546853
10  0.0002519425 -9.406536e-05 1.316299e-03 1.523918e-04 -0.0007907331
11  0.0002415259 -9.017623e-05 1.261877e-03 1.460912e-04 -0.0007580403
12  0.0002402459 -8.969833e-05 1.255189e-03 1.453169e-04 -0.0007540229
13  0.0002197495 -8.204578e-05 1.148104e-03 1.329193e-04 -0.0006896940
14  0.0002175274 -8.121612e-05 1.136494e-03 1.315752e-04 -0.0006827197
15  0.0002658023 -9.924006e-05 1.388711e-03 1.607751e-04 -0.0008342327
16  0.0002707048 -1.010705e-04 1.414325e-03 1.637405e-04 -0.0008496195
17  0.0003092672 -1.154681e-04 1.615798e-03 1.870656e-04 -0.0009706493
18  0.0002917791 -1.089388e-04 1.524430e-03 1.764877e-04 -0.0009157623
19  0.0003376220 -1.260547e-04 1.763941e-03 2.042165e-04 -0.0010596422
20  0.0004041236 -1.508838e-04 2.111385e-03 2.444412e-04 -0.0012683604
21  0.0004606483 -1.719879e-04 2.406704e-03 2.786312e-04 -0.0014457660
22  0.0005365236 -2.003167e-04 2.803122e-03 3.245256e-04 -0.0016839040
23  0.0005480332 -2.046139e-04 2.863255e-03 3.314874e-04 -0.0017200273
24  0.0006571559 -2.453560e-04 3.433378e-03 3.974922e-04 -0.0020625141
25  0.0007587266 -2.832785e-04 3.964045e-03 4.589290e-04 -0.0023812984
26  0.0008379584 -3.128605e-04 4.377999e-03 5.068537e-04 -0.0026299710
27  0.0010220092 -3.815778e-04 5.339591e-03 6.181800e-04 -0.0032076229
28  0.0011608216 -4.334049e-04 6.064831e-03 7.021432e-04 -0.0036432921
29  0.0013531260 -5.052037e-04 7.069545e-03 8.184618e-04 -0.0042468483
30  0.0016080388 -6.003781e-04 8.401363e-03 9.726503e-04 -0.0050469039
31  0.0014028611 -5.237729e-04 7.329391e-03 8.485449e-04 -0.0044029442
32  0.0027345281 -1.020965e-03 1.428682e-02 1.654027e-03 -0.0085824424
33  0.0001350016 -5.040426e-05 7.053296e-04 8.165807e-05 -0.0004237087
34  0.0090905038 -3.394035e-03 4.749427e-02 5.498549e-03 -0.0285309648
35  0.2134068766 -7.967769e-02 1.114966e+00 1.290829e-01 -0.6697873108
36  0.2220313190 -8.289771e-02 1.160025e+00 1.342995e-01 -0.6968555203
37  0.2110365376 -7.879270e-02 1.102582e+00 1.276491e-01 -0.6623478926
38  0.1984423800 -7.409054e-02 1.036782e+00 1.200313e-01 -0.6228205489
39  0.2413647342 -9.011605e-02 1.261035e+00 1.459937e-01 -0.7575343342
40  0.2363057682 -8.822723e-02 1.234604e+00 1.429337e-01 -0.7416565365
41  0.2644131432 -9.872141e-02 1.381453e+00 1.599349e-01 -0.8298728275
42  0.2434862456 -9.090814e-02 1.272119e+00 1.472769e-01 -0.7641927955
43  0.2543916952 -9.497980e-02 1.329095e+00 1.538732e-01 -0.7984200514
44  0.2689601893 -1.004191e-01 1.405210e+00 1.626853e-01 -0.8441439411
45  0.2451257946 -9.152028e-02 1.280685e+00 1.482686e-01 -0.7693385957
46  0.2717569777 -1.014633e-01 1.419822e+00 1.643769e-01 -0.8529217901
47  0.2775258186 -1.036172e-01 1.449962e+00 1.678663e-01 -0.8710275631
48  0.2614639808 -9.762031e-02 1.366045e+00 1.581510e-01 -0.8206167454
49  0.3027710511 -1.130427e-01 1.581858e+00 1.831363e-01 -0.9502608881
50  0.2930518962 -1.094140e-01 1.531080e+00 1.772575e-01 -0.9197568726
51  0.2543868728 -9.497800e-02 1.329070e+00 1.538703e-01 -0.7984049161
52  0.2496848656 -9.322245e-02 1.304504e+00 1.510262e-01 -0.7836474500
53  0.2462302517 -9.193264e-02 1.286455e+00 1.489367e-01 -0.7728049852
54  0.3105502983 -1.159472e-01 1.622502e+00 1.878418e-01 -0.9746764137
55  0.3017703483 -1.126691e-01 1.576630e+00 1.825310e-01 -0.9471201362
56  0.2817398639 -1.051905e-01 1.471979e+00 1.704153e-01 -0.8842535383
57  0.3406564446 -1.271876e-01 1.779794e+00 2.060520e-01 -1.0691659401
58  0.3425740737 -1.279036e-01 1.789813e+00 2.072119e-01 -1.0751845077
59  0.3386714426 -1.264465e-01 1.769424e+00 2.048513e-01 -1.0629359201
60  0.2824525321 -1.054566e-01 1.475702e+00 1.708463e-01 -0.8864902804
61  0.2808993404 -1.048767e-01 1.467587e+00 1.699069e-01 -0.8816155167
62  0.3038331472 -1.134393e-01 1.587407e+00 1.837788e-01 -0.9535943255
63  0.2878798185 -1.074829e-01 1.504058e+00 1.741291e-01 -0.9035240687
64  0.3691458704 -1.378245e-01 1.928640e+00 2.232843e-01 -1.1585813154
65  0.2615760729 -9.766216e-02 1.366631e+00 1.582188e-01 -0.8209685518
66  0.3150938832 -1.176436e-01 1.646240e+00 1.905900e-01 -0.9889366640
67  0.3425752990 -1.279041e-01 1.789820e+00 2.072126e-01 -1.0751883533
68  0.5210279207 -1.945312e-01 2.722164e+00 3.151528e-01 -1.6352701249
69  0.6196174907 -2.313407e-01 3.237255e+00 3.747864e-01 -1.9446980309
70  0.7972536021 -2.976630e-01 4.165333e+00 4.822327e-01 -2.5022171476
71  0.7720808005 -2.882644e-01 4.033815e+00 4.670065e-01 -2.4232111505
72  1.4201822669 -5.302399e-01 7.419887e+00 8.590220e-01 -4.4573074511
73  1.1247295489 -4.199295e-01 5.876264e+00 6.803122e-01 -3.5300154887
74  1.6185808136 -6.043141e-01 8.456441e+00 9.790268e-01 -5.0799904272
75  1.3202850697 -4.929422e-01 6.897964e+00 7.985974e-01 -4.1437754970
76  1.6010120292 -5.977546e-01 8.364651e+00 9.684000e-01 -5.0248499882
77  2.2614743057 -8.443451e-01 1.181530e+01 1.367892e+00 -7.0977412604
78  2.4549790644 -9.165921e-01 1.282629e+01 1.484937e+00 -7.7050648575
79  1.3401316483 -5.003522e-01 7.001655e+00 8.106020e-01 -4.2060648977
80  1.0095475552 -3.769251e-01 5.274484e+00 6.106424e-01 -3.1685114967
81  2.4516942698 -9.153657e-01 1.280913e+01 1.482950e+00 -7.6947553784
82  2.2480270250 -8.393244e-01 1.174505e+01 1.359758e+00 -7.0555363506
83  1.3116345247 -4.897125e-01 6.852769e+00 7.933650e-01 -4.1166253631
84  1.1119575242 -4.151610e-01 5.809536e+00 6.725869e-01 -3.4899299010
85  1.0864967361 -4.056549e-01 5.676513e+00 6.571865e-01 -3.4100200448
86  0.9625031615 -3.593606e-01 5.028696e+00 5.821868e-01 -3.0208605003
87  1.1353094249 -4.238796e-01 5.931540e+00 6.867117e-01 -3.5632209165
88  0.6487830571 -2.422299e-01 3.389633e+00 3.924277e-01 -2.0362355042
89  0.7398573682 -2.762335e-01 3.865460e+00 4.475156e-01 -2.3220764243
90  0.6717591183 -2.508083e-01 3.509674e+00 4.063252e-01 -2.1083469306
91  0.5615581983 -2.096636e-01 2.933918e+00 3.396682e-01 -1.7624762679
92  0.4580938208 -1.710341e-01 2.393358e+00 2.770860e-01 -1.4377485541
93  0.3594756648 -1.342140e-01 1.878117e+00 2.174351e-01 -1.1282309296
94  0.2695733073 -1.006480e-01 1.408413e+00 1.630561e-01 -0.8460682400
95  0.3347634667 -1.249874e-01 1.749006e+00 2.024875e-01 -1.0506705578
96  0.3028170916 -1.130599e-01 1.582099e+00 1.831642e-01 -0.9504053882
97  0.2485835161 -9.281125e-02 1.298750e+00 1.503601e-01 -0.7801908138
98  0.3701499187 -1.381993e-01 1.933886e+00 2.238916e-01 -1.1617325671
99  0.2621180600 -9.786452e-02 1.369463e+00 1.585467e-01 -0.8226696032
100 0.2617603968 -9.773098e-02 1.367594e+00 1.583303e-01 -0.8215470606
101 0.2601197308 -9.711842e-02 1.359022e+00 1.573379e-01 -0.8163977548
           [,11]
2    0.002634612
3    0.002603626
4    0.002943675
5    0.003112316
6    0.002657714
7    0.002324705
8    0.002408859
9    0.002432381
10   0.002250377
11   0.002157335
12   0.002145902
13   0.001962826
14   0.001942977
15   0.002374174
16   0.002417964
17   0.002762407
18   0.002606202
19   0.003015675
20   0.003609674
21   0.004114560
22   0.004792285
23   0.004895090
24   0.005869786
25   0.006777026
26   0.007484733
27   0.009128694
28   0.010368581
29   0.012086265
30   0.014363173
31   0.012530504
32   0.024425094
33   0.001205849
34   0.081197341
35   1.906172784
36   1.983207215
37   1.885000665
38   1.772508318
39   2.155895323
40   2.110708104
41   2.361766149
42   2.174844887
43   2.272253516
44   2.402380846
45   2.189489513
46   2.427362055
47   2.478889952
48   2.335423919
49   2.704383038
50   2.617570518
51   2.272210442
52   2.230211617
53   2.199354640
54   2.773868097
55   2.695444655
56   2.516530250
57   3.042779377
58   3.059907844
59   3.025049130
60   2.522895878
61   2.509022606
62   2.713869792
63   2.571372974
64   3.297249941
65   2.336425138
66   2.814451877
67   3.059918789
68   4.653876471
69   5.534488933
70   7.121153461
71   6.896307336
72  12.685218152
73  10.046203239
74  14.457334946
75  11.792925825
76  14.300408706
77  20.199727585
78  21.928132547
79  11.970197563
80   9.017385494
81  21.898792414
82  20.079615052
83  11.715658243
84   9.932122164
85   9.704703713
86   8.597179996
87  10.140703809
88   5.794998856
89   6.608484232
90   6.000223464
91   5.015897196
92   4.091742438
93   3.210874642
94   2.407857280
95   2.990142676
96   2.704794276
97   2.220374247
98   3.306218207
99   2.341266224
100  2.338071538
101  2.323416935


$startweights
$startweights[[1]]
$startweights[[1]][[1]]
            [,1]
 [1,]  1.4322822
 [2,] -0.6506964
 [3,] -0.2073807
 [4,] -0.3928079
 [5,] -0.3199929
 [6,] -0.2791133
 [7,]  0.4941883
 [8,] -0.1773305
 [9,] -0.5059575
[10,]  1.3430388
[11,] -0.2145794
[12,] -0.1795565

$startweights[[1]][[2]]
           [,1]
[1,] -0.1001907
[2,]  0.7126663



$result.matrix
                                     [,1]
error                         0.341191635
reached.threshold             0.009631212
steps                        90.000000000
Intercept.to.1layhid1         1.418968758
B_CL2_VAL.to.1layhid1         4.191987275
B_TURB_VAL.to.1layhid1       -0.257109271
B_PH_VAL.to.1layhid1         -0.782558973
B_COND_VAL.to.1layhid1       -0.596211718
B_TEMP_VAL.to.1layhid1       -0.518923484
B_PRES_OP.to.1layhid1         0.479095935
B_PLNT_PRES_OP.to.1layhid1   -0.178875476
B_PLNT_PH_VAL.to.1layhid1     2.503085659
B_PLNT_FLOW_OP.to.1layhid1    0.289789514
B_PLNT_CL2_VAL.to.1layhid1   -1.503664657
past_data.to.1layhid1         4.279335542
Intercept.to.B_PLNT_TURB_VAL -0.133195205
1layhid1.to.B_PLNT_TURB_VAL   0.440453186

attr(,"class")
[1] "nn"

$modelList$model10
$call
neuralnet(formula = nn_input, data = model_input, hidden = hidden, 
    threshold = threshold, stepmax = stepmax, rep = rep, startweights = unlist(control))

$response
    B_PLNT_FLOW_OP
2        0.4545455
3        0.3636364
4        0.3636364
5        0.3636364
6        0.3636364
7        0.3636364
8        0.3636364
9        0.2727273
10       0.3636364
11       0.3636364
12       0.4545455
13       0.4545455
14       0.4545455
15       0.4545455
16       0.4545455
17       0.4545455
18       0.4545455
19       0.3636364
20       0.4545455
21       0.3636364
22       0.4545455
23       0.3636364
24       0.3636364
25       0.4545455
26       0.4545455
27       0.4545455
28       0.3636364
29       0.3636364
30       0.4545455
31       0.4545455
32       0.3636364
33       0.4545455
34       0.4545455
35       0.4545455
36       0.3636364
37       0.3636364
38       0.4545455
39       0.4545455
40       0.3636364
41       0.3636364
42       0.3636364
43       0.3636364
44       0.3636364
45       0.4545455
46       0.5454545
47       0.4545455
48       0.5454545
49       0.5454545
50       0.5454545
51       0.5454545
52       0.5454545
53       0.5454545
54       0.5454545
55       0.5454545
56       0.5454545
57       0.5454545
58       0.4545455
59       0.3636364
60       0.2727273
61       0.3636364
62       0.3636364
63       0.3636364
64       0.3636364
65       0.4545455
66       0.5454545
67       0.4545455
68       0.4545455
69       0.4545455
70       0.4545455
71       0.4545455
72       0.6363636
73       0.4545455
74       0.0000000
75       0.1818182
76       0.2727273
77       0.3636364
78       0.5454545
79       1.0000000
80       0.5454545
81       0.4545455
82       0.4545455
83       0.4545455
84       0.5454545
85       0.4545455
86       0.4545455
87       0.4545455
88       0.5454545
89       0.5454545
90       0.5454545
91       0.4545455
92       0.4545455
93       0.4545455
94       0.4545455
95       0.4545455
96       0.4545455
97       0.4545455
98       0.5454545
99       0.4545455
100      0.4545455
101      0.4545455

$covariate
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.00000000 0.61538462
3   0.996138996 0.34415584 0.27272727 0.33333333 0.00000000 0.61538462
4   0.988416988 0.24675325 0.31818182 0.52777778 0.04545455 0.69230769
5   0.984555985 0.29220779 0.36363636 0.50000000 0.04545455 0.61538462
6   0.984555985 0.22077922 0.36363636 0.55555556 0.04545455 0.69230769
7   0.949806950 0.22077922 0.40909091 0.22222222 0.09090909 0.69230769
8   0.972972973 0.12987013 0.40909091 0.41666667 0.13636364 0.69230769
9   0.969111969 0.12987013 0.45454545 0.22222222 0.22727273 0.76923077
10  0.961389961 0.16883117 0.45454545 0.41666667 0.22727273 0.69230769
11  0.965250965 0.18831169 0.45454545 0.25000000 0.27272727 0.53846154
12  0.949806950 0.29870130 0.45454545 0.38888889 0.27272727 0.46153846
13  0.961389961 0.52597403 0.50000000 0.11111111 0.36363636 0.46153846
14  0.961389961 0.50649351 0.45454545 0.36111111 0.36363636 0.46153846
15  0.961389961 0.51948052 0.50000000 0.16666667 0.45454545 0.46153846
16  0.961389961 0.31818182 0.45454545 0.36111111 0.36363636 0.38461538
17  0.976833977 0.43506494 0.45454545 0.47222222 0.45454545 0.38461538
18  0.980694981 0.51298701 0.36363636 0.55555556 0.36363636 0.38461538
19  0.980694981 0.50000000 0.36363636 0.47222222 0.45454545 0.30769231
20  0.980694981 0.44805195 0.40909091 0.50000000 0.40909091 0.30769231
21  0.972972973 0.43506494 0.40909091 0.52777778 0.45454545 0.23076923
22  0.976833977 0.33116883 0.45454545 0.44444444 0.36363636 0.23076923
23  0.980694981 0.19480519 0.50000000 0.58333333 0.45454545 0.61538462
24  0.976833977 0.25324675 0.50000000 0.50000000 0.40909091 0.61538462
25  0.969111969 0.06493506 0.54545455 0.55555556 0.40909091 0.53846154
26  0.969111969 0.22077922 0.59090909 0.50000000 0.40909091 0.53846154
27  0.965250965 0.10389610 0.63636364 0.47222222 0.36363636 0.53846154
28  0.961389961 0.05194805 0.63636364 0.47222222 0.50000000 0.53846154
29  0.961389961 0.30519481 0.72727273 0.47222222 0.40909091 0.46153846
30  0.961389961 0.00000000 0.72727273 0.55555556 0.45454545 0.46153846
31  0.961389961 0.16233766 0.72727273 0.36111111 0.40909091 0.46153846
32  0.953667954 0.18181818 0.68181818 0.58333333 0.40909091 0.53846154
33  0.957528958 0.14285714 0.72727273 0.41666667 0.45454545 0.53846154
34  0.667953668 0.46753247 0.68181818 0.61111111 0.31818182 0.53846154
35  0.019305019 0.47402597 0.72727273 0.66666667 0.36363636 0.53846154
36  0.015444015 0.61038961 0.72727273 0.50000000 0.31818182 0.53846154
37  0.030888031 0.42207792 0.72727273 0.52777778 0.36363636 0.53846154
38  0.023166023 0.53896104 0.77272727 0.33333333 0.36363636 0.53846154
39  0.003861004 0.48051948 0.77272727 0.63888889 0.27272727 0.46153846
40  0.023166023 0.57792208 0.81818182 0.50000000 0.31818182 0.53846154
41  0.000000000 0.74025974 0.81818182 0.50000000 0.27272727 0.53846154
42  0.019305019 0.60389610 0.81818182 0.55555556 0.27272727 0.61538462
43  0.023166023 0.56493506 0.86363636 0.58333333 0.22727273 0.53846154
44  0.023166023 0.37012987 0.90909091 0.63888889 0.27272727 0.46153846
45  0.023166023 0.62337662 0.90909091 0.58333333 0.22727273 0.46153846
46  0.023166023 0.53246753 0.95454545 0.69444444 0.22727273 0.38461538
47  0.019305019 0.34415584 0.95454545 0.47222222 0.27272727 0.23076923
48  0.023166023 0.50000000 1.00000000 0.55555556 0.22727273 0.15384615
49  0.023166023 0.21428571 0.95454545 0.61111111 0.27272727 0.15384615
50  0.023166023 0.28571429 1.00000000 0.50000000 0.22727273 0.15384615
51  0.023166023 0.25324675 0.95454545 0.66666667 0.27272727 0.15384615
52  0.019305019 0.38311688 0.95454545 0.58333333 0.27272727 0.15384615
53  0.023166023 0.37012987 0.90909091 0.83333333 0.18181818 0.00000000
54  0.023166023 0.48051948 0.81818182 0.61111111 0.18181818 0.00000000
55  0.019305019 0.77272727 0.72727273 0.88888889 0.09090909 0.15384615
56  0.019305019 0.70129870 0.68181818 0.63888889 0.13636364 0.07692308
57  0.023166023 0.79870130 0.63636364 0.83333333 0.09090909 0.30769231
58  0.023166023 0.91558442 0.63636364 0.77777778 0.18181818 0.53846154
59  0.019305019 1.00000000 0.59090909 0.83333333 0.09090909 0.69230769
60  0.023166023 0.82467532 0.63636364 0.75000000 0.18181818 0.84615385
61  0.023166023 0.85714286 0.63636364 0.72222222 0.13636364 0.84615385
62  0.019305019 0.72727273 0.63636364 0.75000000 0.18181818 0.76923077
63  0.023166023 0.80519481 0.59090909 0.69444444 0.09090909 0.69230769
64  0.023166023 0.87662338 0.54545455 0.86111111 0.13636364 0.69230769
65  0.023166023 0.79870130 0.50000000 0.69444444 0.04545455 0.53846154
66  0.019305019 0.70129870 0.50000000 0.80555556 0.13636364 0.46153846
67  0.023166023 0.77922078 0.45454545 0.80555556 0.13636364 0.53846154
68  0.023166023 0.70129870 0.45454545 0.88888889 0.13636364 0.53846154
69  0.023166023 0.62987013 0.40909091 0.77777778 0.09090909 0.61538462
70  0.023166023 0.57142857 0.40909091 0.94444444 0.09090909 0.61538462
71  0.023166023 0.72727273 0.40909091 0.77777778 0.09090909 0.69230769
72  0.027027027 0.61688312 0.36363636 1.00000000 0.09090909 0.46153846
73  0.027027027 0.80519481 0.36363636 0.66666667 0.09090909 0.69230769
74  0.027027027 0.77922078 0.36363636 0.94444444 0.09090909 1.00000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.18181818 0.76923077
76  0.027027027 0.38311688 0.40909091 0.94444444 0.09090909 0.76923077
77  0.027027027 0.62987013 0.40909091 0.75000000 0.18181818 0.69230769
78  0.027027027 0.55844156 0.45454545 0.83333333 0.09090909 0.53846154
79  0.027027027 0.45454545 0.45454545 0.69444444 0.22727273 0.23076923
80  0.027027027 0.61038961 0.40909091 0.80555556 0.18181818 0.53846154
81  0.030888031 0.64935065 0.45454545 0.72222222 0.31818182 0.53846154
82  0.027027027 0.82467532 0.45454545 0.69444444 0.31818182 0.53846154
83  0.027027027 0.57792208 0.45454545 0.66666667 0.45454545 0.53846154
84  0.023166023 0.85714286 0.45454545 0.52777778 0.40909091 0.46153846
85  0.011583012 0.33766234 0.45454545 0.58333333 0.50000000 0.38461538
86  0.023166023 0.33116883 0.40909091 0.47222222 0.54545455 0.38461538
87  0.030888031 0.55194805 0.31818182 0.72222222 0.59090909 0.30769231
88  0.030888031 0.44805195 0.22727273 0.33333333 0.72727273 0.23076923
89  0.034749035 0.64285714 0.18181818 0.38888889 0.68181818 0.15384615
90  0.034749035 0.39610390 0.18181818 0.44444444 0.77272727 0.15384615
91  0.034749035 0.42857143 0.18181818 0.33333333 0.77272727 0.15384615
92  0.034749035 0.26623377 0.13636364 0.38888889 0.81818182 0.15384615
93  0.034749035 0.32467532 0.09090909 0.22222222 0.81818182 0.53846154
94  0.034749035 0.25324675 0.00000000 0.16666667 0.81818182 0.61538462
95  0.034749035 0.24675325 0.00000000 0.27777778 0.95454545 0.61538462
96  0.034749035 0.39610390 0.04545455 0.19444444 1.00000000 0.53846154
97  0.034749035 0.12337662 0.04545455 0.30555556 0.95454545 0.53846154
98  0.030888031 0.15584416 0.00000000 0.27777778 0.95454545 0.53846154
99  0.030888031 0.07792208 0.00000000 0.00000000 0.95454545 0.53846154
100 0.027027027 0.07792208 0.00000000 0.05555556 0.86363636 0.53846154
101 0.023166023 0.07142857 0.00000000 0.25000000 0.90909091 0.53846154
    B_PLNT_PRES_OP B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_CL2_VAL past_data
2        0.5000000    0.93333333     0.194148936    0.284403670 0.2727273
3        0.5714286    0.93333333     0.199468085    0.284403670 0.4545455
4        0.5714286    0.93333333     0.242021277    0.284403670 0.3636364
5        0.5000000    0.86666667     0.260638298    0.284403670 0.3636364
6        0.5714286    0.86666667     0.289893617    0.238532110 0.3636364
7        0.6428571    0.86666667     0.276595745    0.220183486 0.3636364
8        0.5714286    0.86666667     0.303191489    0.201834862 0.3636364
9        0.7142857    0.80000000     0.348404255    0.174311927 0.3636364
10       0.5714286    0.80000000     0.345744681    0.155963303 0.2727273
11       0.5000000    0.80000000     0.377659574    0.137614679 0.3636364
12       0.5000000    0.80000000     0.375000000    0.100917431 0.3636364
13       0.5000000    0.80000000     0.396276596    0.082568807 0.4545455
14       0.5000000    0.80000000     0.375000000    0.064220183 0.4545455
15       0.5000000    0.73333333     0.375000000    0.045871560 0.4545455
16       0.5000000    0.73333333     0.359042553    0.045871560 0.4545455
17       0.5000000    0.73333333     0.351063830    0.036697248 0.4545455
18       0.5000000    0.73333333     0.327127660    0.018348624 0.4545455
19       0.5000000    0.73333333     0.324468085    0.009174312 0.4545455
20       0.5714286    0.66666667     0.321808511    0.009174312 0.3636364
21       0.5000000    0.66666667     0.297872340    0.009174312 0.4545455
22       0.5000000    0.60000000     0.279255319    0.018348624 0.3636364
23       0.5714286    0.60000000     0.265957447    0.000000000 0.4545455
24       0.5714286    0.53333333     0.247340426    0.000000000 0.3636364
25       0.5000000    0.53333333     0.234042553    0.009174312 0.3636364
26       0.5000000    0.53333333     0.228723404    0.009174312 0.4545455
27       0.5000000    0.46666667     0.228723404    0.027522936 0.4545455
28       0.5000000    0.46666667     0.228723404    0.045871560 0.4545455
29       0.5000000    0.46666667     0.223404255    0.064220183 0.3636364
30       0.4285714    0.40000000     0.226063830    0.082568807 0.3636364
31       0.4285714    0.40000000     0.204787234    0.064220183 0.4545455
32       0.5000000    0.40000000     1.000000000    0.357798165 0.4545455
33       0.5000000    0.33333333     0.319148936    0.568807339 0.3636364
34       0.5000000    0.33333333     0.194148936    0.568807339 0.4545455
35       0.5000000    0.33333333     0.175531915    0.596330275 0.4545455
36       0.5000000    0.33333333     0.172872340    0.605504587 0.4545455
37       0.5000000    0.33333333     0.170212766    0.605504587 0.3636364
38       0.5000000    0.33333333     0.170212766    0.577981651 0.3636364
39       0.5000000    0.33333333     0.164893617    0.577981651 0.4545455
40       0.5000000    0.33333333     0.175531915    0.605504587 0.4545455
41       0.5714286    0.33333333     0.180851064    0.642201835 0.3636364
42       0.5714286    0.33333333     0.196808511    0.669724771 0.3636364
43       0.5714286    0.33333333     0.215425532    0.724770642 0.3636364
44       0.5714286    0.33333333     0.231382979    0.770642202 0.3636364
45       0.5714286    0.33333333     0.226063830    0.752293578 0.3636364
46       0.5000000    0.33333333     0.207446809    0.770642202 0.4545455
47       0.4285714    0.33333333     0.204787234    0.770642202 0.5454545
48       0.4285714    0.40000000     0.156914894    0.761467890 0.4545455
49       0.4285714    0.40000000     0.167553191    0.779816514 0.5454545
50       0.4285714    0.40000000     0.223404255    0.807339450 0.5454545
51       0.4285714    0.40000000     0.228723404    0.798165138 0.5454545
52       0.4285714    0.40000000     0.215425532    0.798165138 0.5454545
53       0.4285714    0.46666667     0.114361702    0.779816514 0.5454545
54       0.4285714    0.46666667     0.186170213    0.798165138 0.5454545
55       0.5000000    0.40000000     0.202127660    0.816513761 0.5454545
56       0.4285714    0.33333333     0.172872340    0.798165138 0.5454545
57       0.5000000    0.26666667     0.164893617    0.779816514 0.5454545
58       0.5714286    0.26666667     0.170212766    0.779816514 0.5454545
59       0.6428571    0.26666667     0.207446809    0.816513761 0.4545455
60       0.7142857    0.26666667     0.202127660    0.816513761 0.3636364
61       0.6428571    0.26666667     0.196808511    0.844036697 0.2727273
62       0.6428571    0.26666667     0.191489362    0.853211009 0.3636364
63       0.6428571    0.26666667     0.148936170    0.844036697 0.3636364
64       0.5714286    0.26666667     0.204787234    0.862385321 0.3636364
65       0.5000000    0.26666667     0.220744681    0.853211009 0.3636364
66       0.4285714    0.20000000     0.226063830    0.871559633 0.4545455
67       0.4285714    0.13333333     0.130319149    0.871559633 0.5454545
68       0.5000000    0.13333333     0.090425532    0.889908257 0.4545455
69       0.5000000    0.06666667     0.061170213    0.899082569 0.4545455
70       0.5000000    0.06666667     0.050531915    0.899082569 0.4545455
71       0.5714286    0.06666667     0.029255319    0.908256881 0.4545455
72       0.3571429    0.00000000     0.023936170    0.917431193 0.4545455
73       0.5714286    0.00000000     0.042553191    0.944954128 0.6363636
74       1.0000000    0.00000000     0.039893617    0.954128440 0.4545455
75       0.7857143    0.00000000     0.026595745    0.963302752 0.0000000
76       0.7142857    0.00000000     0.007978723    0.963302752 0.1818182
77       0.6428571    0.00000000     0.010638298    0.981651376 0.2727273
78       0.4285714    0.00000000     0.021276596    1.000000000 0.3636364
79       0.0000000    0.00000000     0.082446809    0.972477064 0.5454545
80       0.5000000    0.00000000     0.023936170    0.972477064 1.0000000
81       0.5000000    0.00000000     0.000000000    0.972477064 0.5454545
82       0.5000000    0.06666667     0.029255319    0.972477064 0.4545455
83       0.5000000    0.06666667     0.042553191    0.944954128 0.4545455
84       0.5000000    0.06666667     0.055851064    0.935779817 0.4545455
85       0.5000000    0.06666667     0.045212766    0.926605505 0.5454545
86       0.5000000    0.06666667     0.058510638    0.935779817 0.4545455
87       0.5000000    0.06666667     0.087765957    0.926605505 0.4545455
88       0.4285714    0.06666667     0.069148936    0.926605505 0.4545455
89       0.4285714    0.06666667     0.085106383    0.917431193 0.5454545
90       0.5000000    0.06666667     0.119680851    0.889908257 0.5454545
91       0.5714286    0.06666667     0.162234043    0.889908257 0.5454545
92       0.5000000    0.06666667     0.156914894    0.889908257 0.4545455
93       0.5714286    0.06666667     0.159574468    0.880733945 0.4545455
94       0.5714286    0.13333333     0.135638298    0.871559633 0.4545455
95       0.5714286    0.13333333     0.180851064    0.889908257 0.4545455
96       0.5714286    0.13333333     0.188829787    0.880733945 0.4545455
97       0.5714286    0.20000000     0.098404255    0.871559633 0.4545455
98       0.5714286    0.13333333     0.159574468    0.862385321 0.4545455
99       0.5714286    0.13333333     0.154255319    0.862385321 0.5454545
100      0.5000000    0.13333333     0.188829787    0.853211009 0.4545455
101      0.5000000    0.13333333     0.223404255    0.844036697 0.4545455

$model.list
$model.list$response
[1] "B_PLNT_FLOW_OP"

$model.list$variables
 [1] "B_CL2_VAL"       "B_TURB_VAL"      "B_PH_VAL"        "B_COND_VAL"     
 [5] "B_TEMP_VAL"      "B_PRES_OP"       "B_PLNT_PRES_OP"  "B_PLNT_PH_VAL"  
 [9] "B_PLNT_TURB_VAL" "B_PLNT_CL2_VAL"  "past_data"      


$err.fct
function (x, y) 
{
    1/2 * (y - x)^2
}
<bytecode: 0x7fd6aa25d4a8>
<environment: 0x7fd6ab9825b8>
attr(,"type")
[1] "sse"

$act.fct
function (x) 
{
    1/(1 + exp(-x))
}
<bytecode: 0x7fd6aa25ca88>
<environment: 0x7fd6ab982120>
attr(,"type")
[1] "logistic"

$linear.output
[1] TRUE

$data
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.00000000 0.61538462
3   0.996138996 0.34415584 0.27272727 0.33333333 0.00000000 0.61538462
4   0.988416988 0.24675325 0.31818182 0.52777778 0.04545455 0.69230769
5   0.984555985 0.29220779 0.36363636 0.50000000 0.04545455 0.61538462
6   0.984555985 0.22077922 0.36363636 0.55555556 0.04545455 0.69230769
7   0.949806950 0.22077922 0.40909091 0.22222222 0.09090909 0.69230769
8   0.972972973 0.12987013 0.40909091 0.41666667 0.13636364 0.69230769
9   0.969111969 0.12987013 0.45454545 0.22222222 0.22727273 0.76923077
10  0.961389961 0.16883117 0.45454545 0.41666667 0.22727273 0.69230769
11  0.965250965 0.18831169 0.45454545 0.25000000 0.27272727 0.53846154
12  0.949806950 0.29870130 0.45454545 0.38888889 0.27272727 0.46153846
13  0.961389961 0.52597403 0.50000000 0.11111111 0.36363636 0.46153846
14  0.961389961 0.50649351 0.45454545 0.36111111 0.36363636 0.46153846
15  0.961389961 0.51948052 0.50000000 0.16666667 0.45454545 0.46153846
16  0.961389961 0.31818182 0.45454545 0.36111111 0.36363636 0.38461538
17  0.976833977 0.43506494 0.45454545 0.47222222 0.45454545 0.38461538
18  0.980694981 0.51298701 0.36363636 0.55555556 0.36363636 0.38461538
19  0.980694981 0.50000000 0.36363636 0.47222222 0.45454545 0.30769231
20  0.980694981 0.44805195 0.40909091 0.50000000 0.40909091 0.30769231
21  0.972972973 0.43506494 0.40909091 0.52777778 0.45454545 0.23076923
22  0.976833977 0.33116883 0.45454545 0.44444444 0.36363636 0.23076923
23  0.980694981 0.19480519 0.50000000 0.58333333 0.45454545 0.61538462
24  0.976833977 0.25324675 0.50000000 0.50000000 0.40909091 0.61538462
25  0.969111969 0.06493506 0.54545455 0.55555556 0.40909091 0.53846154
26  0.969111969 0.22077922 0.59090909 0.50000000 0.40909091 0.53846154
27  0.965250965 0.10389610 0.63636364 0.47222222 0.36363636 0.53846154
28  0.961389961 0.05194805 0.63636364 0.47222222 0.50000000 0.53846154
29  0.961389961 0.30519481 0.72727273 0.47222222 0.40909091 0.46153846
30  0.961389961 0.00000000 0.72727273 0.55555556 0.45454545 0.46153846
31  0.961389961 0.16233766 0.72727273 0.36111111 0.40909091 0.46153846
32  0.953667954 0.18181818 0.68181818 0.58333333 0.40909091 0.53846154
33  0.957528958 0.14285714 0.72727273 0.41666667 0.45454545 0.53846154
34  0.667953668 0.46753247 0.68181818 0.61111111 0.31818182 0.53846154
35  0.019305019 0.47402597 0.72727273 0.66666667 0.36363636 0.53846154
36  0.015444015 0.61038961 0.72727273 0.50000000 0.31818182 0.53846154
37  0.030888031 0.42207792 0.72727273 0.52777778 0.36363636 0.53846154
38  0.023166023 0.53896104 0.77272727 0.33333333 0.36363636 0.53846154
39  0.003861004 0.48051948 0.77272727 0.63888889 0.27272727 0.46153846
40  0.023166023 0.57792208 0.81818182 0.50000000 0.31818182 0.53846154
41  0.000000000 0.74025974 0.81818182 0.50000000 0.27272727 0.53846154
42  0.019305019 0.60389610 0.81818182 0.55555556 0.27272727 0.61538462
43  0.023166023 0.56493506 0.86363636 0.58333333 0.22727273 0.53846154
44  0.023166023 0.37012987 0.90909091 0.63888889 0.27272727 0.46153846
45  0.023166023 0.62337662 0.90909091 0.58333333 0.22727273 0.46153846
46  0.023166023 0.53246753 0.95454545 0.69444444 0.22727273 0.38461538
47  0.019305019 0.34415584 0.95454545 0.47222222 0.27272727 0.23076923
48  0.023166023 0.50000000 1.00000000 0.55555556 0.22727273 0.15384615
49  0.023166023 0.21428571 0.95454545 0.61111111 0.27272727 0.15384615
50  0.023166023 0.28571429 1.00000000 0.50000000 0.22727273 0.15384615
51  0.023166023 0.25324675 0.95454545 0.66666667 0.27272727 0.15384615
52  0.019305019 0.38311688 0.95454545 0.58333333 0.27272727 0.15384615
53  0.023166023 0.37012987 0.90909091 0.83333333 0.18181818 0.00000000
54  0.023166023 0.48051948 0.81818182 0.61111111 0.18181818 0.00000000
55  0.019305019 0.77272727 0.72727273 0.88888889 0.09090909 0.15384615
56  0.019305019 0.70129870 0.68181818 0.63888889 0.13636364 0.07692308
57  0.023166023 0.79870130 0.63636364 0.83333333 0.09090909 0.30769231
58  0.023166023 0.91558442 0.63636364 0.77777778 0.18181818 0.53846154
59  0.019305019 1.00000000 0.59090909 0.83333333 0.09090909 0.69230769
60  0.023166023 0.82467532 0.63636364 0.75000000 0.18181818 0.84615385
61  0.023166023 0.85714286 0.63636364 0.72222222 0.13636364 0.84615385
62  0.019305019 0.72727273 0.63636364 0.75000000 0.18181818 0.76923077
63  0.023166023 0.80519481 0.59090909 0.69444444 0.09090909 0.69230769
64  0.023166023 0.87662338 0.54545455 0.86111111 0.13636364 0.69230769
65  0.023166023 0.79870130 0.50000000 0.69444444 0.04545455 0.53846154
66  0.019305019 0.70129870 0.50000000 0.80555556 0.13636364 0.46153846
67  0.023166023 0.77922078 0.45454545 0.80555556 0.13636364 0.53846154
68  0.023166023 0.70129870 0.45454545 0.88888889 0.13636364 0.53846154
69  0.023166023 0.62987013 0.40909091 0.77777778 0.09090909 0.61538462
70  0.023166023 0.57142857 0.40909091 0.94444444 0.09090909 0.61538462
71  0.023166023 0.72727273 0.40909091 0.77777778 0.09090909 0.69230769
72  0.027027027 0.61688312 0.36363636 1.00000000 0.09090909 0.46153846
73  0.027027027 0.80519481 0.36363636 0.66666667 0.09090909 0.69230769
74  0.027027027 0.77922078 0.36363636 0.94444444 0.09090909 1.00000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.18181818 0.76923077
76  0.027027027 0.38311688 0.40909091 0.94444444 0.09090909 0.76923077
77  0.027027027 0.62987013 0.40909091 0.75000000 0.18181818 0.69230769
78  0.027027027 0.55844156 0.45454545 0.83333333 0.09090909 0.53846154
79  0.027027027 0.45454545 0.45454545 0.69444444 0.22727273 0.23076923
80  0.027027027 0.61038961 0.40909091 0.80555556 0.18181818 0.53846154
81  0.030888031 0.64935065 0.45454545 0.72222222 0.31818182 0.53846154
82  0.027027027 0.82467532 0.45454545 0.69444444 0.31818182 0.53846154
83  0.027027027 0.57792208 0.45454545 0.66666667 0.45454545 0.53846154
84  0.023166023 0.85714286 0.45454545 0.52777778 0.40909091 0.46153846
85  0.011583012 0.33766234 0.45454545 0.58333333 0.50000000 0.38461538
86  0.023166023 0.33116883 0.40909091 0.47222222 0.54545455 0.38461538
87  0.030888031 0.55194805 0.31818182 0.72222222 0.59090909 0.30769231
88  0.030888031 0.44805195 0.22727273 0.33333333 0.72727273 0.23076923
89  0.034749035 0.64285714 0.18181818 0.38888889 0.68181818 0.15384615
90  0.034749035 0.39610390 0.18181818 0.44444444 0.77272727 0.15384615
91  0.034749035 0.42857143 0.18181818 0.33333333 0.77272727 0.15384615
92  0.034749035 0.26623377 0.13636364 0.38888889 0.81818182 0.15384615
93  0.034749035 0.32467532 0.09090909 0.22222222 0.81818182 0.53846154
94  0.034749035 0.25324675 0.00000000 0.16666667 0.81818182 0.61538462
95  0.034749035 0.24675325 0.00000000 0.27777778 0.95454545 0.61538462
96  0.034749035 0.39610390 0.04545455 0.19444444 1.00000000 0.53846154
97  0.034749035 0.12337662 0.04545455 0.30555556 0.95454545 0.53846154
98  0.030888031 0.15584416 0.00000000 0.27777778 0.95454545 0.53846154
99  0.030888031 0.07792208 0.00000000 0.00000000 0.95454545 0.53846154
100 0.027027027 0.07792208 0.00000000 0.05555556 0.86363636 0.53846154
101 0.023166023 0.07142857 0.00000000 0.25000000 0.90909091 0.53846154
    B_PLNT_PRES_OP B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL
2        0.5000000    0.93333333     0.194148936      0.4545455    0.284403670
3        0.5714286    0.93333333     0.199468085      0.3636364    0.284403670
4        0.5714286    0.93333333     0.242021277      0.3636364    0.284403670
5        0.5000000    0.86666667     0.260638298      0.3636364    0.284403670
6        0.5714286    0.86666667     0.289893617      0.3636364    0.238532110
7        0.6428571    0.86666667     0.276595745      0.3636364    0.220183486
8        0.5714286    0.86666667     0.303191489      0.3636364    0.201834862
9        0.7142857    0.80000000     0.348404255      0.2727273    0.174311927
10       0.5714286    0.80000000     0.345744681      0.3636364    0.155963303
11       0.5000000    0.80000000     0.377659574      0.3636364    0.137614679
12       0.5000000    0.80000000     0.375000000      0.4545455    0.100917431
13       0.5000000    0.80000000     0.396276596      0.4545455    0.082568807
14       0.5000000    0.80000000     0.375000000      0.4545455    0.064220183
15       0.5000000    0.73333333     0.375000000      0.4545455    0.045871560
16       0.5000000    0.73333333     0.359042553      0.4545455    0.045871560
17       0.5000000    0.73333333     0.351063830      0.4545455    0.036697248
18       0.5000000    0.73333333     0.327127660      0.4545455    0.018348624
19       0.5000000    0.73333333     0.324468085      0.3636364    0.009174312
20       0.5714286    0.66666667     0.321808511      0.4545455    0.009174312
21       0.5000000    0.66666667     0.297872340      0.3636364    0.009174312
22       0.5000000    0.60000000     0.279255319      0.4545455    0.018348624
23       0.5714286    0.60000000     0.265957447      0.3636364    0.000000000
24       0.5714286    0.53333333     0.247340426      0.3636364    0.000000000
25       0.5000000    0.53333333     0.234042553      0.4545455    0.009174312
26       0.5000000    0.53333333     0.228723404      0.4545455    0.009174312
27       0.5000000    0.46666667     0.228723404      0.4545455    0.027522936
28       0.5000000    0.46666667     0.228723404      0.3636364    0.045871560
29       0.5000000    0.46666667     0.223404255      0.3636364    0.064220183
30       0.4285714    0.40000000     0.226063830      0.4545455    0.082568807
31       0.4285714    0.40000000     0.204787234      0.4545455    0.064220183
32       0.5000000    0.40000000     1.000000000      0.3636364    0.357798165
33       0.5000000    0.33333333     0.319148936      0.4545455    0.568807339
34       0.5000000    0.33333333     0.194148936      0.4545455    0.568807339
35       0.5000000    0.33333333     0.175531915      0.4545455    0.596330275
36       0.5000000    0.33333333     0.172872340      0.3636364    0.605504587
37       0.5000000    0.33333333     0.170212766      0.3636364    0.605504587
38       0.5000000    0.33333333     0.170212766      0.4545455    0.577981651
39       0.5000000    0.33333333     0.164893617      0.4545455    0.577981651
40       0.5000000    0.33333333     0.175531915      0.3636364    0.605504587
41       0.5714286    0.33333333     0.180851064      0.3636364    0.642201835
42       0.5714286    0.33333333     0.196808511      0.3636364    0.669724771
43       0.5714286    0.33333333     0.215425532      0.3636364    0.724770642
44       0.5714286    0.33333333     0.231382979      0.3636364    0.770642202
45       0.5714286    0.33333333     0.226063830      0.4545455    0.752293578
46       0.5000000    0.33333333     0.207446809      0.5454545    0.770642202
47       0.4285714    0.33333333     0.204787234      0.4545455    0.770642202
48       0.4285714    0.40000000     0.156914894      0.5454545    0.761467890
49       0.4285714    0.40000000     0.167553191      0.5454545    0.779816514
50       0.4285714    0.40000000     0.223404255      0.5454545    0.807339450
51       0.4285714    0.40000000     0.228723404      0.5454545    0.798165138
52       0.4285714    0.40000000     0.215425532      0.5454545    0.798165138
53       0.4285714    0.46666667     0.114361702      0.5454545    0.779816514
54       0.4285714    0.46666667     0.186170213      0.5454545    0.798165138
55       0.5000000    0.40000000     0.202127660      0.5454545    0.816513761
56       0.4285714    0.33333333     0.172872340      0.5454545    0.798165138
57       0.5000000    0.26666667     0.164893617      0.5454545    0.779816514
58       0.5714286    0.26666667     0.170212766      0.4545455    0.779816514
59       0.6428571    0.26666667     0.207446809      0.3636364    0.816513761
60       0.7142857    0.26666667     0.202127660      0.2727273    0.816513761
61       0.6428571    0.26666667     0.196808511      0.3636364    0.844036697
62       0.6428571    0.26666667     0.191489362      0.3636364    0.853211009
63       0.6428571    0.26666667     0.148936170      0.3636364    0.844036697
64       0.5714286    0.26666667     0.204787234      0.3636364    0.862385321
65       0.5000000    0.26666667     0.220744681      0.4545455    0.853211009
66       0.4285714    0.20000000     0.226063830      0.5454545    0.871559633
67       0.4285714    0.13333333     0.130319149      0.4545455    0.871559633
68       0.5000000    0.13333333     0.090425532      0.4545455    0.889908257
69       0.5000000    0.06666667     0.061170213      0.4545455    0.899082569
70       0.5000000    0.06666667     0.050531915      0.4545455    0.899082569
71       0.5714286    0.06666667     0.029255319      0.4545455    0.908256881
72       0.3571429    0.00000000     0.023936170      0.6363636    0.917431193
73       0.5714286    0.00000000     0.042553191      0.4545455    0.944954128
74       1.0000000    0.00000000     0.039893617      0.0000000    0.954128440
75       0.7857143    0.00000000     0.026595745      0.1818182    0.963302752
76       0.7142857    0.00000000     0.007978723      0.2727273    0.963302752
77       0.6428571    0.00000000     0.010638298      0.3636364    0.981651376
78       0.4285714    0.00000000     0.021276596      0.5454545    1.000000000
79       0.0000000    0.00000000     0.082446809      1.0000000    0.972477064
80       0.5000000    0.00000000     0.023936170      0.5454545    0.972477064
81       0.5000000    0.00000000     0.000000000      0.4545455    0.972477064
82       0.5000000    0.06666667     0.029255319      0.4545455    0.972477064
83       0.5000000    0.06666667     0.042553191      0.4545455    0.944954128
84       0.5000000    0.06666667     0.055851064      0.5454545    0.935779817
85       0.5000000    0.06666667     0.045212766      0.4545455    0.926605505
86       0.5000000    0.06666667     0.058510638      0.4545455    0.935779817
87       0.5000000    0.06666667     0.087765957      0.4545455    0.926605505
88       0.4285714    0.06666667     0.069148936      0.5454545    0.926605505
89       0.4285714    0.06666667     0.085106383      0.5454545    0.917431193
90       0.5000000    0.06666667     0.119680851      0.5454545    0.889908257
91       0.5714286    0.06666667     0.162234043      0.4545455    0.889908257
92       0.5000000    0.06666667     0.156914894      0.4545455    0.889908257
93       0.5714286    0.06666667     0.159574468      0.4545455    0.880733945
94       0.5714286    0.13333333     0.135638298      0.4545455    0.871559633
95       0.5714286    0.13333333     0.180851064      0.4545455    0.889908257
96       0.5714286    0.13333333     0.188829787      0.4545455    0.880733945
97       0.5714286    0.20000000     0.098404255      0.4545455    0.871559633
98       0.5714286    0.13333333     0.159574468      0.5454545    0.862385321
99       0.5714286    0.13333333     0.154255319      0.4545455    0.862385321
100      0.5000000    0.13333333     0.188829787      0.4545455    0.853211009
101      0.5000000    0.13333333     0.223404255      0.4545455    0.844036697
    past_data
2   0.2727273
3   0.4545455
4   0.3636364
5   0.3636364
6   0.3636364
7   0.3636364
8   0.3636364
9   0.3636364
10  0.2727273
11  0.3636364
12  0.3636364
13  0.4545455
14  0.4545455
15  0.4545455
16  0.4545455
17  0.4545455
18  0.4545455
19  0.4545455
20  0.3636364
21  0.4545455
22  0.3636364
23  0.4545455
24  0.3636364
25  0.3636364
26  0.4545455
27  0.4545455
28  0.4545455
29  0.3636364
30  0.3636364
31  0.4545455
32  0.4545455
33  0.3636364
34  0.4545455
35  0.4545455
36  0.4545455
37  0.3636364
38  0.3636364
39  0.4545455
40  0.4545455
41  0.3636364
42  0.3636364
43  0.3636364
44  0.3636364
45  0.3636364
46  0.4545455
47  0.5454545
48  0.4545455
49  0.5454545
50  0.5454545
51  0.5454545
52  0.5454545
53  0.5454545
54  0.5454545
55  0.5454545
56  0.5454545
57  0.5454545
58  0.5454545
59  0.4545455
60  0.3636364
61  0.2727273
62  0.3636364
63  0.3636364
64  0.3636364
65  0.3636364
66  0.4545455
67  0.5454545
68  0.4545455
69  0.4545455
70  0.4545455
71  0.4545455
72  0.4545455
73  0.6363636
74  0.4545455
75  0.0000000
76  0.1818182
77  0.2727273
78  0.3636364
79  0.5454545
80  1.0000000
81  0.5454545
82  0.4545455
83  0.4545455
84  0.4545455
85  0.5454545
86  0.4545455
87  0.4545455
88  0.4545455
89  0.5454545
90  0.5454545
91  0.5454545
92  0.4545455
93  0.4545455
94  0.4545455
95  0.4545455
96  0.4545455
97  0.4545455
98  0.4545455
99  0.5454545
100 0.4545455
101 0.4545455

$exclude
NULL

$net.result
$net.result[[1]]
         [,1]
2   0.4403187
3   0.3944888
4   0.3870352
5   0.4410255
6   0.3738011
7   0.3091799
8   0.3663389
9   0.2589552
10  0.3504112
11  0.4153338
12  0.4228801
13  0.4328995
14  0.4445413
15  0.4331939
16  0.4316101
17  0.4476241
18  0.4497456
19  0.4531376
20  0.3691099
21  0.4475149
22  0.4147635
23  0.3669969
24  0.3471113
25  0.4011083
26  0.4140918
27  0.3994940
28  0.4095704
29  0.3996652
30  0.4542812
31  0.4589415
32  0.3987825
33  0.4247813
34  0.4502998
35  0.4502715
36  0.4447304
37  0.4311638
38  0.4220255
39  0.4400658
40  0.4402250
41  0.3731819
42  0.3720715
43  0.3725403
44  0.3749146
45  0.3759592
46  0.4528536
47  0.5222625
48  0.5234345
49  0.5358957
50  0.5273156
51  0.5390478
52  0.5404874
53  0.5601945
54  0.5550209
55  0.4969649
56  0.5512344
57  0.4802154
58  0.4201964
59  0.3505765
60  0.2870604
61  0.3247361
62  0.3365839
63  0.3342262
64  0.4028663
65  0.4507361
66  0.5372958
67  0.5521779
68  0.4746605
69  0.4590616
70  0.4653680
71  0.4006909
72  0.6118138
73  0.4199033
74  0.1663884
75  0.2163622
76  0.2663937
77  0.3278093
78  0.5193324
79  0.9526495
80  0.5502458
81  0.4920279
82  0.4896829
83  0.4869935
84  0.4864385
85  0.4911275
86  0.4785709
87  0.5054286
88  0.5704096
89  0.5923384
90  0.5170328
91  0.4435209
92  0.4998938
93  0.4226868
94  0.4264083
95  0.4415617
96  0.4448549
97  0.4467807
98  0.4378633
99  0.4348283
100 0.4804563
101 0.4907324


$weights
$weights[[1]]
$weights[[1]][[1]]
             [,1]
 [1,]  0.33612618
 [2,]  0.05172751
 [3,]  0.14112794
 [4,] -0.14745271
 [5,]  0.18527863
 [6,]  0.31729415
 [7,] -0.06537375
 [8,] -3.60869870
 [9,]  0.39682584
[10,] -0.19046324
[11,]  0.39839623
[12,]  0.54065741

$weights[[1]][[2]]
           [,1]
[1,] 0.07619304
[2,] 1.14390144



$generalized.weights
$generalized.weights[[1]]
          [,1]       [,2]        [,3]      [,4]      [,5]        [,6]
2   0.05210100 0.14214694 -0.14851738 0.1866164 0.3195851 -0.06584577
3   0.04974845 0.13572851 -0.14181130 0.1781900 0.3051547 -0.06287261
4   0.04935859 0.13466484 -0.14069996 0.1767936 0.3027633 -0.06237989
5   0.05213707 0.14224535 -0.14862019 0.1867456 0.3198064 -0.06589136
6   0.04865704 0.13275080 -0.13870014 0.1742808 0.2984600 -0.06149326
7   0.04493304 0.12259062 -0.12808462 0.1609421 0.2756172 -0.05678683
8   0.04825505 0.13165406 -0.13755424 0.1728409 0.2959943 -0.06098523
9   0.04139391 0.11293484 -0.11799611 0.1482656 0.2539084 -0.05231405
10  0.04737768 0.12926032 -0.13505324 0.1696983 0.2906125 -0.05987639
11  0.05082465 0.13866469 -0.14487907 0.1820448 0.3117561 -0.06423271
12  0.05121090 0.13971849 -0.14598009 0.1834282 0.3141253 -0.06472086
13  0.05172245 0.14111415 -0.14743830 0.1852605 0.3172631 -0.06536736
14  0.05231657 0.14273508 -0.14913187 0.1873885 0.3209074 -0.06611821
15  0.05173747 0.14115513 -0.14748112 0.1853143 0.3173553 -0.06538635
16  0.05165666 0.14093466 -0.14725077 0.1850249 0.3168596 -0.06528422
17  0.05247408 0.14316481 -0.14958086 0.1879527 0.3218736 -0.06631727
18  0.05258255 0.14346076 -0.14989007 0.1883412 0.3225389 -0.06645436
19  0.05275616 0.14393442 -0.15038497 0.1889631 0.3236039 -0.06667378
20  0.04840493 0.13206297 -0.13798148 0.1733777 0.2969136 -0.06117464
21  0.05246849 0.14314957 -0.14956494 0.1879327 0.3218393 -0.06631022
22  0.05079541 0.13858492 -0.14479572 0.1819400 0.3115767 -0.06419576
23  0.04829071 0.13175135 -0.13765589 0.1729686 0.2962130 -0.06103029
24  0.04719209 0.12875398 -0.13452420 0.1690336 0.2894741 -0.05964184
25  0.05009215 0.13666620 -0.14279102 0.1794211 0.3072629 -0.06330697
26  0.05076096 0.13849091 -0.14469750 0.1818166 0.3113654 -0.06415222
27  0.05000853 0.13643807 -0.14255266 0.1791216 0.3067500 -0.06320129
28  0.05052871 0.13785729 -0.14403548 0.1809848 0.3099408 -0.06385871
29  0.05001740 0.13646228 -0.14257795 0.1791534 0.3068045 -0.06321251
30  0.05281475 0.14409426 -0.15055197 0.1891729 0.3239632 -0.06674782
31  0.05305383 0.14474656 -0.15123350 0.1900293 0.3254298 -0.06704998
32  0.04997163 0.13633741 -0.14244748 0.1789894 0.3065237 -0.06315466
33  0.05130805 0.13998354 -0.14625702 0.1837762 0.3147212 -0.06484363
34  0.05261090 0.14353810 -0.14997089 0.1884428 0.3227128 -0.06649019
35  0.05260945 0.14353416 -0.14996676 0.1884376 0.3227040 -0.06648836
36  0.05232622 0.14276143 -0.14915940 0.1874231 0.3209667 -0.06613042
37  0.05163389 0.14087253 -0.14718585 0.1849433 0.3167199 -0.06525544
38  0.05116721 0.13959929 -0.14585555 0.1832717 0.3138573 -0.06466564
39  0.05208809 0.14211172 -0.14848058 0.1865702 0.3195059 -0.06582946
40  0.05209622 0.14213390 -0.14850375 0.1865993 0.3195558 -0.06583973
41  0.04862387 0.13266032 -0.13860560 0.1741620 0.2982566 -0.06145135
42  0.04856432 0.13249783 -0.13843584 0.1739487 0.2978913 -0.06137608
43  0.04858947 0.13256647 -0.13850754 0.1740388 0.2980456 -0.06140787
44  0.04871660 0.13291329 -0.13886991 0.1744941 0.2988254 -0.06156853
45  0.04877237 0.13306547 -0.13902891 0.1746939 0.2991675 -0.06163902
46  0.05274162 0.14389474 -0.15034351 0.1889110 0.3235147 -0.06665540
47  0.05641676 0.15392161 -0.16081973 0.2020747 0.3460578 -0.07130007
48  0.05648211 0.15409991 -0.16100602 0.2023088 0.3464587 -0.07138267
49  0.05718688 0.15602272 -0.16301501 0.2048331 0.3507817 -0.07227336
50  0.05669963 0.15469337 -0.16162608 0.2030879 0.3477929 -0.07165757
51  0.05736822 0.15651748 -0.16353195 0.2054827 0.3518940 -0.07250254
52  0.05745148 0.15674465 -0.16376929 0.2057809 0.3524048 -0.07260777
53  0.05862167 0.15993727 -0.16710499 0.2099723 0.3595826 -0.07408667
54  0.05830866 0.15908329 -0.16621274 0.2088512 0.3576627 -0.07369108
55  0.05503915 0.15016310 -0.15689279 0.1971404 0.3376077 -0.06955905
56  0.05808230 0.15846569 -0.16556746 0.2080403 0.3562741 -0.07340500
57  0.05415513 0.14775122 -0.15437281 0.1939739 0.3321851 -0.06844180
58  0.05107367 0.13934408 -0.14558890 0.1829367 0.3132835 -0.06454742
59  0.04738693 0.12928558 -0.13507962 0.1697315 0.2906693 -0.05988809
60  0.04347241 0.11860561 -0.12392102 0.1557104 0.2666578 -0.05494088
61  0.04589098 0.12520418 -0.13081531 0.1643733 0.2814932 -0.05799749
62  0.04658983 0.12711083 -0.13280741 0.1668764 0.2857799 -0.05888070
63  0.04645264 0.12673656 -0.13241637 0.1663850 0.2849384 -0.05870733
64  0.05018308 0.13691429 -0.14305022 0.1797468 0.3078207 -0.06342189
65  0.05263323 0.14359902 -0.15003453 0.1885228 0.3228498 -0.06651841
66  0.05726727 0.15624205 -0.16324417 0.2051211 0.3512748 -0.07237496
67  0.05813849 0.15861901 -0.16572765 0.2082416 0.3566188 -0.07347602
68  0.05386564 0.14696140 -0.15354760 0.1929370 0.3304094 -0.06807594
69  0.05306000 0.14476339 -0.15125109 0.1900514 0.3254676 -0.06705778
70  0.05338459 0.14564896 -0.15217635 0.1912140 0.3274586 -0.06746799
71  0.05007054 0.13660725 -0.14272942 0.1793437 0.3071304 -0.06327966
72  0.06203475 0.16924915 -0.17683419 0.2221973 0.3805183 -0.07840015
73  0.05105867 0.13930316 -0.14554615 0.1828830 0.3131915 -0.06452847
74  0.03098488 0.08453592 -0.08832446 0.1109823 0.1900598 -0.03915901
75  0.03752378 0.10237597 -0.10696403 0.1344034 0.2301691 -0.04742293
76  0.04197301 0.11451479 -0.11964687 0.1503398 0.2574605 -0.05304592
77  0.04607460 0.12570513 -0.13133871 0.1650309 0.2826195 -0.05822954
78  0.05625402 0.15347762 -0.16035585 0.2014918 0.3450596 -0.07109441
79  0.23498499 0.64110859 -0.66984041 0.8416740 1.4413871 -0.29697643
80  0.05802356 0.15830544 -0.16540003 0.2078300 0.3559138 -0.07333076
81  0.05477663 0.14944686 -0.15614445 0.1962001 0.3359974 -0.06922727
82  0.05465254 0.14910832 -0.15579073 0.1957556 0.3352362 -0.06907044
83  0.05451068 0.14872127 -0.15538634 0.1952475 0.3343660 -0.06889116
84  0.05448147 0.14864156 -0.15530306 0.1951428 0.3341868 -0.06885423
85  0.05472894 0.14931675 -0.15600850 0.1960292 0.3357048 -0.06916699
86  0.05406926 0.14751694 -0.15412804 0.1936664 0.3316584 -0.06833328
87  0.05549360 0.15140295 -0.15818820 0.1987681 0.3403952 -0.07013337
88  0.05925317 0.16166018 -0.16890512 0.2122342 0.3634562 -0.07488476
89  0.06067729 0.16554561 -0.17296468 0.2173352 0.3721917 -0.07668458
90  0.05612694 0.15313091 -0.15999360 0.2010366 0.3442801 -0.07093380
91  0.05226446 0.14259291 -0.14898333 0.1872019 0.3205878 -0.06605236
92  0.05519576 0.15059037 -0.15733921 0.1977013 0.3385683 -0.06975697
93  0.05120102 0.13969152 -0.14595192 0.1833928 0.3140647 -0.06470837
94  0.05139115 0.14021025 -0.14649390 0.1840738 0.3152309 -0.06494866
95  0.05216444 0.14232003 -0.14869822 0.1868436 0.3199743 -0.06592595
96  0.05233259 0.14277878 -0.14917753 0.1874459 0.3210057 -0.06613846
97  0.05243097 0.14304721 -0.14945799 0.1877983 0.3216092 -0.06626280
98  0.05197570 0.14180510 -0.14816021 0.1861676 0.3188166 -0.06568742
99  0.05182086 0.14138263 -0.14771882 0.1856130 0.3178668 -0.06549173
100 0.05416772 0.14778556 -0.15440870 0.1940190 0.3322623 -0.06845771
101 0.05470803 0.14925970 -0.15594890 0.1959543 0.3355766 -0.06914057
          [,7]      [,8]       [,9]     [,10]     [,11]
2    -3.634755 0.3996911 -0.1918385 0.4012728 0.5445612
3    -3.470633 0.3816436 -0.1831763 0.3831539 0.5199723
4    -3.443435 0.3786528 -0.1817408 0.3801513 0.5158974
5    -3.637271 0.3999678 -0.1919713 0.4015506 0.5449382
6    -3.394492 0.3732709 -0.1791576 0.3747480 0.5085648
7    -3.134692 0.3447023 -0.1654457 0.3460664 0.4696414
8    -3.366448 0.3701870 -0.1776775 0.3716520 0.5043632
9    -2.887790 0.3175520 -0.1524144 0.3188087 0.4326504
10   -3.305239 0.3634563 -0.1744470 0.3648946 0.4951929
11   -3.545712 0.3898996 -0.1871389 0.3914426 0.5312208
12   -3.572658 0.3928627 -0.1885611 0.3944174 0.5352578
13   -3.608346 0.3967871 -0.1904446 0.3983573 0.5406046
14   -3.649794 0.4013448 -0.1926322 0.4029331 0.5468143
15   -3.609394 0.3969023 -0.1904999 0.3984730 0.5407616
16   -3.603756 0.3962824 -0.1902024 0.3978506 0.5399170
17   -3.660782 0.4025531 -0.1932121 0.4041462 0.5484606
18   -3.668350 0.4033853 -0.1936116 0.4049816 0.5495944
19   -3.680462 0.4047171 -0.1942508 0.4063188 0.5514090
20   -3.376904 0.3713368 -0.1782293 0.3728063 0.5059297
21   -3.660393 0.4025103 -0.1931916 0.4041032 0.5484022
22   -3.543672 0.3896753 -0.1870312 0.3912174 0.5309151
23   -3.368935 0.3704606 -0.1778088 0.3719266 0.5047359
24   -3.292292 0.3620325 -0.1737636 0.3634652 0.4932531
25   -3.494610 0.3842803 -0.1844418 0.3858010 0.5235646
26   -3.541269 0.3894110 -0.1869044 0.3909520 0.5305550
27   -3.488777 0.3836388 -0.1841339 0.3851570 0.5226906
28   -3.525067 0.3876294 -0.1860492 0.3891634 0.5281276
29   -3.489396 0.3837069 -0.1841666 0.3852253 0.5227834
30   -3.684549 0.4051666 -0.1944665 0.4067700 0.5520213
31   -3.701228 0.4070007 -0.1953468 0.4086114 0.5545202
32   -3.486203 0.3833557 -0.1839980 0.3848728 0.5223050
33   -3.579436 0.3936080 -0.1889188 0.3951656 0.5362732
34   -3.670328 0.4036028 -0.1937159 0.4052000 0.5498907
35   -3.670227 0.4035917 -0.1937106 0.4051888 0.5498756
36   -3.650468 0.4014189 -0.1926677 0.4030075 0.5469152
37   -3.602168 0.3961077 -0.1901185 0.3976752 0.5396789
38   -3.569610 0.3925275 -0.1884002 0.3940809 0.5348012
39   -3.633854 0.3995920 -0.1917909 0.4011734 0.5444262
40   -3.634421 0.3996544 -0.1918208 0.4012360 0.5445112
41   -3.392178 0.3730164 -0.1790355 0.3744926 0.5082182
42   -3.388023 0.3725596 -0.1788162 0.3740339 0.5075957
43   -3.389778 0.3727525 -0.1789089 0.3742277 0.5078586
44   -3.398647 0.3737278 -0.1793769 0.3752067 0.5091873
45   -3.402538 0.3741556 -0.1795823 0.3756363 0.5097703
46   -3.679447 0.4046056 -0.1941973 0.4062068 0.5512570
47   -3.935838 0.4327993 -0.2077293 0.4345120 0.5896696
48   -3.940397 0.4333006 -0.2079699 0.4350154 0.5903527
49   -3.989564 0.4387072 -0.2105649 0.4404434 0.5977189
50   -3.955572 0.4349693 -0.2087708 0.4366907 0.5926262
51   -4.002215 0.4400984 -0.2112326 0.4418400 0.5996143
52   -4.008024 0.4407371 -0.2115392 0.4424813 0.6004846
53   -4.089661 0.4497142 -0.2158479 0.4514939 0.6127154
54   -4.067824 0.4473130 -0.2146954 0.4490832 0.6094439
55   -3.839731 0.4222311 -0.2026569 0.4239020 0.5752709
56   -4.052032 0.4455764 -0.2138619 0.4473397 0.6070779
57   -3.778059 0.4154493 -0.1994019 0.4170934 0.5660310
58   -3.563084 0.3918099 -0.1880558 0.3933605 0.5338235
59   -3.305885 0.3635273 -0.1744810 0.3649659 0.4952896
60   -3.032793 0.3334972 -0.1600676 0.3348169 0.4543749
61   -3.201522 0.3520512 -0.1689729 0.3534444 0.4796539
62   -3.250275 0.3574123 -0.1715460 0.3588267 0.4869582
63   -3.240705 0.3563599 -0.1710409 0.3577702 0.4855244
64   -3.500954 0.3849778 -0.1847766 0.3865013 0.5245150
65   -3.671885 0.4037740 -0.1937981 0.4053719 0.5501240
66   -3.995173 0.4393239 -0.2108609 0.4410625 0.5985592
67   -4.055952 0.4460075 -0.2140688 0.4477725 0.6076652
68   -3.757863 0.4132285 -0.1983359 0.4148638 0.5630052
69   -3.701659 0.4070481 -0.1953696 0.4086589 0.5545847
70   -3.724303 0.4095381 -0.1965647 0.4111588 0.5579773
71   -3.493103 0.3841145 -0.1843622 0.3856346 0.5233387
72   -4.327769 0.4758975 -0.2284150 0.4777808 0.6483890
73   -3.562038 0.3916949 -0.1880005 0.3932450 0.5336667
74   -2.161618 0.2376995 -0.1140879 0.2386401 0.3238549
75   -2.617795 0.2878624 -0.1381644 0.2890016 0.3921996
76   -2.928190 0.3219946 -0.1545467 0.3232688 0.4387031
77   -3.214331 0.3534597 -0.1696489 0.3548585 0.4815730
78   -3.924485 0.4315509 -0.2071301 0.4332587 0.5879687
79  -16.393406 1.8026795 -0.8652264 1.8098134 2.4560700
80   -4.047934 0.4451258 -0.2136456 0.4468873 0.6064639
81   -3.821417 0.4202171 -0.2016903 0.4218801 0.5725270
82   -3.812760 0.4192652 -0.2012334 0.4209244 0.5712300
83   -3.802863 0.4181769 -0.2007110 0.4198318 0.5697472
84   -3.800825 0.4179528 -0.2006035 0.4196068 0.5694419
85   -3.818090 0.4198512 -0.2015147 0.4215128 0.5720285
86   -3.772068 0.4147905 -0.1990857 0.4164320 0.5651335
87   -3.871435 0.4257173 -0.2043302 0.4274020 0.5800207
88   -4.133716 0.4545587 -0.2181731 0.4563576 0.6193159
89   -4.233068 0.4654838 -0.2234168 0.4673259 0.6342009
90   -3.915619 0.4305760 -0.2066622 0.4322799 0.5866405
91   -3.646159 0.4009451 -0.1924403 0.4025318 0.5462697
92   -3.850657 0.4234325 -0.2032335 0.4251081 0.5769077
93   -3.571969 0.3927869 -0.1885247 0.3943413 0.5351545
94   -3.585233 0.3942455 -0.1892247 0.3958056 0.5371418
95   -3.639181 0.4001778 -0.1920721 0.4017614 0.5452243
96   -3.650911 0.4014677 -0.1926912 0.4030565 0.5469817
97   -3.657775 0.4022225 -0.1930534 0.4038142 0.5480101
98   -3.626014 0.3987299 -0.1913771 0.4003078 0.5432516
99   -3.615211 0.3975420 -0.1908070 0.3991152 0.5416331
100  -3.778937 0.4155458 -0.1994482 0.4171903 0.5661626
101  -3.816631 0.4196909 -0.2014377 0.4213517 0.5718100


$startweights
$startweights[[1]]
$startweights[[1]][[1]]
             [,1]
 [1,] -0.07356440
 [2,] -0.03763417
 [3,] -0.68166048
 [4,] -0.32427027
 [5,]  0.06016044
 [6,] -0.58889449
 [7,]  0.53149619
 [8,] -1.51839408
 [9,]  0.30655786
[10,] -1.53644982
[11,] -0.30097613
[12,] -0.52827990

$startweights[[1]][[2]]
            [,1]
[1,] -0.65209478
[2,] -0.05689678



$result.matrix
                                     [,1]
error                         0.093708664
reached.threshold             0.009708031
steps                       345.000000000
Intercept.to.1layhid1         0.336126176
B_CL2_VAL.to.1layhid1         0.051727505
B_TURB_VAL.to.1layhid1        0.141127943
B_PH_VAL.to.1layhid1         -0.147452711
B_COND_VAL.to.1layhid1        0.185278628
B_TEMP_VAL.to.1layhid1        0.317294147
B_PRES_OP.to.1layhid1        -0.065373750
B_PLNT_PRES_OP.to.1layhid1   -3.608698705
B_PLNT_PH_VAL.to.1layhid1     0.396825842
B_PLNT_TURB_VAL.to.1layhid1  -0.190463235
B_PLNT_CL2_VAL.to.1layhid1    0.398396232
past_data.to.1layhid1         0.540657413
Intercept.to.B_PLNT_FLOW_OP   0.076193039
1layhid1.to.B_PLNT_FLOW_OP    1.143901438

attr(,"class")
[1] "nn"

$modelList$model11
$call
neuralnet(formula = nn_input, data = model_input, hidden = hidden, 
    threshold = threshold, stepmax = stepmax, rep = rep, startweights = unlist(control))

$response
    B_PLNT_CL2_VAL
2      0.284403670
3      0.284403670
4      0.284403670
5      0.284403670
6      0.238532110
7      0.220183486
8      0.201834862
9      0.174311927
10     0.155963303
11     0.137614679
12     0.100917431
13     0.082568807
14     0.064220183
15     0.045871560
16     0.045871560
17     0.036697248
18     0.018348624
19     0.009174312
20     0.009174312
21     0.009174312
22     0.018348624
23     0.000000000
24     0.000000000
25     0.009174312
26     0.009174312
27     0.027522936
28     0.045871560
29     0.064220183
30     0.082568807
31     0.064220183
32     0.357798165
33     0.568807339
34     0.568807339
35     0.596330275
36     0.605504587
37     0.605504587
38     0.577981651
39     0.577981651
40     0.605504587
41     0.642201835
42     0.669724771
43     0.724770642
44     0.770642202
45     0.752293578
46     0.770642202
47     0.770642202
48     0.761467890
49     0.779816514
50     0.807339450
51     0.798165138
52     0.798165138
53     0.779816514
54     0.798165138
55     0.816513761
56     0.798165138
57     0.779816514
58     0.779816514
59     0.816513761
60     0.816513761
61     0.844036697
62     0.853211009
63     0.844036697
64     0.862385321
65     0.853211009
66     0.871559633
67     0.871559633
68     0.889908257
69     0.899082569
70     0.899082569
71     0.908256881
72     0.917431193
73     0.944954128
74     0.954128440
75     0.963302752
76     0.963302752
77     0.981651376
78     1.000000000
79     0.972477064
80     0.972477064
81     0.972477064
82     0.972477064
83     0.944954128
84     0.935779817
85     0.926605505
86     0.935779817
87     0.926605505
88     0.926605505
89     0.917431193
90     0.889908257
91     0.889908257
92     0.889908257
93     0.880733945
94     0.871559633
95     0.889908257
96     0.880733945
97     0.871559633
98     0.862385321
99     0.862385321
100    0.853211009
101    0.844036697

$covariate
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.00000000 0.61538462
3   0.996138996 0.34415584 0.27272727 0.33333333 0.00000000 0.61538462
4   0.988416988 0.24675325 0.31818182 0.52777778 0.04545455 0.69230769
5   0.984555985 0.29220779 0.36363636 0.50000000 0.04545455 0.61538462
6   0.984555985 0.22077922 0.36363636 0.55555556 0.04545455 0.69230769
7   0.949806950 0.22077922 0.40909091 0.22222222 0.09090909 0.69230769
8   0.972972973 0.12987013 0.40909091 0.41666667 0.13636364 0.69230769
9   0.969111969 0.12987013 0.45454545 0.22222222 0.22727273 0.76923077
10  0.961389961 0.16883117 0.45454545 0.41666667 0.22727273 0.69230769
11  0.965250965 0.18831169 0.45454545 0.25000000 0.27272727 0.53846154
12  0.949806950 0.29870130 0.45454545 0.38888889 0.27272727 0.46153846
13  0.961389961 0.52597403 0.50000000 0.11111111 0.36363636 0.46153846
14  0.961389961 0.50649351 0.45454545 0.36111111 0.36363636 0.46153846
15  0.961389961 0.51948052 0.50000000 0.16666667 0.45454545 0.46153846
16  0.961389961 0.31818182 0.45454545 0.36111111 0.36363636 0.38461538
17  0.976833977 0.43506494 0.45454545 0.47222222 0.45454545 0.38461538
18  0.980694981 0.51298701 0.36363636 0.55555556 0.36363636 0.38461538
19  0.980694981 0.50000000 0.36363636 0.47222222 0.45454545 0.30769231
20  0.980694981 0.44805195 0.40909091 0.50000000 0.40909091 0.30769231
21  0.972972973 0.43506494 0.40909091 0.52777778 0.45454545 0.23076923
22  0.976833977 0.33116883 0.45454545 0.44444444 0.36363636 0.23076923
23  0.980694981 0.19480519 0.50000000 0.58333333 0.45454545 0.61538462
24  0.976833977 0.25324675 0.50000000 0.50000000 0.40909091 0.61538462
25  0.969111969 0.06493506 0.54545455 0.55555556 0.40909091 0.53846154
26  0.969111969 0.22077922 0.59090909 0.50000000 0.40909091 0.53846154
27  0.965250965 0.10389610 0.63636364 0.47222222 0.36363636 0.53846154
28  0.961389961 0.05194805 0.63636364 0.47222222 0.50000000 0.53846154
29  0.961389961 0.30519481 0.72727273 0.47222222 0.40909091 0.46153846
30  0.961389961 0.00000000 0.72727273 0.55555556 0.45454545 0.46153846
31  0.961389961 0.16233766 0.72727273 0.36111111 0.40909091 0.46153846
32  0.953667954 0.18181818 0.68181818 0.58333333 0.40909091 0.53846154
33  0.957528958 0.14285714 0.72727273 0.41666667 0.45454545 0.53846154
34  0.667953668 0.46753247 0.68181818 0.61111111 0.31818182 0.53846154
35  0.019305019 0.47402597 0.72727273 0.66666667 0.36363636 0.53846154
36  0.015444015 0.61038961 0.72727273 0.50000000 0.31818182 0.53846154
37  0.030888031 0.42207792 0.72727273 0.52777778 0.36363636 0.53846154
38  0.023166023 0.53896104 0.77272727 0.33333333 0.36363636 0.53846154
39  0.003861004 0.48051948 0.77272727 0.63888889 0.27272727 0.46153846
40  0.023166023 0.57792208 0.81818182 0.50000000 0.31818182 0.53846154
41  0.000000000 0.74025974 0.81818182 0.50000000 0.27272727 0.53846154
42  0.019305019 0.60389610 0.81818182 0.55555556 0.27272727 0.61538462
43  0.023166023 0.56493506 0.86363636 0.58333333 0.22727273 0.53846154
44  0.023166023 0.37012987 0.90909091 0.63888889 0.27272727 0.46153846
45  0.023166023 0.62337662 0.90909091 0.58333333 0.22727273 0.46153846
46  0.023166023 0.53246753 0.95454545 0.69444444 0.22727273 0.38461538
47  0.019305019 0.34415584 0.95454545 0.47222222 0.27272727 0.23076923
48  0.023166023 0.50000000 1.00000000 0.55555556 0.22727273 0.15384615
49  0.023166023 0.21428571 0.95454545 0.61111111 0.27272727 0.15384615
50  0.023166023 0.28571429 1.00000000 0.50000000 0.22727273 0.15384615
51  0.023166023 0.25324675 0.95454545 0.66666667 0.27272727 0.15384615
52  0.019305019 0.38311688 0.95454545 0.58333333 0.27272727 0.15384615
53  0.023166023 0.37012987 0.90909091 0.83333333 0.18181818 0.00000000
54  0.023166023 0.48051948 0.81818182 0.61111111 0.18181818 0.00000000
55  0.019305019 0.77272727 0.72727273 0.88888889 0.09090909 0.15384615
56  0.019305019 0.70129870 0.68181818 0.63888889 0.13636364 0.07692308
57  0.023166023 0.79870130 0.63636364 0.83333333 0.09090909 0.30769231
58  0.023166023 0.91558442 0.63636364 0.77777778 0.18181818 0.53846154
59  0.019305019 1.00000000 0.59090909 0.83333333 0.09090909 0.69230769
60  0.023166023 0.82467532 0.63636364 0.75000000 0.18181818 0.84615385
61  0.023166023 0.85714286 0.63636364 0.72222222 0.13636364 0.84615385
62  0.019305019 0.72727273 0.63636364 0.75000000 0.18181818 0.76923077
63  0.023166023 0.80519481 0.59090909 0.69444444 0.09090909 0.69230769
64  0.023166023 0.87662338 0.54545455 0.86111111 0.13636364 0.69230769
65  0.023166023 0.79870130 0.50000000 0.69444444 0.04545455 0.53846154
66  0.019305019 0.70129870 0.50000000 0.80555556 0.13636364 0.46153846
67  0.023166023 0.77922078 0.45454545 0.80555556 0.13636364 0.53846154
68  0.023166023 0.70129870 0.45454545 0.88888889 0.13636364 0.53846154
69  0.023166023 0.62987013 0.40909091 0.77777778 0.09090909 0.61538462
70  0.023166023 0.57142857 0.40909091 0.94444444 0.09090909 0.61538462
71  0.023166023 0.72727273 0.40909091 0.77777778 0.09090909 0.69230769
72  0.027027027 0.61688312 0.36363636 1.00000000 0.09090909 0.46153846
73  0.027027027 0.80519481 0.36363636 0.66666667 0.09090909 0.69230769
74  0.027027027 0.77922078 0.36363636 0.94444444 0.09090909 1.00000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.18181818 0.76923077
76  0.027027027 0.38311688 0.40909091 0.94444444 0.09090909 0.76923077
77  0.027027027 0.62987013 0.40909091 0.75000000 0.18181818 0.69230769
78  0.027027027 0.55844156 0.45454545 0.83333333 0.09090909 0.53846154
79  0.027027027 0.45454545 0.45454545 0.69444444 0.22727273 0.23076923
80  0.027027027 0.61038961 0.40909091 0.80555556 0.18181818 0.53846154
81  0.030888031 0.64935065 0.45454545 0.72222222 0.31818182 0.53846154
82  0.027027027 0.82467532 0.45454545 0.69444444 0.31818182 0.53846154
83  0.027027027 0.57792208 0.45454545 0.66666667 0.45454545 0.53846154
84  0.023166023 0.85714286 0.45454545 0.52777778 0.40909091 0.46153846
85  0.011583012 0.33766234 0.45454545 0.58333333 0.50000000 0.38461538
86  0.023166023 0.33116883 0.40909091 0.47222222 0.54545455 0.38461538
87  0.030888031 0.55194805 0.31818182 0.72222222 0.59090909 0.30769231
88  0.030888031 0.44805195 0.22727273 0.33333333 0.72727273 0.23076923
89  0.034749035 0.64285714 0.18181818 0.38888889 0.68181818 0.15384615
90  0.034749035 0.39610390 0.18181818 0.44444444 0.77272727 0.15384615
91  0.034749035 0.42857143 0.18181818 0.33333333 0.77272727 0.15384615
92  0.034749035 0.26623377 0.13636364 0.38888889 0.81818182 0.15384615
93  0.034749035 0.32467532 0.09090909 0.22222222 0.81818182 0.53846154
94  0.034749035 0.25324675 0.00000000 0.16666667 0.81818182 0.61538462
95  0.034749035 0.24675325 0.00000000 0.27777778 0.95454545 0.61538462
96  0.034749035 0.39610390 0.04545455 0.19444444 1.00000000 0.53846154
97  0.034749035 0.12337662 0.04545455 0.30555556 0.95454545 0.53846154
98  0.030888031 0.15584416 0.00000000 0.27777778 0.95454545 0.53846154
99  0.030888031 0.07792208 0.00000000 0.00000000 0.95454545 0.53846154
100 0.027027027 0.07792208 0.00000000 0.05555556 0.86363636 0.53846154
101 0.023166023 0.07142857 0.00000000 0.25000000 0.90909091 0.53846154
    B_PLNT_PRES_OP B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP   past_data
2        0.5000000    0.93333333     0.194148936      0.4545455 0.284403670
3        0.5714286    0.93333333     0.199468085      0.3636364 0.284403670
4        0.5714286    0.93333333     0.242021277      0.3636364 0.284403670
5        0.5000000    0.86666667     0.260638298      0.3636364 0.284403670
6        0.5714286    0.86666667     0.289893617      0.3636364 0.284403670
7        0.6428571    0.86666667     0.276595745      0.3636364 0.238532110
8        0.5714286    0.86666667     0.303191489      0.3636364 0.220183486
9        0.7142857    0.80000000     0.348404255      0.2727273 0.201834862
10       0.5714286    0.80000000     0.345744681      0.3636364 0.174311927
11       0.5000000    0.80000000     0.377659574      0.3636364 0.155963303
12       0.5000000    0.80000000     0.375000000      0.4545455 0.137614679
13       0.5000000    0.80000000     0.396276596      0.4545455 0.100917431
14       0.5000000    0.80000000     0.375000000      0.4545455 0.082568807
15       0.5000000    0.73333333     0.375000000      0.4545455 0.064220183
16       0.5000000    0.73333333     0.359042553      0.4545455 0.045871560
17       0.5000000    0.73333333     0.351063830      0.4545455 0.045871560
18       0.5000000    0.73333333     0.327127660      0.4545455 0.036697248
19       0.5000000    0.73333333     0.324468085      0.3636364 0.018348624
20       0.5714286    0.66666667     0.321808511      0.4545455 0.009174312
21       0.5000000    0.66666667     0.297872340      0.3636364 0.009174312
22       0.5000000    0.60000000     0.279255319      0.4545455 0.009174312
23       0.5714286    0.60000000     0.265957447      0.3636364 0.018348624
24       0.5714286    0.53333333     0.247340426      0.3636364 0.000000000
25       0.5000000    0.53333333     0.234042553      0.4545455 0.000000000
26       0.5000000    0.53333333     0.228723404      0.4545455 0.009174312
27       0.5000000    0.46666667     0.228723404      0.4545455 0.009174312
28       0.5000000    0.46666667     0.228723404      0.3636364 0.027522936
29       0.5000000    0.46666667     0.223404255      0.3636364 0.045871560
30       0.4285714    0.40000000     0.226063830      0.4545455 0.064220183
31       0.4285714    0.40000000     0.204787234      0.4545455 0.082568807
32       0.5000000    0.40000000     1.000000000      0.3636364 0.064220183
33       0.5000000    0.33333333     0.319148936      0.4545455 0.357798165
34       0.5000000    0.33333333     0.194148936      0.4545455 0.568807339
35       0.5000000    0.33333333     0.175531915      0.4545455 0.568807339
36       0.5000000    0.33333333     0.172872340      0.3636364 0.596330275
37       0.5000000    0.33333333     0.170212766      0.3636364 0.605504587
38       0.5000000    0.33333333     0.170212766      0.4545455 0.605504587
39       0.5000000    0.33333333     0.164893617      0.4545455 0.577981651
40       0.5000000    0.33333333     0.175531915      0.3636364 0.577981651
41       0.5714286    0.33333333     0.180851064      0.3636364 0.605504587
42       0.5714286    0.33333333     0.196808511      0.3636364 0.642201835
43       0.5714286    0.33333333     0.215425532      0.3636364 0.669724771
44       0.5714286    0.33333333     0.231382979      0.3636364 0.724770642
45       0.5714286    0.33333333     0.226063830      0.4545455 0.770642202
46       0.5000000    0.33333333     0.207446809      0.5454545 0.752293578
47       0.4285714    0.33333333     0.204787234      0.4545455 0.770642202
48       0.4285714    0.40000000     0.156914894      0.5454545 0.770642202
49       0.4285714    0.40000000     0.167553191      0.5454545 0.761467890
50       0.4285714    0.40000000     0.223404255      0.5454545 0.779816514
51       0.4285714    0.40000000     0.228723404      0.5454545 0.807339450
52       0.4285714    0.40000000     0.215425532      0.5454545 0.798165138
53       0.4285714    0.46666667     0.114361702      0.5454545 0.798165138
54       0.4285714    0.46666667     0.186170213      0.5454545 0.779816514
55       0.5000000    0.40000000     0.202127660      0.5454545 0.798165138
56       0.4285714    0.33333333     0.172872340      0.5454545 0.816513761
57       0.5000000    0.26666667     0.164893617      0.5454545 0.798165138
58       0.5714286    0.26666667     0.170212766      0.4545455 0.779816514
59       0.6428571    0.26666667     0.207446809      0.3636364 0.779816514
60       0.7142857    0.26666667     0.202127660      0.2727273 0.816513761
61       0.6428571    0.26666667     0.196808511      0.3636364 0.816513761
62       0.6428571    0.26666667     0.191489362      0.3636364 0.844036697
63       0.6428571    0.26666667     0.148936170      0.3636364 0.853211009
64       0.5714286    0.26666667     0.204787234      0.3636364 0.844036697
65       0.5000000    0.26666667     0.220744681      0.4545455 0.862385321
66       0.4285714    0.20000000     0.226063830      0.5454545 0.853211009
67       0.4285714    0.13333333     0.130319149      0.4545455 0.871559633
68       0.5000000    0.13333333     0.090425532      0.4545455 0.871559633
69       0.5000000    0.06666667     0.061170213      0.4545455 0.889908257
70       0.5000000    0.06666667     0.050531915      0.4545455 0.899082569
71       0.5714286    0.06666667     0.029255319      0.4545455 0.899082569
72       0.3571429    0.00000000     0.023936170      0.6363636 0.908256881
73       0.5714286    0.00000000     0.042553191      0.4545455 0.917431193
74       1.0000000    0.00000000     0.039893617      0.0000000 0.944954128
75       0.7857143    0.00000000     0.026595745      0.1818182 0.954128440
76       0.7142857    0.00000000     0.007978723      0.2727273 0.963302752
77       0.6428571    0.00000000     0.010638298      0.3636364 0.963302752
78       0.4285714    0.00000000     0.021276596      0.5454545 0.981651376
79       0.0000000    0.00000000     0.082446809      1.0000000 1.000000000
80       0.5000000    0.00000000     0.023936170      0.5454545 0.972477064
81       0.5000000    0.00000000     0.000000000      0.4545455 0.972477064
82       0.5000000    0.06666667     0.029255319      0.4545455 0.972477064
83       0.5000000    0.06666667     0.042553191      0.4545455 0.972477064
84       0.5000000    0.06666667     0.055851064      0.5454545 0.944954128
85       0.5000000    0.06666667     0.045212766      0.4545455 0.935779817
86       0.5000000    0.06666667     0.058510638      0.4545455 0.926605505
87       0.5000000    0.06666667     0.087765957      0.4545455 0.935779817
88       0.4285714    0.06666667     0.069148936      0.5454545 0.926605505
89       0.4285714    0.06666667     0.085106383      0.5454545 0.926605505
90       0.5000000    0.06666667     0.119680851      0.5454545 0.917431193
91       0.5714286    0.06666667     0.162234043      0.4545455 0.889908257
92       0.5000000    0.06666667     0.156914894      0.4545455 0.889908257
93       0.5714286    0.06666667     0.159574468      0.4545455 0.889908257
94       0.5714286    0.13333333     0.135638298      0.4545455 0.880733945
95       0.5714286    0.13333333     0.180851064      0.4545455 0.871559633
96       0.5714286    0.13333333     0.188829787      0.4545455 0.889908257
97       0.5714286    0.20000000     0.098404255      0.4545455 0.880733945
98       0.5714286    0.13333333     0.159574468      0.5454545 0.871559633
99       0.5714286    0.13333333     0.154255319      0.4545455 0.862385321
100      0.5000000    0.13333333     0.188829787      0.4545455 0.862385321
101      0.5000000    0.13333333     0.223404255      0.4545455 0.853211009

$model.list
$model.list$response
[1] "B_PLNT_CL2_VAL"

$model.list$variables
 [1] "B_CL2_VAL"       "B_TURB_VAL"      "B_PH_VAL"        "B_COND_VAL"     
 [5] "B_TEMP_VAL"      "B_PRES_OP"       "B_PLNT_PRES_OP"  "B_PLNT_PH_VAL"  
 [9] "B_PLNT_TURB_VAL" "B_PLNT_FLOW_OP"  "past_data"      


$err.fct
function (x, y) 
{
    1/2 * (y - x)^2
}
<bytecode: 0x7fd6aa25d4a8>
<environment: 0x7fd6a6560e98>
attr(,"type")
[1] "sse"

$act.fct
function (x) 
{
    1/(1 + exp(-x))
}
<bytecode: 0x7fd6aa25ca88>
<environment: 0x7fd6a6560a00>
attr(,"type")
[1] "logistic"

$linear.output
[1] TRUE

$data
      B_CL2_VAL B_TURB_VAL   B_PH_VAL B_COND_VAL B_TEMP_VAL  B_PRES_OP
2   1.000000000 0.16233766 0.27272727 0.63888889 0.00000000 0.61538462
3   0.996138996 0.34415584 0.27272727 0.33333333 0.00000000 0.61538462
4   0.988416988 0.24675325 0.31818182 0.52777778 0.04545455 0.69230769
5   0.984555985 0.29220779 0.36363636 0.50000000 0.04545455 0.61538462
6   0.984555985 0.22077922 0.36363636 0.55555556 0.04545455 0.69230769
7   0.949806950 0.22077922 0.40909091 0.22222222 0.09090909 0.69230769
8   0.972972973 0.12987013 0.40909091 0.41666667 0.13636364 0.69230769
9   0.969111969 0.12987013 0.45454545 0.22222222 0.22727273 0.76923077
10  0.961389961 0.16883117 0.45454545 0.41666667 0.22727273 0.69230769
11  0.965250965 0.18831169 0.45454545 0.25000000 0.27272727 0.53846154
12  0.949806950 0.29870130 0.45454545 0.38888889 0.27272727 0.46153846
13  0.961389961 0.52597403 0.50000000 0.11111111 0.36363636 0.46153846
14  0.961389961 0.50649351 0.45454545 0.36111111 0.36363636 0.46153846
15  0.961389961 0.51948052 0.50000000 0.16666667 0.45454545 0.46153846
16  0.961389961 0.31818182 0.45454545 0.36111111 0.36363636 0.38461538
17  0.976833977 0.43506494 0.45454545 0.47222222 0.45454545 0.38461538
18  0.980694981 0.51298701 0.36363636 0.55555556 0.36363636 0.38461538
19  0.980694981 0.50000000 0.36363636 0.47222222 0.45454545 0.30769231
20  0.980694981 0.44805195 0.40909091 0.50000000 0.40909091 0.30769231
21  0.972972973 0.43506494 0.40909091 0.52777778 0.45454545 0.23076923
22  0.976833977 0.33116883 0.45454545 0.44444444 0.36363636 0.23076923
23  0.980694981 0.19480519 0.50000000 0.58333333 0.45454545 0.61538462
24  0.976833977 0.25324675 0.50000000 0.50000000 0.40909091 0.61538462
25  0.969111969 0.06493506 0.54545455 0.55555556 0.40909091 0.53846154
26  0.969111969 0.22077922 0.59090909 0.50000000 0.40909091 0.53846154
27  0.965250965 0.10389610 0.63636364 0.47222222 0.36363636 0.53846154
28  0.961389961 0.05194805 0.63636364 0.47222222 0.50000000 0.53846154
29  0.961389961 0.30519481 0.72727273 0.47222222 0.40909091 0.46153846
30  0.961389961 0.00000000 0.72727273 0.55555556 0.45454545 0.46153846
31  0.961389961 0.16233766 0.72727273 0.36111111 0.40909091 0.46153846
32  0.953667954 0.18181818 0.68181818 0.58333333 0.40909091 0.53846154
33  0.957528958 0.14285714 0.72727273 0.41666667 0.45454545 0.53846154
34  0.667953668 0.46753247 0.68181818 0.61111111 0.31818182 0.53846154
35  0.019305019 0.47402597 0.72727273 0.66666667 0.36363636 0.53846154
36  0.015444015 0.61038961 0.72727273 0.50000000 0.31818182 0.53846154
37  0.030888031 0.42207792 0.72727273 0.52777778 0.36363636 0.53846154
38  0.023166023 0.53896104 0.77272727 0.33333333 0.36363636 0.53846154
39  0.003861004 0.48051948 0.77272727 0.63888889 0.27272727 0.46153846
40  0.023166023 0.57792208 0.81818182 0.50000000 0.31818182 0.53846154
41  0.000000000 0.74025974 0.81818182 0.50000000 0.27272727 0.53846154
42  0.019305019 0.60389610 0.81818182 0.55555556 0.27272727 0.61538462
43  0.023166023 0.56493506 0.86363636 0.58333333 0.22727273 0.53846154
44  0.023166023 0.37012987 0.90909091 0.63888889 0.27272727 0.46153846
45  0.023166023 0.62337662 0.90909091 0.58333333 0.22727273 0.46153846
46  0.023166023 0.53246753 0.95454545 0.69444444 0.22727273 0.38461538
47  0.019305019 0.34415584 0.95454545 0.47222222 0.27272727 0.23076923
48  0.023166023 0.50000000 1.00000000 0.55555556 0.22727273 0.15384615
49  0.023166023 0.21428571 0.95454545 0.61111111 0.27272727 0.15384615
50  0.023166023 0.28571429 1.00000000 0.50000000 0.22727273 0.15384615
51  0.023166023 0.25324675 0.95454545 0.66666667 0.27272727 0.15384615
52  0.019305019 0.38311688 0.95454545 0.58333333 0.27272727 0.15384615
53  0.023166023 0.37012987 0.90909091 0.83333333 0.18181818 0.00000000
54  0.023166023 0.48051948 0.81818182 0.61111111 0.18181818 0.00000000
55  0.019305019 0.77272727 0.72727273 0.88888889 0.09090909 0.15384615
56  0.019305019 0.70129870 0.68181818 0.63888889 0.13636364 0.07692308
57  0.023166023 0.79870130 0.63636364 0.83333333 0.09090909 0.30769231
58  0.023166023 0.91558442 0.63636364 0.77777778 0.18181818 0.53846154
59  0.019305019 1.00000000 0.59090909 0.83333333 0.09090909 0.69230769
60  0.023166023 0.82467532 0.63636364 0.75000000 0.18181818 0.84615385
61  0.023166023 0.85714286 0.63636364 0.72222222 0.13636364 0.84615385
62  0.019305019 0.72727273 0.63636364 0.75000000 0.18181818 0.76923077
63  0.023166023 0.80519481 0.59090909 0.69444444 0.09090909 0.69230769
64  0.023166023 0.87662338 0.54545455 0.86111111 0.13636364 0.69230769
65  0.023166023 0.79870130 0.50000000 0.69444444 0.04545455 0.53846154
66  0.019305019 0.70129870 0.50000000 0.80555556 0.13636364 0.46153846
67  0.023166023 0.77922078 0.45454545 0.80555556 0.13636364 0.53846154
68  0.023166023 0.70129870 0.45454545 0.88888889 0.13636364 0.53846154
69  0.023166023 0.62987013 0.40909091 0.77777778 0.09090909 0.61538462
70  0.023166023 0.57142857 0.40909091 0.94444444 0.09090909 0.61538462
71  0.023166023 0.72727273 0.40909091 0.77777778 0.09090909 0.69230769
72  0.027027027 0.61688312 0.36363636 1.00000000 0.09090909 0.46153846
73  0.027027027 0.80519481 0.36363636 0.66666667 0.09090909 0.69230769
74  0.027027027 0.77922078 0.36363636 0.94444444 0.09090909 1.00000000
75  0.027027027 0.49350649 0.40909091 0.72222222 0.18181818 0.76923077
76  0.027027027 0.38311688 0.40909091 0.94444444 0.09090909 0.76923077
77  0.027027027 0.62987013 0.40909091 0.75000000 0.18181818 0.69230769
78  0.027027027 0.55844156 0.45454545 0.83333333 0.09090909 0.53846154
79  0.027027027 0.45454545 0.45454545 0.69444444 0.22727273 0.23076923
80  0.027027027 0.61038961 0.40909091 0.80555556 0.18181818 0.53846154
81  0.030888031 0.64935065 0.45454545 0.72222222 0.31818182 0.53846154
82  0.027027027 0.82467532 0.45454545 0.69444444 0.31818182 0.53846154
83  0.027027027 0.57792208 0.45454545 0.66666667 0.45454545 0.53846154
84  0.023166023 0.85714286 0.45454545 0.52777778 0.40909091 0.46153846
85  0.011583012 0.33766234 0.45454545 0.58333333 0.50000000 0.38461538
86  0.023166023 0.33116883 0.40909091 0.47222222 0.54545455 0.38461538
87  0.030888031 0.55194805 0.31818182 0.72222222 0.59090909 0.30769231
88  0.030888031 0.44805195 0.22727273 0.33333333 0.72727273 0.23076923
89  0.034749035 0.64285714 0.18181818 0.38888889 0.68181818 0.15384615
90  0.034749035 0.39610390 0.18181818 0.44444444 0.77272727 0.15384615
91  0.034749035 0.42857143 0.18181818 0.33333333 0.77272727 0.15384615
92  0.034749035 0.26623377 0.13636364 0.38888889 0.81818182 0.15384615
93  0.034749035 0.32467532 0.09090909 0.22222222 0.81818182 0.53846154
94  0.034749035 0.25324675 0.00000000 0.16666667 0.81818182 0.61538462
95  0.034749035 0.24675325 0.00000000 0.27777778 0.95454545 0.61538462
96  0.034749035 0.39610390 0.04545455 0.19444444 1.00000000 0.53846154
97  0.034749035 0.12337662 0.04545455 0.30555556 0.95454545 0.53846154
98  0.030888031 0.15584416 0.00000000 0.27777778 0.95454545 0.53846154
99  0.030888031 0.07792208 0.00000000 0.00000000 0.95454545 0.53846154
100 0.027027027 0.07792208 0.00000000 0.05555556 0.86363636 0.53846154
101 0.023166023 0.07142857 0.00000000 0.25000000 0.90909091 0.53846154
    B_PLNT_PRES_OP B_PLNT_PH_VAL B_PLNT_TURB_VAL B_PLNT_FLOW_OP B_PLNT_CL2_VAL
2        0.5000000    0.93333333     0.194148936      0.4545455    0.284403670
3        0.5714286    0.93333333     0.199468085      0.3636364    0.284403670
4        0.5714286    0.93333333     0.242021277      0.3636364    0.284403670
5        0.5000000    0.86666667     0.260638298      0.3636364    0.284403670
6        0.5714286    0.86666667     0.289893617      0.3636364    0.238532110
7        0.6428571    0.86666667     0.276595745      0.3636364    0.220183486
8        0.5714286    0.86666667     0.303191489      0.3636364    0.201834862
9        0.7142857    0.80000000     0.348404255      0.2727273    0.174311927
10       0.5714286    0.80000000     0.345744681      0.3636364    0.155963303
11       0.5000000    0.80000000     0.377659574      0.3636364    0.137614679
12       0.5000000    0.80000000     0.375000000      0.4545455    0.100917431
13       0.5000000    0.80000000     0.396276596      0.4545455    0.082568807
14       0.5000000    0.80000000     0.375000000      0.4545455    0.064220183
15       0.5000000    0.73333333     0.375000000      0.4545455    0.045871560
16       0.5000000    0.73333333     0.359042553      0.4545455    0.045871560
17       0.5000000    0.73333333     0.351063830      0.4545455    0.036697248
18       0.5000000    0.73333333     0.327127660      0.4545455    0.018348624
19       0.5000000    0.73333333     0.324468085      0.3636364    0.009174312
20       0.5714286    0.66666667     0.321808511      0.4545455    0.009174312
21       0.5000000    0.66666667     0.297872340      0.3636364    0.009174312
22       0.5000000    0.60000000     0.279255319      0.4545455    0.018348624
23       0.5714286    0.60000000     0.265957447      0.3636364    0.000000000
24       0.5714286    0.53333333     0.247340426      0.3636364    0.000000000
25       0.5000000    0.53333333     0.234042553      0.4545455    0.009174312
26       0.5000000    0.53333333     0.228723404      0.4545455    0.009174312
27       0.5000000    0.46666667     0.228723404      0.4545455    0.027522936
28       0.5000000    0.46666667     0.228723404      0.3636364    0.045871560
29       0.5000000    0.46666667     0.223404255      0.3636364    0.064220183
30       0.4285714    0.40000000     0.226063830      0.4545455    0.082568807
31       0.4285714    0.40000000     0.204787234      0.4545455    0.064220183
32       0.5000000    0.40000000     1.000000000      0.3636364    0.357798165
33       0.5000000    0.33333333     0.319148936      0.4545455    0.568807339
34       0.5000000    0.33333333     0.194148936      0.4545455    0.568807339
35       0.5000000    0.33333333     0.175531915      0.4545455    0.596330275
36       0.5000000    0.33333333     0.172872340      0.3636364    0.605504587
37       0.5000000    0.33333333     0.170212766      0.3636364    0.605504587
38       0.5000000    0.33333333     0.170212766      0.4545455    0.577981651
39       0.5000000    0.33333333     0.164893617      0.4545455    0.577981651
40       0.5000000    0.33333333     0.175531915      0.3636364    0.605504587
41       0.5714286    0.33333333     0.180851064      0.3636364    0.642201835
42       0.5714286    0.33333333     0.196808511      0.3636364    0.669724771
43       0.5714286    0.33333333     0.215425532      0.3636364    0.724770642
44       0.5714286    0.33333333     0.231382979      0.3636364    0.770642202
45       0.5714286    0.33333333     0.226063830      0.4545455    0.752293578
46       0.5000000    0.33333333     0.207446809      0.5454545    0.770642202
47       0.4285714    0.33333333     0.204787234      0.4545455    0.770642202
48       0.4285714    0.40000000     0.156914894      0.5454545    0.761467890
49       0.4285714    0.40000000     0.167553191      0.5454545    0.779816514
50       0.4285714    0.40000000     0.223404255      0.5454545    0.807339450
51       0.4285714    0.40000000     0.228723404      0.5454545    0.798165138
52       0.4285714    0.40000000     0.215425532      0.5454545    0.798165138
53       0.4285714    0.46666667     0.114361702      0.5454545    0.779816514
54       0.4285714    0.46666667     0.186170213      0.5454545    0.798165138
55       0.5000000    0.40000000     0.202127660      0.5454545    0.816513761
56       0.4285714    0.33333333     0.172872340      0.5454545    0.798165138
57       0.5000000    0.26666667     0.164893617      0.5454545    0.779816514
58       0.5714286    0.26666667     0.170212766      0.4545455    0.779816514
59       0.6428571    0.26666667     0.207446809      0.3636364    0.816513761
60       0.7142857    0.26666667     0.202127660      0.2727273    0.816513761
61       0.6428571    0.26666667     0.196808511      0.3636364    0.844036697
62       0.6428571    0.26666667     0.191489362      0.3636364    0.853211009
63       0.6428571    0.26666667     0.148936170      0.3636364    0.844036697
64       0.5714286    0.26666667     0.204787234      0.3636364    0.862385321
65       0.5000000    0.26666667     0.220744681      0.4545455    0.853211009
66       0.4285714    0.20000000     0.226063830      0.5454545    0.871559633
67       0.4285714    0.13333333     0.130319149      0.4545455    0.871559633
68       0.5000000    0.13333333     0.090425532      0.4545455    0.889908257
69       0.5000000    0.06666667     0.061170213      0.4545455    0.899082569
70       0.5000000    0.06666667     0.050531915      0.4545455    0.899082569
71       0.5714286    0.06666667     0.029255319      0.4545455    0.908256881
72       0.3571429    0.00000000     0.023936170      0.6363636    0.917431193
73       0.5714286    0.00000000     0.042553191      0.4545455    0.944954128
74       1.0000000    0.00000000     0.039893617      0.0000000    0.954128440
75       0.7857143    0.00000000     0.026595745      0.1818182    0.963302752
76       0.7142857    0.00000000     0.007978723      0.2727273    0.963302752
77       0.6428571    0.00000000     0.010638298      0.3636364    0.981651376
78       0.4285714    0.00000000     0.021276596      0.5454545    1.000000000
79       0.0000000    0.00000000     0.082446809      1.0000000    0.972477064
80       0.5000000    0.00000000     0.023936170      0.5454545    0.972477064
81       0.5000000    0.00000000     0.000000000      0.4545455    0.972477064
82       0.5000000    0.06666667     0.029255319      0.4545455    0.972477064
83       0.5000000    0.06666667     0.042553191      0.4545455    0.944954128
84       0.5000000    0.06666667     0.055851064      0.5454545    0.935779817
85       0.5000000    0.06666667     0.045212766      0.4545455    0.926605505
86       0.5000000    0.06666667     0.058510638      0.4545455    0.935779817
87       0.5000000    0.06666667     0.087765957      0.4545455    0.926605505
88       0.4285714    0.06666667     0.069148936      0.5454545    0.926605505
89       0.4285714    0.06666667     0.085106383      0.5454545    0.917431193
90       0.5000000    0.06666667     0.119680851      0.5454545    0.889908257
91       0.5714286    0.06666667     0.162234043      0.4545455    0.889908257
92       0.5000000    0.06666667     0.156914894      0.4545455    0.889908257
93       0.5714286    0.06666667     0.159574468      0.4545455    0.880733945
94       0.5714286    0.13333333     0.135638298      0.4545455    0.871559633
95       0.5714286    0.13333333     0.180851064      0.4545455    0.889908257
96       0.5714286    0.13333333     0.188829787      0.4545455    0.880733945
97       0.5714286    0.20000000     0.098404255      0.4545455    0.871559633
98       0.5714286    0.13333333     0.159574468      0.5454545    0.862385321
99       0.5714286    0.13333333     0.154255319      0.4545455    0.862385321
100      0.5000000    0.13333333     0.188829787      0.4545455    0.853211009
101      0.5000000    0.13333333     0.223404255      0.4545455    0.844036697
      past_data
2   0.284403670
3   0.284403670
4   0.284403670
5   0.284403670
6   0.284403670
7   0.238532110
8   0.220183486
9   0.201834862
10  0.174311927
11  0.155963303
12  0.137614679
13  0.100917431
14  0.082568807
15  0.064220183
16  0.045871560
17  0.045871560
18  0.036697248
19  0.018348624
20  0.009174312
21  0.009174312
22  0.009174312
23  0.018348624
24  0.000000000
25  0.000000000
26  0.009174312
27  0.009174312
28  0.027522936
29  0.045871560
30  0.064220183
31  0.082568807
32  0.064220183
33  0.357798165
34  0.568807339
35  0.568807339
36  0.596330275
37  0.605504587
38  0.605504587
39  0.577981651
40  0.577981651
41  0.605504587
42  0.642201835
43  0.669724771
44  0.724770642
45  0.770642202
46  0.752293578
47  0.770642202
48  0.770642202
49  0.761467890
50  0.779816514
51  0.807339450
52  0.798165138
53  0.798165138
54  0.779816514
55  0.798165138
56  0.816513761
57  0.798165138
58  0.779816514
59  0.779816514
60  0.816513761
61  0.816513761
62  0.844036697
63  0.853211009
64  0.844036697
65  0.862385321
66  0.853211009
67  0.871559633
68  0.871559633
69  0.889908257
70  0.899082569
71  0.899082569
72  0.908256881
73  0.917431193
74  0.944954128
75  0.954128440
76  0.963302752
77  0.963302752
78  0.981651376
79  1.000000000
80  0.972477064
81  0.972477064
82  0.972477064
83  0.972477064
84  0.944954128
85  0.935779817
86  0.926605505
87  0.935779817
88  0.926605505
89  0.926605505
90  0.917431193
91  0.889908257
92  0.889908257
93  0.889908257
94  0.880733945
95  0.871559633
96  0.889908257
97  0.880733945
98  0.871559633
99  0.862385321
100 0.862385321
101 0.853211009

$exclude
NULL

$net.result
$net.result[[1]]
           [,1]
2   0.250442594
3   0.275515045
4   0.238887567
5   0.286595955
6   0.286248044
7   0.228689077
8   0.197259011
9   0.201619369
10  0.146763071
11  0.159293369
12  0.104896055
13  0.046647838
14  0.023815930
15  0.017292220
16  0.042037778
17  0.004638168
18  0.015005212
19  0.006776474
20  0.013569236
21  0.016640612
22  0.052435519
23  0.011378903
24  0.026900467
25  0.028266396
26  0.017034355
27  0.054389977
28  0.047310441
29  0.050098701
30  0.090935585
31  0.112207362
32  0.361787246
33  0.461856859
34  0.640712732
35  0.547218974
36  0.620221254
37  0.637860137
38  0.607611153
39  0.599216510
40  0.582046198
41  0.601906759
42  0.654930162
43  0.709652801
44  0.764895338
45  0.773340519
46  0.742716703
47  0.813163859
48  0.751396395
49  0.770109936
50  0.803349568
51  0.808401240
52  0.791888300
53  0.773042156
54  0.797599700
55  0.809557375
56  0.858527535
57  0.845411969
58  0.796890655
59  0.820434911
60  0.830771841
61  0.831160305
62  0.848964082
63  0.870973666
64  0.860808224
65  0.901025136
66  0.897243816
67  0.906271965
68  0.901840010
69  0.923305310
70  0.922550831
71  0.916501871
72  0.927264866
73  0.930464892
74  0.935141636
75  0.939363501
76  0.941771129
77  0.933637214
78  0.940306972
79  0.938222845
80  0.933795583
81  0.924476062
82  0.913478693
83  0.910530225
84  0.898728817
85  0.912997824
86  0.913178615
87  0.905343830
88  0.906106705
89  0.908571153
90  0.906118890
91  0.908389982
92  0.911940447
93  0.902888381
94  0.895533591
95  0.872793117
96  0.867564536
97  0.855708135
98  0.871477626
99  0.890763926
100 0.905641821
101 0.894389192


$weights
$weights[[1]]
$weights[[1]][[1]]
            [,1]
 [1,] -1.4601133
 [2,] -0.2801178
 [3,]  0.7252655
 [4,]  1.1073235
 [5,]  0.5200471
 [6,]  1.9780512
 [7,]  0.6061097
 [8,]  0.3331582
 [9,]  2.5104139
[10,] -1.5761564
[11,]  1.0227552
[12,] -4.7590349

$weights[[1]][[2]]
           [,1]
[1,]  0.9682095
[2,] -1.0742807



$generalized.weights
$generalized.weights[[1]]
         [,1]        [,2]        [,3]        [,4]        [,5]        [,6]
2   0.3554427  -0.9202926  -1.4050876  -0.6598901  -2.5099578  -0.7690953
3   0.3452889  -0.8940030  -1.3649491  -0.6410393  -2.4382570  -0.7471249
4   0.3608004  -0.9341645  -1.4262670  -0.6698368  -2.5477913  -0.7806881
5   0.3413344  -0.8837642  -1.3493167  -0.6336976  -2.4103322  -0.7385683
6   0.3414542  -0.8840745  -1.3497904  -0.6339201  -2.4111784  -0.7388275
7   0.3659587  -0.9475202  -1.4466582  -0.6794134  -2.5842167  -0.7918495
8   0.3850816  -0.9970321  -1.5222522  -0.7149156  -2.7192530  -0.8332270
9   0.3820833  -0.9892691  -1.5103998  -0.7093492  -2.6980806  -0.8267394
10  0.4324657  -1.1197164  -1.7095645  -0.8028856  -3.0538557  -0.9357552
11  0.4179527  -1.0821402  -1.6521939  -0.7759419  -2.9513724  -0.9043525
12  0.5057942  -1.3095745  -1.9994368  -0.9390222  -3.5716648  -1.0944210
13  0.8251931  -2.1365448  -3.2620414  -1.5319961  -5.8271000  -1.7855261
14  1.3757603  -3.5620431  -5.4384688  -2.5541408  -9.7149294  -2.9768255
15  1.8000182  -4.6605084  -7.1155875  -3.3417884 -12.7108260  -3.8948210
16  0.8881936  -2.2996623  -3.5110865  -1.6489585  -6.2719782  -1.9218446
17  6.0250927 -15.5998395 -23.8175784 -11.1857675 -42.5461837 -13.0369001
18  2.0360684  -5.2716765  -8.0487090  -3.7800227 -14.3776939  -4.4055787
19  4.2032357 -10.8827875 -16.6156609  -7.8034348 -29.6811434  -9.0948251
20  2.2249417  -5.7606971  -8.7953375  -4.1306719 -15.7114229  -4.8142567
21  1.8606640  -4.8175291  -7.3553242  -3.4543792 -13.1390760  -4.0260443
22  0.7617711  -1.9723361  -3.0113303  -1.4142513  -5.3792459  -1.6482957
23  2.6048402  -6.7443094 -10.2971007  -4.8359650 -18.3940756  -5.6362688
24  1.2468010  -3.2281488  -4.9286846  -2.3147240  -8.8042838  -2.6977876
25  1.1986831  -3.1035645  -4.7384712  -2.2253915  -8.4644989  -2.5936715
26  1.8234633  -4.7212111  -7.2082674  -3.3853149 -12.8763834  -3.9455507
27  0.7433997  -1.9247696  -2.9387066  -1.3801440  -5.2495156  -1.6085441
28  0.8171465  -2.1157108  -3.2302324  -1.5170572  -5.7702786  -1.7681150
29  0.7856161  -2.0340741  -3.1055909  -1.4585202  -5.5476270  -1.6998906
30  0.5451434  -1.4114554  -2.1549869  -1.0120753  -3.8495294  -1.1795636
31  0.4890755  -1.2662875  -1.9333469  -0.9079836  -3.4536061  -1.0582457
32  0.3204009  -0.8295644  -1.2665654  -0.5948340  -2.2625105  -0.6932731
33  0.3016922  -0.7811248  -1.1926086  -0.5601007  -2.1303989  -0.6527917
34  0.2770254  -0.7172590  -1.0950993  -0.5143061  -1.9562147  -0.5994186
35  0.2894356  -0.7493907  -1.1441575  -0.5373460  -2.0438490  -0.6262713
36  0.2797832  -0.7243993  -1.1060010  -0.5194260  -1.9756887  -0.6053858
37  0.2774134  -0.7182634  -1.0966328  -0.5150263  -1.9589540  -0.6002580
38  0.2814551  -0.7287281  -1.1126101  -0.5225300  -1.9874948  -0.6090034
39  0.2825619  -0.7315939  -1.1169855  -0.5245848  -1.9953108  -0.6113984
40  0.2848201  -0.7374406  -1.1259122  -0.5287772  -2.0112568  -0.6162845
41  0.2822076  -0.7306765  -1.1155848  -0.5239270  -1.9928086  -0.6106317
42  0.2750667  -0.7121876  -1.0873563  -0.5106697  -1.9423831  -0.5951804
43  0.2669060  -0.6910583  -1.0550964  -0.4955190  -1.8847561  -0.5775225
44  0.2567608  -0.6647909  -1.0149917  -0.4766841  -1.8131157  -0.5555706
45  0.2549254  -0.6600388  -1.0077364  -0.4732767  -1.8001553  -0.5515993
46  0.2611679  -0.6762017  -1.0324137  -0.4848662  -1.8442371  -0.5651067
47  0.2446076  -0.6333246  -0.9669496  -0.4541214  -1.7272962  -0.5292740
48  0.2595073  -0.6719020  -1.0258489  -0.4817831  -1.8325102  -0.5615134
49  0.2556391  -0.6618867  -1.0105578  -0.4746018  -1.8051952  -0.5531436
50  0.2474590  -0.6407073  -0.9782214  -0.4594152  -1.7474315  -0.5354438
51  0.2460214  -0.6369852  -0.9725385  -0.4567463  -1.7372800  -0.5323332
52  0.2505092  -0.6486046  -0.9902789  -0.4650779  -1.7689702  -0.5420436
53  0.2549919  -0.6602111  -1.0079995  -0.4734003  -1.8006252  -0.5517433
54  0.2490238  -0.6447588  -0.9844072  -0.4623203  -1.7584814  -0.5388297
55  0.2456836  -0.6361106  -0.9712031  -0.4561191  -1.7348945  -0.5316022
56  0.2271321  -0.5880779  -0.8978677  -0.4216776  -1.6038928  -0.4914610
57  0.2331145  -0.6035672  -0.9215164  -0.4327841  -1.6461374  -0.5044055
58  0.2492118  -0.6452456  -0.9851504  -0.4626694  -1.7598091  -0.5392365
59  0.2423287  -0.6274241  -0.9579407  -0.4498905  -1.7112034  -0.5243429
60  0.2388036  -0.6182973  -0.9440061  -0.4433462  -1.6863115  -0.5167156
61  0.2386639  -0.6179355  -0.9434538  -0.4430868  -1.6853249  -0.5164132
62  0.2315871  -0.5996125  -0.9154785  -0.4299484  -1.6353517  -0.5011006
63  0.2204348  -0.5707377  -0.8713929  -0.4092439  -1.5566000  -0.4769697
64  0.2259875  -0.5851145  -0.8933432  -0.4195527  -1.5958107  -0.4889845
65  0.1978336  -0.5122198  -0.7820488  -0.3672840  -1.3970015  -0.4280659
66  0.2013677  -0.5213703  -0.7960196  -0.3738453  -1.4219580  -0.4357130
67  0.1924758  -0.4983478  -0.7608693  -0.3573372  -1.3591678  -0.4164729
68  0.1970377  -0.5101592  -0.7789027  -0.3658065  -1.3913815  -0.4263438
69  0.1702052  -0.4406861  -0.6728323  -0.3159912  -1.2019041  -0.3682846
70  0.1713935  -0.4437628  -0.6775297  -0.3181973  -1.2102953  -0.3708558
71  0.1801612  -0.4664636  -0.7121890  -0.3344748  -1.2722084  -0.3898271
72  0.1635735  -0.4235155  -0.6466165  -0.3036792  -1.1550740  -0.3539350
73  0.1576731  -0.4082385  -0.6232919  -0.2927249  -1.1134083  -0.3411679
74  0.1480214  -0.3832489  -0.5851382  -0.2748063  -1.0452531  -0.3202840
75  0.1380502  -0.3574319  -0.5457211  -0.2562943  -0.9748410  -0.2987085
76  0.1317253  -0.3410558  -0.5207184  -0.2445519  -0.9301777  -0.2850228
77  0.1512722  -0.3916658  -0.5979888  -0.2808415  -1.0682087  -0.3273179
78  0.1356317  -0.3511701  -0.5361607  -0.2518043  -0.9577629  -0.2934754
79  0.1408767  -0.3647502  -0.5568946  -0.2615419  -0.9948006  -0.3048244
80  0.1509369  -0.3907975  -0.5966632  -0.2802189  -1.0658405  -0.3265923
81  0.1683153  -0.4357928  -0.6653613  -0.3124825  -1.1885585  -0.3641953
82  0.1840947  -0.4766480  -0.7277383  -0.3417775  -1.2999847  -0.3983382
83  0.1876819  -0.4859356  -0.7419185  -0.3484371  -1.3253153  -0.4061000
84  0.2000100  -0.5178550  -0.7906525  -0.3713247  -1.4123705  -0.4327752
85  0.1846959  -0.4782044  -0.7301147  -0.3428935  -1.3042297  -0.3996390
86  0.1844706  -0.4776212  -0.7292242  -0.3424753  -1.3026391  -0.3991516
87  0.1934653  -0.5009097  -0.7647807  -0.3591742  -1.3661549  -0.4186139
88  0.1926534  -0.4988076  -0.7615712  -0.3576669  -1.3604216  -0.4168571
89  0.1899411  -0.4917851  -0.7508494  -0.3526314  -1.3412688  -0.4109884
90  0.1926403  -0.4987737  -0.7615195  -0.3576426  -1.3603293  -0.4168289
91  0.1901453  -0.4923138  -0.7516566  -0.3530105  -1.3427108  -0.4114302
92  0.1859953  -0.4815688  -0.7352513  -0.3453059  -1.3134055  -0.4024506
93  0.1959949  -0.5074592  -0.7747803  -0.3638704  -1.3840175  -0.4240874
94  0.2028855  -0.5252999  -0.8020193  -0.3766630  -1.4326754  -0.4389970
95  0.2193543  -0.5679402  -0.8671217  -0.4072380  -1.5489703  -0.4746318
96  0.2223848  -0.5757866  -0.8791015  -0.4128642  -1.5703702  -0.4811891
97  0.2285012  -0.5916227  -0.9032798  -0.4242194  -1.6135607  -0.4944234
98  0.2201384  -0.5699702  -0.8702212  -0.4086936  -1.5545069  -0.4763283
99  0.2068778  -0.5356366  -0.8178012  -0.3840749  -1.4608672  -0.4476355
100 0.1931497  -0.5000925  -0.7635330  -0.3585882  -1.3639260  -0.4179310
101 0.2038748  -0.5278614  -0.8059300  -0.3784997  -1.4396614  -0.4411376
          [,7]       [,8]       [,9]       [,10]      [,11]
2   -0.4227459  -3.185475  1.9999917  -1.2977786   6.038760
3   -0.4106695  -3.094477  1.9428589  -1.2607056   5.866254
4   -0.4291181  -3.233491  2.0301383  -1.3173405   6.129785
5   -0.4059662  -3.059037  1.9206078  -1.2462670   5.799069
6   -0.4061088  -3.060111  1.9212821  -1.2467045   5.801105
7   -0.4352532  -3.279720  2.0591630  -1.3361743   6.217421
8   -0.4579970  -3.451099  2.1667629  -1.4059951   6.542308
9   -0.4544310  -3.424228  2.1498923  -1.3950479   6.491369
10  -0.5143533  -3.875755  2.4333820  -1.5790021   7.347336
11  -0.4970923  -3.745690  2.3517210  -1.5260129   7.100769
12  -0.6015666  -4.532925  2.8459841  -1.8467363   8.593143
13  -0.9814439  -7.395377  4.6431665  -3.0129135  14.019543
14  -1.6362613 -12.329557  7.7410778  -5.0231233  23.373353
15  -2.1408527 -16.131754 10.1282766  -6.5721575  30.581244
16  -1.0563736  -7.959987  4.9976556  -3.2429386  15.089884
17  -7.1659474 -53.996851 33.9017714 -21.9985878 102.362759
18  -2.4215991 -18.247234 11.4564750  -7.4340149  34.591596
19  -4.9991208 -37.669378 23.6506133 -15.3466934  71.410488
20  -2.6462357 -19.939917 12.5192208  -8.1236220  37.800443
21  -2.2129817 -16.675261 10.4695160  -6.7935851  31.611580
22  -0.9060130  -6.826989  4.2863061  -2.7813497  12.942041
23  -3.0980682 -23.344565 14.6568198  -9.5106929  44.254694
24  -1.4828835 -11.173825  7.0154545  -4.5522722  21.182412
25  -1.4256544 -10.742592  6.7447061  -4.3765858  20.364916
26  -2.1687371 -16.341869 10.2601965  -6.6577593  30.979562
27  -0.8841628  -6.662344  4.1829340  -2.7142724  12.629920
28  -0.9718736  -7.323262  4.5978898  -2.9835339  13.882835
29  -0.9343730  -7.040688  4.4204760  -2.8684114  13.347153
30  -0.6483666  -4.885572  3.0673930  -1.9904067   9.261664
31  -0.5816822  -4.383092  2.7519123  -1.7856938   8.309104
32  -0.3810690  -2.871431  1.8028201  -1.1698355   5.443422
33  -0.3588178  -2.703764  1.6975505  -1.1015269   5.125572
34  -0.3294803  -2.482700  1.5587565  -1.0114646   4.706498
35  -0.3442404  -2.593920  1.6285856  -1.0567761   4.917339
36  -0.3327603  -2.507416  1.5742739  -1.0215337   4.753351
37  -0.3299417  -2.486177  1.5609393  -1.0128810   4.713089
38  -0.3347488  -2.522399  1.5836813  -1.0276381   4.781756
39  -0.3360652  -2.532319  1.5899092  -1.0316794   4.800560
40  -0.3387510  -2.552556  1.6026153  -1.0399243   4.838925
41  -0.3356438  -2.529143  1.5879155  -1.0303856   4.794540
42  -0.3271507  -2.465146  1.5477353  -1.0043130   4.673220
43  -0.3174448  -2.392010  1.5018168  -0.9745169   4.534574
44  -0.3053785  -2.301089  1.4447320  -0.9374750   4.362213
45  -0.3031957  -2.284640  1.4344049  -0.9307738   4.331032
46  -0.3106202  -2.340586  1.4695303  -0.9535664   4.437089
47  -0.2909242  -2.192172  1.3763491  -0.8931019   4.155738
48  -0.3086451  -2.325703  1.4601860  -0.9475030   4.408875
49  -0.3040445  -2.291036  1.4384207  -0.9333797   4.343157
50  -0.2943155  -2.217726  1.3923934  -0.9035129   4.204182
51  -0.2926057  -2.204843  1.3843044  -0.8982640   4.179759
52  -0.2979432  -2.245062  1.4095559  -0.9146495   4.256003
53  -0.3032748  -2.285236  1.4347793  -0.9310168   4.332162
54  -0.2961766  -2.231750  1.4011982  -0.9092263   4.230768
55  -0.2922040  -2.201815  1.3824036  -0.8970306   4.174019
56  -0.2701397  -2.035557  1.2780185  -0.8292959   3.858840
57  -0.2772548  -2.089171  1.3116799  -0.8511386   3.960477
58  -0.2964002  -2.233435  1.4022561  -0.9099127   4.233962
59  -0.2882137  -2.171748  1.3635260  -0.8847811   4.117020
60  -0.2840212  -2.140157  1.3436916  -0.8719107   4.057132
61  -0.2838551  -2.138905  1.3429054  -0.8714006   4.054759
62  -0.2754382  -2.075482  1.3030856  -0.8455618   3.934527
63  -0.2621743  -1.975536  1.2403345  -0.8048431   3.745057
64  -0.2687784  -2.025299  1.2715784  -0.8251170   3.839394
65  -0.2352935  -1.772984  1.1131627  -0.7223224   3.361075
66  -0.2394968  -1.804657  1.1330486  -0.7352262   3.421119
67  -0.2289212  -1.724967  1.0830159  -0.7027604   3.270050
68  -0.2343469  -1.765851  1.1086846  -0.7194165   3.347554
69  -0.2024337  -1.525379  0.9577047  -0.6214469   2.891686
70  -0.2038470  -1.536028  0.9643909  -0.6257856   2.911875
71  -0.2142749  -1.614604  1.0137247  -0.6577979   3.060833
72  -0.1945462  -1.465945  0.9203894  -0.5972333   2.779017
73  -0.1875286  -1.413065  0.8871892  -0.5756900   2.678773
74  -0.1760494  -1.326567  0.8328815  -0.5404501   2.514796
75  -0.1641900  -1.237205  0.7767756  -0.5040435   2.345390
76  -0.1566675  -1.180521  0.7411868  -0.4809502   2.237934
77  -0.1799157  -1.355701  0.8511731  -0.5523194   2.570026
78  -0.1613136  -1.215530  0.7631674  -0.4952132   2.304302
79  -0.1675518  -1.262536  0.7926798  -0.5143636   2.393412
80  -0.1795169  -1.352696  0.8492861  -0.5510949   2.564328
81  -0.2001859  -1.508441  0.9470706  -0.6145465   2.859578
82  -0.2189532  -1.649856  1.0358575  -0.6721597   3.127661
83  -0.2232196  -1.682004  1.0560415  -0.6852569   3.188604
84  -0.2378820  -1.792489  1.1254091  -0.7302690   3.398052
85  -0.2196681  -1.655244  1.0392400  -0.6743545   3.137874
86  -0.2194002  -1.653225  1.0379726  -0.6735321   3.134047
87  -0.2300981  -1.733835  1.0885834  -0.7063731   3.286861
88  -0.2291324  -1.726559  1.0840150  -0.7034087   3.273067
89  -0.2259066  -1.702251  1.0687537  -0.6935057   3.226987
90  -0.2291169  -1.726442  1.0839415  -0.7033609   3.272845
91  -0.2261494  -1.704081  1.0699026  -0.6942512   3.230456
92  -0.2212136  -1.666889  1.0465515  -0.6790989   3.159950
93  -0.2331066  -1.756505  1.1028168  -0.7156090   3.329837
94  -0.2413019  -1.818259  1.1415885  -0.7407676   3.446904
95  -0.2608892  -1.965852  1.2342549  -0.8008981   3.726700
96  -0.2644935  -1.993012  1.2513068  -0.8119630   3.778187
97  -0.2717680  -2.047826  1.2857221  -0.8342947   3.882100
98  -0.2618217  -1.972879  1.2386666  -0.8037608   3.740021
99  -0.2460502  -1.854038  1.1640524  -0.7553443   3.514731
100 -0.2297227  -1.731006  1.0868074  -0.7052206   3.281498
101 -0.2424786  -1.827125  1.1471551  -0.7443797   3.463712


$startweights
$startweights[[1]]
$startweights[[1]][[1]]
             [,1]
 [1,] -1.91435943
 [2,]  1.17658331
 [3,] -1.66497244
 [4,] -0.46353040
 [5,] -1.11592011
 [6,] -0.75081900
 [7,]  2.08716655
 [8,]  0.01739562
 [9,] -1.28630053
[10,] -1.64060553
[11,]  0.45018710
[12,] -0.01855983

$startweights[[1]][[2]]
           [,1]
[1,] -0.3180684
[2,] -0.9293621



$result.matrix
                                     [,1]
error                         0.044757609
reached.threshold             0.008251792
steps                       463.000000000
Intercept.to.1layhid1        -1.460113332
B_CL2_VAL.to.1layhid1        -0.280117758
B_TURB_VAL.to.1layhid1        0.725265537
B_PH_VAL.to.1layhid1          1.107323492
B_COND_VAL.to.1layhid1        0.520047125
B_TEMP_VAL.to.1layhid1        1.978051165
B_PRES_OP.to.1layhid1         0.606109718
B_PLNT_PRES_OP.to.1layhid1    0.333158215
B_PLNT_PH_VAL.to.1layhid1     2.510413949
B_PLNT_TURB_VAL.to.1layhid1  -1.576156367
B_PLNT_FLOW_OP.to.1layhid1    1.022755237
past_data.to.1layhid1        -4.759034942
Intercept.to.B_PLNT_CL2_VAL   0.968209455
1layhid1.to.B_PLNT_CL2_VAL   -1.074280666

attr(,"class")
[1] "nn"


$internal
$internal$postProcessing
function (model, events) 
{
    hist <- events
    hist[1:length(hist)] <- F
    if (!is.null(model$oldModel)) {
        hist <- model$oldModel$eventHistory
    }
    postProcessorControl <- model$userConfig$postProcessorControl
    con <- getDefaultPostControl()
    con[names(postProcessorControl)] <- postProcessorControl
    postProcessorControl <- con
    rm(con)
    nEvents <- length(events)
    eventThreshold <- postProcessorControl$eventThreshold
    BEDWindowSize <- model$userConfig$postProcessorControl$bedWindowSize
    BEDProbList <- NULL
    realEvents <- rep(F, nEvents)
    for (k in 1:nEvents) {
        combinedEventVector <- c(hist, events[1:k])
        combinedEventVector <- tail(combinedEventVector, n = BEDWindowSize)
        r <- length(combinedEventVector[combinedEventVector == 
            T])
        p <- 0
        for (i in 1:r) {
            p = p + factorial(BEDWindowSize)/factorial(BEDWindowSize - 
                i)/factorial(i) * 0.5^BEDWindowSize
        }
        BEDProbList <- c(BEDProbList, p)
        realEvents[k] <- (BEDProbList[(k)] > eventThreshold)
    }
    return(realEvents)
}
<bytecode: 0x7fd6a8280c60>
<environment: 0x7fd6acba7780>


$userConfig
$userConfig$dataPreparationControl
$userConfig$dataPreparationControl$useNormalization
[1] TRUE

$userConfig$dataPreparationControl$useTimeSeriesFormat
[1] TRUE


$userConfig$buildNeuralNetModelControl
$userConfig$buildNeuralNetModelControl$hidden
[1] 1

$userConfig$buildNeuralNetModelControl$algorithm
[1] "rprop+"

$userConfig$buildNeuralNetModelControl$threshold
[1] 0.01

$userConfig$buildNeuralNetModelControl$stepmax
[1] 1e+05

$userConfig$buildNeuralNetModelControl$linear.output
[1] TRUE

$userConfig$buildNeuralNetModelControl$rep
[1] 1


$userConfig$buildForecastModelControl
list()

$userConfig$postProcessorControl
$userConfig$postProcessorControl$nStandardDeviationseventThreshold
[1] 2

$userConfig$postProcessorControl$eventThreshold
[1] 0.7

$userConfig$postProcessorControl$bedWindowSize
[1] 30



$normalization
$normalization$min_x
 [1]   0.620   0.256   7.040 231.200  57.600  64.000  63.000   7.540   0.374
[10]  13.000   3.030

$normalization$max_x
 [1]   3.21   0.41   7.26 234.80  59.80  77.00  77.00   7.69   0.75  14.10
[11]   4.12


$buildModelAlgo
[1] "NeuralNetwork"

$excludedVariables
$excludedVariables[[1]]
[1] "B_TOC_VAL"


attr(,"class")
[1] "MultivariateNeuralNetwork"
> 
> 
> 
> cleanEx()
> nameEx("detectEvents")
> ### * detectEvents
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: detectEvents
> ### Title: detectEvents in a given data.frame
> ### Aliases: detectEvents
> 
> ### ** Examples
> 
> ## Run event detection with default settings:
> def <- detectEvents(x = stationBData[1:100,-1])
> 
> 
> 
> 
> cleanEx()
> nameEx("getSupportedModels")
> ### * getSupportedModels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getSupportedModels
> ### Title: getSupportedModels
> ### Aliases: getSupportedModels
> 
> ### ** Examples
> 
> models <- getSupportedModels()
> 
> 
> 
> cleanEx()
> nameEx("getSupportedPostProcessors")
> ### * getSupportedPostProcessors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getSupportedPostProcessors
> ### Title: getSupportedPostProcessors
> ### Aliases: getSupportedPostProcessors
> 
> ### ** Examples
> 
> preps <- getSupportedPostProcessors()
> 
> 
> 
> cleanEx()
> nameEx("getSupportedPreparations")
> ### * getSupportedPreparations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getSupportedPreparations
> ### Title: getSupportedPreparations
> ### Aliases: getSupportedPreparations
> 
> ### ** Examples
> 
> preps <- getSupportedPreparations()
> 
> 
> 
> cleanEx()
> nameEx("qualityStatistics")
> ### * qualityStatistics
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qualityStatistics
> ### Title: qualityStatistics
> ### Aliases: qualityStatistics
> 
> ### ** Examples
> 
> train <- geccoIC2018Train[15000:17000,]
> edObject <- detectEvents(train[,-c(1,11)],windowSize = 1000,
+                 nIterationsRefit = 500,verbosityLevel = 2,
+                 postProcessorControl = list(nStandardDeviationseventThreshold = 3))
> qualityStatistics(edObject, train$EVENT)
Confusion Matrix and Statistics

          Reference
Prediction FALSE TRUE
     FALSE  1340   27
     TRUE    607   27
                                          
               Accuracy : 0.6832          
                 95% CI : (0.6623, 0.7035)
    No Information Rate : 0.973           
    P-Value [Acc > NIR] : 1               
                                          
                  Kappa : 0.0303          
                                          
 Mcnemar's Test P-Value : <2e-16          
                                          
            Sensitivity : 0.50000         
            Specificity : 0.68824         
         Pos Pred Value : 0.04259         
         Neg Pred Value : 0.98025         
             Prevalence : 0.02699         
         Detection Rate : 0.01349         
   Detection Prevalence : 0.31684         
      Balanced Accuracy : 0.59412         
                                          
       'Positive' Class : TRUE            
                                          
> 
> 
> 
> cleanEx()
> nameEx("simulateEvents")
> ### * simulateEvents
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simulateEvents
> ### Title: Imposes simulated events on the top of the data
> ### Aliases: simulateEvents
> 
> ### ** Examples
> 
> 
> #Generate event of type sinusoidal and ramp on two columns of the stationBData data set
> simupar<-c("B_PH_VAL","B_TEMP_VAL")
> SimulatedEvents<-simulateEvents(stationBData,
+                                 simupar,Event_type = c("sinusoidal","ramp"),
+                                 Start_index = 2500)
> 
> #When specifiying Event_strength the lenght of the vector needs to match the number
> #of elements in Params.
> SimulatedEvents<-simulateEvents(stationBData,
+                                 simupar,Event_type = c("sinusoidal","ramp"),
+                                 Start_index = 2500,
+                                 Percentage = 0.2,
+                                 Event_strength = c(4,1))
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  8.706 0.786 9.984 0.002 0.004 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
